// Code generated by psgo. DO NOT EDIT.

package Data_Distributive

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Type.Equality"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Unit"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋDistributive_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌdistributiveIdentity_once Once
var ᛧdistributiveIdentity Any

func ꞋdistributiveIdentity() Any {
    ᛌdistributiveIdentity_once.Do(func() {
        ᛧdistributiveIdentity = Dict{"distribute": func(dictFunctor Any) Any {
            return Apply(Ꞌcompose(), Data_Identity.ꞋIdentity(), Apply(Data_Functor.Ꞌmap(), dictFunctor, Ꞌunwrap()))
        }, "collect": func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(f Any) Any {
                return Apply(Ꞌcompose(), Data_Identity.ꞋIdentity(), Apply(ˉmap, Apply(Ꞌcompose(), Ꞌunwrap(), f)))
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Identity.ꞋfunctorIdentity()
        },}
    })
return ᛧdistributiveIdentity
}


func Ꞌdistribute() Any {
    return func(dict Any) Any {
        return dict.(Dict)["distribute"]
    }
}

var ᛌdistributiveFunction_once Once
var ᛧdistributiveFunction Any

func ꞋdistributiveFunction() Any {
    ᛌdistributiveFunction_once.Do(func() {
        ᛧdistributiveFunction = Dict{"distribute": func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(a Any) Any {
                return func(e Any) Any {
                    return Apply(ˉmap, func(v Any) Any {
                        return Apply(v, e)
                    }, a)
                }
            }
        }, "collect": func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(f Any) Any {
                return Apply(Ꞌcompose(), Apply(Ꞌdistribute(), ꞋdistributiveFunction(), dictFunctor), Apply(ˉmap, f))
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorFn()
        },}
    })
return ᛧdistributiveFunction
}


func Ꞌcotraverse() Any {
    return func(dictDistributive Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictDistributive.(Dict)["Functor0"], Undefined))
        var distribute1 Any = Apply(Ꞌdistribute(), dictDistributive)
        return func(dictFunctor Any) Any {
            var distribute2 Any = Apply(distribute1, dictFunctor)
            return func(f Any) Any {
                return Apply(Ꞌcompose(), Apply(ˉmap, f), distribute2)
            }
        }
    }
}
func ꞋcollectDefault() Any {
    return func(dictDistributive Any) Any {
        var distribute1 Any = Apply(Ꞌdistribute(), dictDistributive)
        return func(dictFunctor Any) Any {
            var distribute2 Any = Apply(distribute1, dictFunctor)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(f Any) Any {
                return Apply(Ꞌcompose(), distribute2, Apply(ˉmap, f))
            }
        }
    }
}
func ꞋdistributiveTuple() Any {
    return func(dictTypeEquals Any) Any {
        var from Any = Apply(Type_Equality.Ꞌfrom(), dictTypeEquals)
        return Dict{"collect": func(dictFunctor Any) Any {
                return Apply(ꞋcollectDefault(), Apply(ꞋdistributiveTuple(), dictTypeEquals), dictFunctor)
            }, "distribute": func(dictFunctor Any) Any {
                return Apply(Ꞌcompose(), Apply(Data_Tuple.ꞋTuple(), Apply(from, Data_Unit.Ꞌunit())), Apply(Data_Functor.Ꞌmap(), dictFunctor, Data_Tuple.Ꞌsnd()))
            }, "Functor0": func(_ Any) Any {
                return Data_Tuple.ꞋfunctorTuple()
            },}
    }
}
func Ꞌcollect() Any {
    return func(dict Any) Any {
        return dict.(Dict)["collect"]
    }
}
func ꞋdistributeDefault() Any {
    return func(dictDistributive Any) Any {
        var collect1 Any = Apply(Ꞌcollect(), dictDistributive)
        return func(dictFunctor Any) Any {
            return Apply(collect1, dictFunctor, Ꞌidentity())
        }
    }
}



