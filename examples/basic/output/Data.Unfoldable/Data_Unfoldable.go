// Code generated by psgo. DO NOT EDIT.

package Data_Unfoldable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Unfoldable1"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Unit"
)

type _ = Any

func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe.ꞋfunctorMaybe())
}
func ꞋfromJust() Any {
    return Apply(Data_Maybe.ꞋfromJust(), Undefined)
}
func ꞋlessThanOrEq() Any {
    return Apply(Data_Ord.ꞋlessThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌsub() Any {
    return Apply(Data_Ring.Ꞌsub(), Data_Ring.ꞋringInt())
}
func ꞋUnfoldable_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌunfoldr() Any {
    return func(dict Any) Any {
        return dict.(Dict)["unfoldr"]
    }
}

var ᛌunfoldableMaybe_once Once
var ᛧunfoldableMaybe Any

func ꞋunfoldableMaybe() Any {
    ᛌunfoldableMaybe_once.Do(func() {
        ᛧunfoldableMaybe = Dict{"unfoldr": func(f Any) Any {
            return func(b Any) Any {
                return Apply(Ꞌmap(), Data_Tuple.Ꞌfst(), Apply(f, b))
            }
        }, "Unfoldable10": func(_ Any) Any {
            return Data_Unfoldable1.Ꞌunfoldable1Maybe()
        },}
    })
return ᛧunfoldableMaybe
}



var ᛌunfoldableArray_once Once
var ᛧunfoldableArray Any

func ꞋunfoldableArray() Any {
    ᛌunfoldableArray_once.Do(func() {
        ᛧunfoldableArray = Dict{"unfoldr": Apply(ꞋunfoldrArrayImpl(), Data_Maybe.ꞋisNothing(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
            return ꞋfromJust()
        }), Data_Tuple.Ꞌfst(), Data_Tuple.Ꞌsnd()), "Unfoldable10": func(_ Any) Any {
            return Data_Unfoldable1.Ꞌunfoldable1Array()
        },}
    })
return ᛧunfoldableArray
}


func Ꞌreplicate() Any {
    return func(dictUnfoldable Any) Any {
        var unfoldr1 Any = Apply(Ꞌunfoldr(), dictUnfoldable)
        return func(n Any) Any {
            return func(v Any) Any {
                var step Any = func(i Any) Any {
                    var ṩ6 Any = Apply(ꞋlessThanOrEq(), i, 0)
                    if ṩ6 == true {
                        return Data_Maybe.ꞋNothing()
                    }
                    return Apply(Data_Maybe.ꞋJust(), Apply(Data_Tuple.ꞋTuple(), v, Apply(Ꞌsub(), i, 1)))
                }
                return Apply(unfoldr1, step, n)
            }
        }
    }
}
func ꞋreplicateA() Any {
    return func(dictApplicative Any) Any {
        return func(dictUnfoldable Any) Any {
            var replicate1 Any = Apply(Ꞌreplicate(), dictUnfoldable)
            return func(dictTraversable Any) Any {
                var sequence Any = Apply(Data_Traversable.Ꞌsequence(), dictTraversable, dictApplicative)
                return func(n Any) Any {
                    return func(m Any) Any {
                        return Apply(sequence, Apply(replicate1, n, m))
                    }
                }
            }
        }
    }
}
func Ꞌnone() Any {
    return func(dictUnfoldable Any) Any {
        return Apply(Ꞌunfoldr(), dictUnfoldable, Apply(Data_Function.Ꞌconst(), Data_Maybe.ꞋNothing()), Data_Unit.Ꞌunit())
    }
}
func ꞋfromMaybe() Any {
    return func(dictUnfoldable Any) Any {
        return Apply(Ꞌunfoldr(), dictUnfoldable, func(b Any) Any {
            return Apply(Ꞌmap(), Apply(Data_Function.Ꞌflip(), Data_Tuple.ꞋTuple(), Data_Maybe.ꞋNothing()), b)
        })
    }
}


// Foreign values

var foreign = Foreign("Data.Unfoldable")

var ᛌunfoldrArrayImpl_once Once
var ᛧunfoldrArrayImpl Any

func ꞋunfoldrArrayImpl() Any { 
    ᛌunfoldrArrayImpl_once.Do(func() {
        ᛧunfoldrArrayImpl = Get(foreign, "unfoldrArrayImpl")
    })
    return ᛧunfoldrArrayImpl
}


