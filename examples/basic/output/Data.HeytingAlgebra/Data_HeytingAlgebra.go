// Code generated by psgo. DO NOT EDIT.

package Data_HeytingAlgebra

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋHeytingAlgebraRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋHeytingAlgebra_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋttRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["ttRecord"]
    }
}
func Ꞌtt() Any {
    return func(dict Any) Any {
        return dict.(Dict)["tt"]
    }
}
func ꞋnotRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["notRecord"]
    }
}
func Ꞌnot() Any {
    return func(dict Any) Any {
        return dict.(Dict)["not"]
    }
}
func ꞋimpliesRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["impliesRecord"]
    }
}
func Ꞌimplies() Any {
    return func(dict Any) Any {
        return dict.(Dict)["implies"]
    }
}

var ᛌheytingAlgebraUnit_once Once
var ᛧheytingAlgebraUnit Any

func ꞋheytingAlgebraUnit() Any {
    ᛌheytingAlgebraUnit_once.Do(func() {
        ᛧheytingAlgebraUnit = Dict{"ff": Data_Unit.Ꞌunit(), "tt": Data_Unit.Ꞌunit(), "implies": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "conj": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "disj": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "not": func(v Any) Any {
            return Data_Unit.Ꞌunit()
        },}
    })
return ᛧheytingAlgebraUnit
}



var ᛌheytingAlgebraRecordNil_once Once
var ᛧheytingAlgebraRecordNil Any

func ꞋheytingAlgebraRecordNil() Any {
    ᛌheytingAlgebraRecordNil_once.Do(func() {
        ᛧheytingAlgebraRecordNil = Dict{"conjRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "disjRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "ffRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        }, "impliesRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "notRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        }, "ttRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        },}
    })
return ᛧheytingAlgebraRecordNil
}



var ᛌheytingAlgebraProxy_once Once
var ᛧheytingAlgebraProxy Any

func ꞋheytingAlgebraProxy() Any {
    ᛌheytingAlgebraProxy_once.Do(func() {
        ᛧheytingAlgebraProxy = Dict{"conj": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "disj": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "implies": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "ff": Type_Proxy.ꞋProxy(), "not": func(v Any) Any {
            return Type_Proxy.ꞋProxy()
        }, "tt": Type_Proxy.ꞋProxy(),}
    })
return ᛧheytingAlgebraProxy
}


func ꞋffRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["ffRecord"]
    }
}
func Ꞌff() Any {
    return func(dict Any) Any {
        return dict.(Dict)["ff"]
    }
}
func ꞋdisjRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["disjRecord"]
    }
}
func Ꞌdisj() Any {
    return func(dict Any) Any {
        return dict.(Dict)["disj"]
    }
}

var ᛌheytingAlgebraBoolean_once Once
var ᛧheytingAlgebraBoolean Any

func ꞋheytingAlgebraBoolean() Any {
    ᛌheytingAlgebraBoolean_once.Do(func() {
        ᛧheytingAlgebraBoolean = Dict{"ff": false, "tt": true, "implies": func(a Any) Any {
            return func(b Any) Any {
                return Apply(Ꞌdisj(), ꞋheytingAlgebraBoolean(), Apply(Ꞌnot(), ꞋheytingAlgebraBoolean(), a), b)
            }
        }, "conj": ꞋboolConj(), "disj": ꞋboolDisj(), "not": ꞋboolNot(),}
    })
return ᛧheytingAlgebraBoolean
}


func ꞋconjRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["conjRecord"]
    }
}
func ꞋheytingAlgebraRecord() Any {
    return func(_ Any) Any {
        return func(dictHeytingAlgebraRecord Any) Any {
            return Dict{"ff": Apply(ꞋffRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()), "tt": Apply(ꞋttRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()), "conj": Apply(ꞋconjRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy()), "disj": Apply(ꞋdisjRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy()), "implies": Apply(ꞋimpliesRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy()), "not": Apply(ꞋnotRecord(), dictHeytingAlgebraRecord, Type_Proxy.ꞋProxy()),}
        }
    }
}
func Ꞌconj() Any {
    return func(dict Any) Any {
        return dict.(Dict)["conj"]
    }
}
func ꞋheytingAlgebraFunction() Any {
    return func(dictHeytingAlgebra Any) Any {
        var ff1 Any = Apply(Ꞌff(), dictHeytingAlgebra)
        var tt1 Any = Apply(Ꞌtt(), dictHeytingAlgebra)
        var implies1 Any = Apply(Ꞌimplies(), dictHeytingAlgebra)
        var conj1 Any = Apply(Ꞌconj(), dictHeytingAlgebra)
        var disj1 Any = Apply(Ꞌdisj(), dictHeytingAlgebra)
        var not1 Any = Apply(Ꞌnot(), dictHeytingAlgebra)
        return Dict{"ff": func(v Any) Any {
                return ff1
            }, "tt": func(v Any) Any {
                return tt1
            }, "implies": func(f Any) Any {
                return func(g Any) Any {
                    return func(a Any) Any {
                        return Apply(implies1, Apply(f, a), Apply(g, a))
                    }
                }
            }, "conj": func(f Any) Any {
                return func(g Any) Any {
                    return func(a Any) Any {
                        return Apply(conj1, Apply(f, a), Apply(g, a))
                    }
                }
            }, "disj": func(f Any) Any {
                return func(g Any) Any {
                    return func(a Any) Any {
                        return Apply(disj1, Apply(f, a), Apply(g, a))
                    }
                }
            }, "not": func(f Any) Any {
                return func(a Any) Any {
                    return Apply(not1, Apply(f, a))
                }
            },}
    }
}
func ꞋheytingAlgebraRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(_ Any) Any {
            return func(dictHeytingAlgebraRecord Any) Any {
                var conjRecord1 Any = Apply(ꞋconjRecord(), dictHeytingAlgebraRecord)
                var disjRecord1 Any = Apply(ꞋdisjRecord(), dictHeytingAlgebraRecord)
                var impliesRecord1 Any = Apply(ꞋimpliesRecord(), dictHeytingAlgebraRecord)
                var ffRecord1 Any = Apply(ꞋffRecord(), dictHeytingAlgebraRecord)
                var notRecord1 Any = Apply(ꞋnotRecord(), dictHeytingAlgebraRecord)
                var ttRecord1 Any = Apply(ꞋttRecord(), dictHeytingAlgebraRecord)
                return func(dictHeytingAlgebra Any) Any {
                    var conj1 Any = Apply(Ꞌconj(), dictHeytingAlgebra)
                    var disj1 Any = Apply(Ꞌdisj(), dictHeytingAlgebra)
                    var implies1 Any = Apply(Ꞌimplies(), dictHeytingAlgebra)
                    var ff1 Any = Apply(Ꞌff(), dictHeytingAlgebra)
                    var not1 Any = Apply(Ꞌnot(), dictHeytingAlgebra)
                    var tt1 Any = Apply(Ꞌtt(), dictHeytingAlgebra)
                    return Dict{"conjRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(conjRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(conj1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "disjRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(disjRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(disj1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "impliesRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(impliesRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(implies1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "ffRecord": func(v Any) Any {
                            return func(row Any) Any {
                                var tail Any = Apply(ffRecord1, Type_Proxy.ꞋProxy(), row)
                                var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                return Apply(insert, ff1, tail)
                            }
                        }, "notRecord": func(v Any) Any {
                            return func(row Any) Any {
                                var tail Any = Apply(notRecord1, Type_Proxy.ꞋProxy(), row)
                                var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                return Apply(insert, Apply(not1, Apply(get, row)), tail)
                            }
                        }, "ttRecord": func(v Any) Any {
                            return func(row Any) Any {
                                var tail Any = Apply(ttRecord1, Type_Proxy.ꞋProxy(), row)
                                var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                return Apply(insert, tt1, tail)
                            }
                        },}
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.HeytingAlgebra")

var ᛌboolConj_once Once
var ᛧboolConj Any

func ꞋboolConj() Any { 
    ᛌboolConj_once.Do(func() {
        ᛧboolConj = Get(foreign, "boolConj")
    })
    return ᛧboolConj
}

var ᛌboolDisj_once Once
var ᛧboolDisj Any

func ꞋboolDisj() Any { 
    ᛌboolDisj_once.Do(func() {
        ᛧboolDisj = Get(foreign, "boolDisj")
    })
    return ᛧboolDisj
}

var ᛌboolNot_once Once
var ᛧboolNot Any

func ꞋboolNot() Any { 
    ᛌboolNot_once.Do(func() {
        ᛧboolNot = Get(foreign, "boolNot")
    })
    return ᛧboolNot
}


