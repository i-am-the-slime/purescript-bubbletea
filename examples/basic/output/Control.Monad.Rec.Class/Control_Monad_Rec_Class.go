// Code generated by psgo. DO NOT EDIT.

package Control_Monad_Rec_Class

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Effect"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Control.Monad"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Effect.Ref"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Effect.ꞋbindEffect())
}
func ꞋbindFlipped() Any {
    return Apply(Control_Bind.ꞋbindFlipped(), Effect.ꞋbindEffect())
}
func Ꞌdiscard() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit(), Effect.ꞋbindEffect())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), Effect.ꞋapplicativeEffect())
}
func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Effect.ꞋfunctorEffect())
}
func ꞋLoop() Any {
    return func(value0 Any) Any {
        return Dict{"Loop": true, "value0": value0,}
    }
}
func ꞋDone() Any {
    return func(value0 Any) Any {
        return Dict{"Done": true, "value0": value0,}
    }
}
func ꞋMonadRec_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋtailRecM() Any {
    return func(dict Any) Any {
        return dict.(Dict)["tailRecM"]
    }
}
func ꞋtailRecM2() Any {
    return func(dictMonadRec Any) Any {
        var tailRecM1 Any = Apply(ꞋtailRecM(), dictMonadRec)
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return Apply(tailRecM1, func(o Any) Any {
                        return Apply(f, o.(Dict)["a"], o.(Dict)["b"])
                    }, Dict{"a": a, "b": b,})
                }
            }
        }
    }
}
func ꞋtailRecM3() Any {
    return func(dictMonadRec Any) Any {
        var tailRecM1 Any = Apply(ꞋtailRecM(), dictMonadRec)
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return func(c Any) Any {
                        return Apply(tailRecM1, func(o Any) Any {
                            return Apply(f, o.(Dict)["a"], o.(Dict)["b"], o.(Dict)["c"])
                        }, Dict{"a": a, "b": b, "c": c,})
                    }
                }
            }
        }
    }
}
func ꞋuntilJust() Any {
    return func(dictMonadRec Any) Any {
        var tailRecM1 Any = Apply(ꞋtailRecM(), dictMonadRec)
        var mapFlipped Any = Apply(Data_Functor.ꞋmapFlipped(), Apply(Apply(Apply(Apply(dictMonadRec.(Dict)["Monad0"], Undefined).(Dict)["Bind1"], Undefined).(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
        return func(m Any) Any {
            return Apply(tailRecM1, func(v Any) Any {
                return Apply(mapFlipped, m, func(v1 Any) Any {
                    if Is(v1, "Nothing") {
                        return Apply(ꞋLoop(), Data_Unit.Ꞌunit())
                    }
                    if Is(v1, "Just") {
                        return Apply(ꞋDone(), v1.(Dict)["value0"])
                    }
                    panic("Failed pattern match at Control.Monad.Rec.Class (line 179, column 43 - line 181, column 19)")
                })
            }, Data_Unit.Ꞌunit())
        }
    }
}
func ꞋwhileJust() Any {
    return func(dictMonoid Any) Any {
        var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
        return func(dictMonadRec Any) Any {
            var tailRecM1 Any = Apply(ꞋtailRecM(), dictMonadRec)
            var mapFlipped Any = Apply(Data_Functor.ꞋmapFlipped(), Apply(Apply(Apply(Apply(dictMonadRec.(Dict)["Monad0"], Undefined).(Dict)["Bind1"], Undefined).(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(m Any) Any {
                return Apply(tailRecM1, func(v Any) Any {
                    return Apply(mapFlipped, m, func(v1 Any) Any {
                        if Is(v1, "Nothing") {
                            return Apply(ꞋDone(), v)
                        }
                        if Is(v1, "Just") {
                            return Apply(ꞋLoop(), Apply(append, v, v1.(Dict)["value0"]))
                        }
                        panic("Failed pattern match at Control.Monad.Rec.Class (line 172, column 45 - line 174, column 26)")
                    })
                }, mempty)
            }
        }
    }
}
func ꞋtailRec() Any {
    return func(f Any) Any {
        var ˉgo Any
        ˉgo = func(ṩcopy_v Any) Any {
            var ṩtco_done = false
            var ṩtco_result Any
            var ṩtco_loop = func(v Any) Any {
                if Is(v, "Loop") {
                    ṩcopy_v = Apply(f, v.(Dict)["value0"])
                    return Undefined
                }
                if Is(v, "Done") {
                    ṩtco_done = true
                    return v.(Dict)["value0"]
                }
                panic("Failed pattern match at Control.Monad.Rec.Class (line 103, column 3 - line 103, column 25)")
            }
            for !ṩtco_done {
                ṩtco_result = ṩtco_loop(ṩcopy_v)
            }
            return ṩtco_result
        }
        return Apply(Ꞌcompose(), ˉgo, f)
    }
}
func ꞋtailRec2() Any {
    return func(f Any) Any {
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(ꞋtailRec(), func(o Any) Any {
                    return Apply(f, o.(Dict)["a"], o.(Dict)["b"])
                }, Dict{"a": a, "b": b,})
            }
        }
    }
}
func ꞋtailRec3() Any {
    return func(f Any) Any {
        return func(a Any) Any {
            return func(b Any) Any {
                return func(c Any) Any {
                    return Apply(ꞋtailRec(), func(o Any) Any {
                        return Apply(f, o.(Dict)["a"], o.(Dict)["b"], o.(Dict)["c"])
                    }, Dict{"a": a, "b": b, "c": c,})
                }
            }
        }
    }
}

var ᛌmonadRecMaybe_once Once
var ᛧmonadRecMaybe Any

func ꞋmonadRecMaybe() Any {
    ᛌmonadRecMaybe_once.Do(func() {
        ᛧmonadRecMaybe = Dict{"tailRecM": func(f Any) Any {
            return func(a0 Any) Any {
                var g Any = func(v Any) Any {
                    if Is(v, "Nothing") {
                        return Apply(ꞋDone(), Data_Maybe.ꞋNothing())
                    }
                    if Is(v, "Just") && Is(v.(Dict)["value0"], "Loop") {
                        return Apply(ꞋLoop(), Apply(f, v.(Dict)["value0"].(Dict)["value0"]))
                    }
                    if Is(v, "Just") && Is(v.(Dict)["value0"], "Done") {
                        return Apply(ꞋDone(), Apply(Data_Maybe.ꞋJust(), v.(Dict)["value0"].(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Control.Monad.Rec.Class (line 153, column 7 - line 153, column 31)")
                }
                return Apply(ꞋtailRec(), g, Apply(f, a0))
            }
        }, "Monad0": func(_ Any) Any {
            return Data_Maybe.ꞋmonadMaybe()
        },}
    })
return ᛧmonadRecMaybe
}



var ᛌmonadRecIdentity_once Once
var ᛧmonadRecIdentity Any

func ꞋmonadRecIdentity() Any {
    ᛌmonadRecIdentity_once.Do(func() {
        ᛧmonadRecIdentity = Dict{"tailRecM": func(f Any) Any {
            var runIdentity Any = func(v Any) Any {
                return v
            }
            return Apply(Ꞌcompose(), Data_Identity.ꞋIdentity(), Apply(ꞋtailRec(), Apply(Ꞌcompose(), runIdentity, f)))
        }, "Monad0": func(_ Any) Any {
            return Data_Identity.ꞋmonadIdentity()
        },}
    })
return ᛧmonadRecIdentity
}



var ᛌmonadRecFunction_once Once
var ᛧmonadRecFunction Any

func ꞋmonadRecFunction() Any {
    ᛌmonadRecFunction_once.Do(func() {
        ᛧmonadRecFunction = Dict{"tailRecM": func(f Any) Any {
            return func(a0 Any) Any {
                return func(e Any) Any {
                    return Apply(ꞋtailRec(), func(a Any) Any {
                        return Apply(f, a, e)
                    }, a0)
                }
            }
        }, "Monad0": func(_ Any) Any {
            return Control_Monad.ꞋmonadFn()
        },}
    })
return ᛧmonadRecFunction
}



var ᛌmonadRecEither_once Once
var ᛧmonadRecEither Any

func ꞋmonadRecEither() Any {
    ᛌmonadRecEither_once.Do(func() {
        ᛧmonadRecEither = Dict{"tailRecM": func(f Any) Any {
            return func(a0 Any) Any {
                var g Any = func(v Any) Any {
                    if Is(v, "Left") {
                        return Apply(ꞋDone(), Apply(Data_Either.ꞋLeft(), v.(Dict)["value0"]))
                    }
                    if Is(v, "Right") && Is(v.(Dict)["value0"], "Loop") {
                        return Apply(ꞋLoop(), Apply(f, v.(Dict)["value0"].(Dict)["value0"]))
                    }
                    if Is(v, "Right") && Is(v.(Dict)["value0"], "Done") {
                        return Apply(ꞋDone(), Apply(Data_Either.ꞋRight(), v.(Dict)["value0"].(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Control.Monad.Rec.Class (line 145, column 7 - line 145, column 33)")
                }
                return Apply(ꞋtailRec(), g, Apply(f, a0))
            }
        }, "Monad0": func(_ Any) Any {
            return Data_Either.ꞋmonadEither()
        },}
    })
return ᛧmonadRecEither
}



var ᛌmonadRecEffect_once Once
var ᛧmonadRecEffect Any

func ꞋmonadRecEffect() Any {
    ᛌmonadRecEffect_once.Do(func() {
        ᛧmonadRecEffect = Dict{"tailRecM": func(f Any) Any {
            return func(a Any) Any {
                var fromDone Any = Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                    return func(v Any) Any {
                        if Is(v, "Done") {
                            return v.(Dict)["value0"]
                        }
                        panic("Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44)")
                    }
                })
                return Apply(Ꞌbind(), Apply(ꞋbindFlipped(), Effect_Ref.Ꞌnew(), Apply(f, a)), func(r Any) Any {
                    return Apply(Ꞌdiscard(), Apply(Effect.ꞋuntilE(), Apply(Ꞌbind(), Apply(Effect_Ref.Ꞌread(), r), func(v Any) Any {
                        if Is(v, "Loop") {
                            return Apply(Ꞌbind(), Apply(f, v.(Dict)["value0"]), func(e Any) Any {
                                return Apply(Ꞌbind(), Apply(Effect_Ref.Ꞌwrite(), e, r), func(_ Any) Any {
                                    return Apply(Ꞌpure(), false)
                                })
                            })
                        }
                        if Is(v, "Done") {
                            return Apply(Ꞌpure(), true)
                        }
                        panic("Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28)")
                    })), func(_ Any) Any {
                        return Apply(Ꞌmap(), fromDone, Apply(Effect_Ref.Ꞌread(), r))
                    })
                })
            }
        }, "Monad0": func(_ Any) Any {
            return Effect.ꞋmonadEffect()
        },}
    })
return ᛧmonadRecEffect
}


func Ꞌloop3() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return Apply(ꞋLoop(), Dict{"a": a, "b": b, "c": c,})
            }
        }
    }
}
func Ꞌloop2() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return Apply(ꞋLoop(), Dict{"a": a, "b": b,})
        }
    }
}

var ᛌfunctorStep_once Once
var ᛧfunctorStep Any

func ꞋfunctorStep() Any {
    ᛌfunctorStep_once.Do(func() {
        ᛧfunctorStep = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                if Is(m, "Loop") {
                    return Apply(ꞋLoop(), m.(Dict)["value0"])
                }
                if Is(m, "Done") {
                    return Apply(ꞋDone(), Apply(f, m.(Dict)["value0"]))
                }
                panic("Failed pattern match at Control.Monad.Rec.Class (line 0, column 0 - line 0, column 0)")
            }
        },}
    })
return ᛧfunctorStep
}


func Ꞌforever() Any {
    return func(dictMonadRec Any) Any {
        var tailRecM1 Any = Apply(ꞋtailRecM(), dictMonadRec)
        var voidRight Any = Apply(Data_Functor.ꞋvoidRight(), Apply(Apply(Apply(Apply(dictMonadRec.(Dict)["Monad0"], Undefined).(Dict)["Bind1"], Undefined).(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
        return func(ma Any) Any {
            return Apply(tailRecM1, func(u Any) Any {
                return Apply(voidRight, Apply(ꞋLoop(), u), ma)
            }, Data_Unit.Ꞌunit())
        }
    }
}

var ᛌbifunctorStep_once Once
var ᛧbifunctorStep Any

func ꞋbifunctorStep() Any {
    ᛌbifunctorStep_once.Do(func() {
        ᛧbifunctorStep = Dict{"bimap": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    if Is(v2, "Loop") {
                        return Apply(ꞋLoop(), Apply(v, v2.(Dict)["value0"]))
                    }
                    if Is(v2, "Done") {
                        return Apply(ꞋDone(), Apply(v1, v2.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Control.Monad.Rec.Class (line 33, column 1 - line 35, column 34)")
                }
            }
        },}
    })
return ᛧbifunctorStep
}





