// Code generated by psgo. DO NOT EDIT.

package Control_Biapply

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋBiapply_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌbiapplyTuple_once Once
var ᛧbiapplyTuple Any

func ꞋbiapplyTuple() Any {
    ᛌbiapplyTuple_once.Do(func() {
        ᛧbiapplyTuple = Dict{"biapply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(Data_Tuple.ꞋTuple(), Apply(v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(v.(Dict)["value1"], v1.(Dict)["value1"]))
            }
        }, "Bifunctor0": func(_ Any) Any {
            return Data_Bifunctor.ꞋbifunctorTuple()
        },}
    })
return ᛧbiapplyTuple
}


func Ꞌbiapply() Any {
    return func(dict Any) Any {
        return dict.(Dict)["biapply"]
    }
}
func ꞋbiapplyFirst() Any {
    return func(dictBiapply Any) Any {
        var biapply1 Any = Apply(Ꞌbiapply(), dictBiapply)
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(biapply1, Apply(Ꞌidentity(), Apply(bimap, Apply(Data_Function.Ꞌconst(), Ꞌidentity()), Apply(Data_Function.Ꞌconst(), Ꞌidentity())), a), b)
            }
        }
    }
}
func ꞋbiapplySecond() Any {
    return func(dictBiapply Any) Any {
        var biapply1 Any = Apply(Ꞌbiapply(), dictBiapply)
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(biapply1, Apply(Ꞌidentity(), Apply(bimap, Data_Function.Ꞌconst(), Data_Function.Ꞌconst()), a), b)
            }
        }
    }
}
func Ꞌbilift2() Any {
    return func(dictBiapply Any) Any {
        var biapply1 Any = Apply(Ꞌbiapply(), dictBiapply)
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return func(f Any) Any {
            return func(g Any) Any {
                return func(a Any) Any {
                    return func(b Any) Any {
                        return Apply(biapply1, Apply(Ꞌidentity(), Apply(bimap, f, g), a), b)
                    }
                }
            }
        }
    }
}
func Ꞌbilift3() Any {
    return func(dictBiapply Any) Any {
        var biapply1 Any = Apply(Ꞌbiapply(), dictBiapply)
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return func(f Any) Any {
            return func(g Any) Any {
                return func(a Any) Any {
                    return func(b Any) Any {
                        return func(c Any) Any {
                            return Apply(biapply1, Apply(biapply1, Apply(Ꞌidentity(), Apply(bimap, f, g), a), b), c)
                        }
                    }
                }
            }
        }
    }
}



