// Code generated by psgo. DO NOT EDIT.

package Data_Maybe_Last

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Monoid"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋLast() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowLast() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), Apply(Data_Maybe.ꞋshowMaybe(), dictShow))
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Last ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌsemigroupLast_once Once
var ᛧsemigroupLast Any

func ꞋsemigroupLast() Any {
    ᛌsemigroupLast_once.Do(func() {
        ᛧsemigroupLast = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v1, "Just") {
                    return v1
                }
                if Is(v1, "Nothing") {
                    return v
                }
                panic("Failed pattern match at Data.Maybe.Last (line 54, column 1 - line 56, column 36)")
            }
        },}
    })
return ᛧsemigroupLast
}


func ꞋordLast() Any {
    return func(dictOrd Any) Any {
        return Apply(Data_Maybe.ꞋordMaybe(), dictOrd)
    }
}
func Ꞌord1Last() Any {
    return Data_Maybe.Ꞌord1Maybe()
}

var ᛌnewtypeLast_once Once
var ᛧnewtypeLast Any

func ꞋnewtypeLast() Any {
    ᛌnewtypeLast_once.Do(func() {
        ᛧnewtypeLast = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeLast
}



var ᛌmonoidLast_once Once
var ᛧmonoidLast Any

func ꞋmonoidLast() Any {
    ᛌmonoidLast_once.Do(func() {
        ᛧmonoidLast = Dict{"mempty": Data_Maybe.ꞋNothing(), "Semigroup0": func(_ Any) Any {
            return ꞋsemigroupLast()
        },}
    })
return ᛧmonoidLast
}


func ꞋmonadLast() Any {
    return Data_Maybe.ꞋmonadMaybe()
}
func ꞋinvariantLast() Any {
    return Data_Maybe.ꞋinvariantMaybe()
}
func ꞋfunctorLast() Any {
    return Data_Maybe.ꞋfunctorMaybe()
}
func ꞋextendLast() Any {
    return Data_Maybe.ꞋextendMaybe()
}
func ꞋeqLast() Any {
    return func(dictEq Any) Any {
        return Apply(Data_Maybe.ꞋeqMaybe(), dictEq)
    }
}
func Ꞌeq1Last() Any {
    return Data_Maybe.Ꞌeq1Maybe()
}
func ꞋboundedLast() Any {
    return func(dictBounded Any) Any {
        return Apply(Data_Maybe.ꞋboundedMaybe(), dictBounded)
    }
}
func ꞋbindLast() Any {
    return Data_Maybe.ꞋbindMaybe()
}
func ꞋapplyLast() Any {
    return Data_Maybe.ꞋapplyMaybe()
}
func ꞋapplicativeLast() Any {
    return Data_Maybe.ꞋapplicativeMaybe()
}

var ᛌaltLast_once Once
var ᛧaltLast Any

func ꞋaltLast() Any {
    ᛌaltLast_once.Do(func() {
        ᛧaltLast = Dict{"alt": Apply(Data_Semigroup.Ꞌappend(), ꞋsemigroupLast()), "Functor0": func(_ Any) Any {
            return ꞋfunctorLast()
        },}
    })
return ᛧaltLast
}



var ᛌplusLast_once Once
var ᛧplusLast Any

func ꞋplusLast() Any {
    ᛌplusLast_once.Do(func() {
        ᛧplusLast = Dict{"empty": Apply(Data_Monoid.Ꞌmempty(), ꞋmonoidLast()), "Alt0": func(_ Any) Any {
            return ꞋaltLast()
        },}
    })
return ᛧplusLast
}



var ᛌalternativeLast_once Once
var ᛧalternativeLast Any

func ꞋalternativeLast() Any {
    ᛌalternativeLast_once.Do(func() {
        ᛧalternativeLast = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeLast()
        }, "Plus1": func(_ Any) Any {
            return ꞋplusLast()
        },}
    })
return ᛧalternativeLast
}





