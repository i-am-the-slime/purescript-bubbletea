// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup_Foldable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Ord.Max"
	"project.localhost/purescript-native/output/Data.Ord.Min"
	"project.localhost/purescript-native/output/Data.Unit"
)

type _ = Any

func Ꞌeq() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Ordering.ꞋeqOrdering())
}
func ꞋcomposeFlipped() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋalaF() Any {
    return Apply(Data_Newtype.ꞋalaF(), Undefined, Undefined, Undefined, Undefined)
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func Ꞌala() Any {
    return Apply(Data_Newtype.Ꞌala(), Undefined, Undefined, Undefined)
}
func ꞋJoinWith() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋFoldable1_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋFoldRight1() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"FoldRight1": true, "value0": value0, "value1": value1,}
        }
    }
}
func ꞋAct() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋsemigroupJoinWith() Any {
    return func(dictSemigroup Any) Any {
        var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return func(j Any) Any {
                        return Apply(append, Apply(v, j), Apply(append, j, Apply(v1, j)))
                    }
                }
            },}
    }
}
func ꞋsemigroupAct() Any {
    return func(dictApply Any) Any {
        var applySecond Any = Apply(Control_Apply.ꞋapplySecond(), dictApply)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(applySecond, v, v1)
                }
            },}
    }
}
func ꞋrunFoldRight1() Any {
    return func(v Any) Any {
        return Apply(v.(Dict)["value0"], v.(Dict)["value1"])
    }
}
func ꞋmkFoldRight1() Any {
    return Apply(ꞋFoldRight1(), Data_Function.Ꞌconst())
}
func Ꞌjoinee() Any {
    return func(v Any) Any {
        return v
    }
}
func ꞋgetAct() Any {
    return func(v Any) Any {
        return v
    }
}
func Ꞌfoldr1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldr1"]
    }
}
func Ꞌfoldl1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldl1"]
    }
}
func ꞋmaximumBy() Any {
    return func(dictFoldable1 Any) Any {
        var foldl11 Any = Apply(Ꞌfoldl1(), dictFoldable1)
        return func(cmp Any) Any {
            return Apply(foldl11, func(x Any) Any {
                return func(y Any) Any {
                    var ṩ16 Any = Apply(Ꞌeq(), Apply(cmp, x, y), Data_Ordering.ꞋGT())
                    if ṩ16 == true {
                        return x
                    }
                    return y
                }
            })
        }
    }
}
func ꞋminimumBy() Any {
    return func(dictFoldable1 Any) Any {
        var foldl11 Any = Apply(Ꞌfoldl1(), dictFoldable1)
        return func(cmp Any) Any {
            return Apply(foldl11, func(x Any) Any {
                return func(y Any) Any {
                    var ṩ17 Any = Apply(Ꞌeq(), Apply(cmp, x, y), Data_Ordering.ꞋLT())
                    if ṩ17 == true {
                        return x
                    }
                    return y
                }
            })
        }
    }
}

var ᛌfoldableTuple_once Once
var ᛧfoldableTuple Any

func ꞋfoldableTuple() Any {
    ᛌfoldableTuple_once.Do(func() {
        ᛧfoldableTuple = Dict{"foldMap1": func(dictSemigroup Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, v.(Dict)["value1"])
                }
            }
        }, "foldr1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1.(Dict)["value1"]
            }
        }, "foldl1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1.(Dict)["value1"]
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableTuple()
        },}
    })
return ᛧfoldableTuple
}



var ᛌfoldableMultiplicative_once Once
var ᛧfoldableMultiplicative Any

func ꞋfoldableMultiplicative() Any {
    ᛌfoldableMultiplicative_once.Do(func() {
        ᛧfoldableMultiplicative = Dict{"foldr1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "foldl1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "foldMap1": func(dictSemigroup Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, v)
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableMultiplicative()
        },}
    })
return ᛧfoldableMultiplicative
}



var ᛌfoldableIdentity_once Once
var ᛧfoldableIdentity Any

func ꞋfoldableIdentity() Any {
    ᛌfoldableIdentity_once.Do(func() {
        ᛧfoldableIdentity = Dict{"foldMap1": func(dictSemigroup Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, v)
                }
            }
        }, "foldl1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "foldr1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableIdentity()
        },}
    })
return ᛧfoldableIdentity
}



var ᛌfoldableDual_once Once
var ᛧfoldableDual Any

func ꞋfoldableDual() Any {
    ᛌfoldableDual_once.Do(func() {
        ᛧfoldableDual = Dict{"foldr1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "foldl1": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "foldMap1": func(dictSemigroup Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, v)
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableDual()
        },}
    })
return ᛧfoldableDual
}



var ᛌfoldRight1Semigroup_once Once
var ᛧfoldRight1Semigroup Any

func ꞋfoldRight1Semigroup() Any {
    ᛌfoldRight1Semigroup_once.Do(func() {
        ᛧfoldRight1Semigroup = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(ꞋFoldRight1(), func(a Any) Any {
                    return func(f Any) Any {
                        return Apply(v.(Dict)["value0"], Apply(f, v.(Dict)["value1"], Apply(v1.(Dict)["value0"], a, f)), f)
                    }
                }, v1.(Dict)["value1"])
            }
        },}
    })
return ᛧfoldRight1Semigroup
}


func ꞋsemigroupDual() Any {
    return Apply(Data_Monoid_Dual.ꞋsemigroupDual(), ꞋfoldRight1Semigroup())
}
func ꞋfoldMap1DefaultR() Any {
    return func(dictFoldable1 Any) Any {
        var foldr11 Any = Apply(Ꞌfoldr1(), dictFoldable1)
        return func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(dictSemigroup Any) Any {
                var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
                return func(f Any) Any {
                    return Apply(ꞋcomposeFlipped(), Apply(ˉmap, f), Apply(foldr11, append))
                }
            }
        }
    }
}
func ꞋfoldMap1DefaultL() Any {
    return func(dictFoldable1 Any) Any {
        var foldl11 Any = Apply(Ꞌfoldl1(), dictFoldable1)
        return func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(dictSemigroup Any) Any {
                var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
                return func(f Any) Any {
                    return Apply(ꞋcomposeFlipped(), Apply(ˉmap, f), Apply(foldl11, append))
                }
            }
        }
    }
}
func ꞋfoldMap1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldMap1"]
    }
}
func Ꞌfoldl1Default() Any {
    return func(dictFoldable1 Any) Any {
        return Apply(Ꞌcompose(), Apply(Data_Function.Ꞌflip(), Apply(Ꞌcompose(), ꞋrunFoldRight1(), Apply(ꞋalaF(), Data_Monoid_Dual.ꞋDual(), Apply(ꞋfoldMap1(), dictFoldable1, ꞋsemigroupDual()), ꞋmkFoldRight1()))), Data_Function.Ꞌflip())
    }
}
func Ꞌfoldr1Default() Any {
    return func(dictFoldable1 Any) Any {
        return Apply(Data_Function.Ꞌflip(), Apply(Ꞌcompose(), ꞋrunFoldRight1(), Apply(ꞋfoldMap1(), dictFoldable1, ꞋfoldRight1Semigroup(), ꞋmkFoldRight1())))
    }
}
func ꞋintercalateMap() Any {
    return func(dictFoldable1 Any) Any {
        var foldMap11 Any = Apply(ꞋfoldMap1(), dictFoldable1)
        return func(dictSemigroup Any) Any {
            var foldMap12 Any = Apply(foldMap11, Apply(ꞋsemigroupJoinWith(), dictSemigroup))
            return func(j Any) Any {
                return func(f Any) Any {
                    return func(foldable Any) Any {
                        return Apply(Ꞌjoinee(), Apply(foldMap12, Apply(Ꞌcompose(), ꞋJoinWith(), Apply(Ꞌcompose(), Data_Function.Ꞌconst(), f)), foldable), j)
                    }
                }
            }
        }
    }
}
func Ꞌintercalate() Any {
    return func(dictFoldable1 Any) Any {
        var intercalateMap1 Any = Apply(ꞋintercalateMap(), dictFoldable1)
        return func(dictSemigroup Any) Any {
            return Apply(Data_Function.Ꞌflip(), Apply(intercalateMap1, dictSemigroup), Ꞌidentity())
        }
    }
}
func Ꞌmaximum() Any {
    return func(dictOrd Any) Any {
        var semigroupMax Any = Apply(Data_Ord_Max.ꞋsemigroupMax(), dictOrd)
        return func(dictFoldable1 Any) Any {
            return Apply(Ꞌala(), Data_Ord_Max.ꞋMax(), Apply(ꞋfoldMap1(), dictFoldable1, semigroupMax))
        }
    }
}
func Ꞌminimum() Any {
    return func(dictOrd Any) Any {
        var semigroupMin Any = Apply(Data_Ord_Min.ꞋsemigroupMin(), dictOrd)
        return func(dictFoldable1 Any) Any {
            return Apply(Ꞌala(), Data_Ord_Min.ꞋMin(), Apply(ꞋfoldMap1(), dictFoldable1, semigroupMin))
        }
    }
}
func Ꞌtraverse1_() Any {
    return func(dictFoldable1 Any) Any {
        var foldMap11 Any = Apply(ꞋfoldMap1(), dictFoldable1)
        return func(dictApply Any) Any {
            var voidRight Any = Apply(Data_Functor.ꞋvoidRight(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            var foldMap12 Any = Apply(foldMap11, Apply(ꞋsemigroupAct(), dictApply))
            return func(f Any) Any {
                return func(t Any) Any {
                    return Apply(voidRight, Data_Unit.Ꞌunit(), Apply(ꞋgetAct(), Apply(foldMap12, Apply(Ꞌcompose(), ꞋAct(), f), t)))
                }
            }
        }
    }
}
func Ꞌfor1_() Any {
    return func(dictFoldable1 Any) Any {
        var traverse1_1 Any = Apply(Ꞌtraverse1_(), dictFoldable1)
        return func(dictApply Any) Any {
            return Apply(Data_Function.Ꞌflip(), Apply(traverse1_1, dictApply))
        }
    }
}
func Ꞌsequence1_() Any {
    return func(dictFoldable1 Any) Any {
        var traverse1_1 Any = Apply(Ꞌtraverse1_(), dictFoldable1)
        return func(dictApply Any) Any {
            return Apply(traverse1_1, dictApply, Ꞌidentity())
        }
    }
}
func Ꞌfold1() Any {
    return func(dictFoldable1 Any) Any {
        var foldMap11 Any = Apply(ꞋfoldMap1(), dictFoldable1)
        return func(dictSemigroup Any) Any {
            return Apply(foldMap11, dictSemigroup, Ꞌidentity())
        }
    }
}



