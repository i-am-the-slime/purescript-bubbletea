// Code generated by psgo. DO NOT EDIT.

package Data_Comparison

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Apply(Data_Semigroup.ꞋsemigroupFn(), Apply(Data_Semigroup.ꞋsemigroupFn(), Data_Ordering.ꞋsemigroupOrdering())))
}
func ꞋComparison() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌsemigroupComparison_once Once
var ᛧsemigroupComparison Any

func ꞋsemigroupComparison() Any {
    ᛌsemigroupComparison_once.Do(func() {
        ᛧsemigroupComparison = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(Ꞌappend(), v, v1)
            }
        },}
    })
return ᛧsemigroupComparison
}



var ᛌnewtypeComparison_once Once
var ᛧnewtypeComparison Any

func ꞋnewtypeComparison() Any {
    ᛌnewtypeComparison_once.Do(func() {
        ᛧnewtypeComparison = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeComparison
}



var ᛌmonoidComparison_once Once
var ᛧmonoidComparison Any

func ꞋmonoidComparison() Any {
    ᛌmonoidComparison_once.Do(func() {
        ᛧmonoidComparison = Dict{"mempty": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        }, "Semigroup0": func(_ Any) Any {
            return ꞋsemigroupComparison()
        },}
    })
return ᛧmonoidComparison
}


func ꞋdefaultComparison() Any {
    return func(dictOrd Any) Any {
        return Apply(Data_Ord.Ꞌcompare(), dictOrd)
    }
}

var ᛌcontravariantComparison_once Once
var ᛧcontravariantComparison Any

func ꞋcontravariantComparison() Any {
    ᛌcontravariantComparison_once.Do(func() {
        ᛧcontravariantComparison = Dict{"cmap": func(f Any) Any {
            return func(v Any) Any {
                return Apply(Data_Function.Ꞌon(), v, f)
            }
        },}
    })
return ᛧcontravariantComparison
}





