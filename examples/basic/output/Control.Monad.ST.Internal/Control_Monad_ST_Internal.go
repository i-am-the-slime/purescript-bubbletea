// Code generated by psgo. DO NOT EDIT.

package Control_Monad_ST_Internal

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Control.Monad"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Monoid"
)

type _ = Any

func Ꞌmodifyꞌ() Any {
    return ꞋmodifyImpl()
}
func Ꞌmodify() Any {
    return func(f Any) Any {
        return Apply(Ꞌmodifyꞌ(), func(s Any) Any {
            var sꞌ Any = Apply(f, s)
            return Dict{"state": sꞌ, "value": sꞌ,}
        })
    }
}

var ᛌfunctorST_once Once
var ᛧfunctorST Any

func ꞋfunctorST() Any {
    ᛌfunctorST_once.Do(func() {
        ᛧfunctorST = Dict{"map": Ꞌmap_(),}
    })
return ᛧfunctorST
}


func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), ꞋfunctorST())
}
func Ꞌvoid() Any {
    return Apply(Data_Functor.Ꞌvoid(), ꞋfunctorST())
}

var ᛌmonadST_once Once
var ᛧmonadST Any

func ꞋmonadST() Any {
    ᛌmonadST_once.Do(func() {
        ᛧmonadST = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeST()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindST()
        },}
    })
return ᛧmonadST
}



var ᛌbindST_once Once
var ᛧbindST Any

func ꞋbindST() Any {
    ᛌbindST_once.Do(func() {
        ᛧbindST = Dict{"bind": Ꞌbind_(), "Apply0": func(_ Any) Any {
            return ꞋapplyST()
        },}
    })
return ᛧbindST
}



var ᛌapplyST_once Once
var ᛧapplyST Any

func ꞋapplyST() Any {
    ᛌapplyST_once.Do(func() {
        ᛧapplyST = Dict{"apply": Apply(Control_Monad.Ꞌap(), ꞋmonadST()), "Functor0": func(_ Any) Any {
            return ꞋfunctorST()
        },}
    })
return ᛧapplyST
}



var ᛌapplicativeST_once Once
var ᛧapplicativeST Any

func ꞋapplicativeST() Any {
    ᛌapplicativeST_once.Do(func() {
        ᛧapplicativeST = Dict{"pure": Ꞌpure_(), "Apply0": func(_ Any) Any {
            return ꞋapplyST()
        },}
    })
return ᛧapplicativeST
}


func Ꞌlift2() Any {
    return Apply(Control_Apply.Ꞌlift2(), ꞋapplyST())
}
func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), ꞋbindST())
}
func ꞋbindFlipped() Any {
    return Apply(Control_Bind.ꞋbindFlipped(), ꞋbindST())
}
func Ꞌdiscard() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit(), ꞋbindST())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), ꞋapplicativeST())
}
func ꞋsemigroupST() Any {
    return func(dictSemigroup Any) Any {
        return Dict{"append": Apply(Ꞌlift2(), Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)),}
    }
}

var ᛌmonadRecST_once Once
var ᛧmonadRecST Any

func ꞋmonadRecST() Any {
    ᛌmonadRecST_once.Do(func() {
        ᛧmonadRecST = Dict{"tailRecM": func(f Any) Any {
            return func(a Any) Any {
                var isLooping Any = func(v Any) Any {
                    if Is(v, "Loop") {
                        return true
                    }
                    return false
                }
                var fromDone Any = Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                    return func(v Any) Any {
                        if Is(v, "Done") {
                            return v.(Dict)["value0"]
                        }
                        panic("Failed pattern match at Control.Monad.ST.Internal (line 70, column 32 - line 70, column 46)")
                    }
                })
                return Apply(Ꞌbind(), Apply(ꞋbindFlipped(), Ꞌnew(), Apply(f, a)), func(r Any) Any {
                    return Apply(Ꞌdiscard(), Apply(Ꞌwhile(), Apply(Ꞌmap(), isLooping, Apply(Ꞌread(), r)), Apply(Ꞌbind(), Apply(Ꞌread(), r), func(v Any) Any {
                        if Is(v, "Loop") {
                            return Apply(Ꞌbind(), Apply(f, v.(Dict)["value0"]), func(e Any) Any {
                                return Apply(Ꞌvoid(), Apply(Ꞌwrite(), e, r))
                            })
                        }
                        if Is(v, "Done") {
                            return Apply(Ꞌpure(), Data_Unit.Ꞌunit())
                        }
                        panic("Failed pattern match at Control.Monad.ST.Internal (line 62, column 18 - line 66, column 28)")
                    })), func(_ Any) Any {
                        return Apply(Ꞌmap(), fromDone, Apply(Ꞌread(), r))
                    })
                })
            }
        }, "Monad0": func(_ Any) Any {
            return ꞋmonadST()
        },}
    })
return ᛧmonadRecST
}


func ꞋmonoidST() Any {
    return func(dictMonoid Any) Any {
        var semigroupST1 Any = Apply(ꞋsemigroupST(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"mempty": Apply(Ꞌpure(), Apply(Data_Monoid.Ꞌmempty(), dictMonoid)), "Semigroup0": func(_ Any) Any {
                return semigroupST1
            },}
    }
}


// Foreign values

var foreign = Foreign("Control.Monad.ST.Internal")

var ᛌmap__once Once
var ᛧmap_ Any

func Ꞌmap_() Any { 
    ᛌmap__once.Do(func() {
        ᛧmap_ = Get(foreign, "map_")
    })
    return ᛧmap_
}

var ᛌpure__once Once
var ᛧpure_ Any

func Ꞌpure_() Any { 
    ᛌpure__once.Do(func() {
        ᛧpure_ = Get(foreign, "pure_")
    })
    return ᛧpure_
}

var ᛌbind__once Once
var ᛧbind_ Any

func Ꞌbind_() Any { 
    ᛌbind__once.Do(func() {
        ᛧbind_ = Get(foreign, "bind_")
    })
    return ᛧbind_
}

var ᛌrun_once Once
var ᛧrun Any

func Ꞌrun() Any { 
    ᛌrun_once.Do(func() {
        ᛧrun = Get(foreign, "run")
    })
    return ᛧrun
}

var ᛌwhile_once Once
var ᛧwhile Any

func Ꞌwhile() Any { 
    ᛌwhile_once.Do(func() {
        ᛧwhile = Get(foreign, "while")
    })
    return ᛧwhile
}

var ᛌfor_once Once
var ᛧfor Any

func Ꞌfor() Any { 
    ᛌfor_once.Do(func() {
        ᛧfor = Get(foreign, "for")
    })
    return ᛧfor
}

var ᛌforeach_once Once
var ᛧforeach Any

func Ꞌforeach() Any { 
    ᛌforeach_once.Do(func() {
        ᛧforeach = Get(foreign, "foreach")
    })
    return ᛧforeach
}

var ᛌnew_once Once
var ᛧnew Any

func Ꞌnew() Any { 
    ᛌnew_once.Do(func() {
        ᛧnew = Get(foreign, "new")
    })
    return ᛧnew
}

var ᛌread_once Once
var ᛧread Any

func Ꞌread() Any { 
    ᛌread_once.Do(func() {
        ᛧread = Get(foreign, "read")
    })
    return ᛧread
}

var ᛌmodifyImpl_once Once
var ᛧmodifyImpl Any

func ꞋmodifyImpl() Any { 
    ᛌmodifyImpl_once.Do(func() {
        ᛧmodifyImpl = Get(foreign, "modifyImpl")
    })
    return ᛧmodifyImpl
}

var ᛌwrite_once Once
var ᛧwrite Any

func Ꞌwrite() Any { 
    ᛌwrite_once.Do(func() {
        ᛧwrite = Get(foreign, "write")
    })
    return ᛧwrite
}


