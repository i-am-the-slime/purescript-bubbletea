// Code generated by psgo. DO NOT EDIT.

package main

import . "github.com/purescript-native/go-runtime"
import _ "project.localhost/purescript-native/ffi-loader"
import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Effect"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Bubbletea"
	"project.localhost/purescript-native/output/Effect.Console"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌadd() Any {
    return Apply(Data_Semiring.Ꞌadd(), Data_Semiring.ꞋsemiringInt())
}
func ꞋgreaterThan() Any {
    return Apply(Data_Ord.ꞋgreaterThan(), Data_Ord.ꞋordInt())
}
func Ꞌshow() Any {
    return Apply(Data_Show.Ꞌshow(), Data_Show.ꞋshowInt())
}
func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Effect.ꞋbindEffect())
}
func Ꞌview() Any {
    return func(model Any) Any {
        return Apply(Ꞌappend(), "=== Bubbletea Example ===\n\n", Apply(Ꞌappend(), model.(Dict)["message"], Apply(Ꞌappend(), "\n\n", "(This is a simple counter that will auto-exit after 10 steps)")))
    }
}
func Ꞌupdate() Any {
    return func(model Any) Any {
        return func(v Any) Any {
            var newStep Any = Apply(Ꞌadd(), model.(Dict)["step"], 1)
            var newMessage Any = Run(func() Any {
                var ṩ5 Any = Apply(ꞋgreaterThan(), newStep, 10)
                if ṩ5 == true {
                    return "Done! Press any key to exit..."
                }
                return Apply(Ꞌappend(), "Step ", Apply(Ꞌappend(), Apply(Ꞌshow(), newStep), " - Press any key to continue"))
            })
            var ṩ6 Any = Apply(ꞋgreaterThan(), newStep, 11)
            if ṩ6 == true {
                return Dict{"model": model, "cmd": Apply(Data_Maybe.ꞋJust(), Bubbletea.Ꞌquit()),}
            }
            return Dict{"model": Dict{"message": newMessage, "step": newStep,}, "cmd": Data_Maybe.ꞋNothing(),}
        }
    }
}
func Ꞌinit() Any {
    return func(v Any) Any {
        return Data_Maybe.ꞋNothing()
    }
}
func Ꞌmain() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit(), Effect.ꞋbindEffect(), Apply(Effect_Console.Ꞌlog(), "Starting Bubbletea example..."), func(_ Any) Any {
        var initialModel Any = Dict{"message": "Welcome to Bubbletea! Press any key to start...", "step": 0,}
        return Apply(Ꞌbind(), Apply(Bubbletea.ꞋnewProgram(), initialModel, Ꞌinit(), Ꞌupdate(), Ꞌview()), func(program Any) Any {
            return Apply(Ꞌbind(), Apply(Bubbletea.ꞋrunProgram(), program), func(result Any) Any {
                if Is(result, "Just") {
                    return Apply(Effect_Console.Ꞌlog(), Apply(Ꞌappend(), "Program error: ", result.(Dict)["value0"]))
                }
                if Is(result, "Nothing") {
                    return Apply(Effect_Console.Ꞌlog(), "Program completed successfully!")
                }
                panic("Failed pattern match at Main (line 44, column 3 - line 46, column 53)")
            })
        })
    })
}


func main() {
    Run(Ꞌmain())
}

