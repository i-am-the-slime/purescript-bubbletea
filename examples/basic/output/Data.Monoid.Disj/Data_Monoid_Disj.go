// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Disj

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋDisj() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowDisj() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Disj ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemiringDisj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var disj Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra)
        var conj Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra)
        return Dict{"zero": Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra), "one": Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra), "add": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(disj, v, v1)
                }
            }, "mul": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(conj, v, v1)
                }
            },}
    }
}
func ꞋsemigroupDisj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var disj Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(disj, v, v1)
                }
            },}
    }
}
func ꞋordDisj() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func ꞋmonoidDisj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var semigroupDisj1 Any = Apply(ꞋsemigroupDisj(), dictHeytingAlgebra)
        return Dict{"mempty": Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra), "Semigroup0": func(_ Any) Any {
                return semigroupDisj1
            },}
    }
}

var ᛌfunctorDisj_once Once
var ᛧfunctorDisj Any

func ꞋfunctorDisj() Any {
    ᛌfunctorDisj_once.Do(func() {
        ᛧfunctorDisj = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorDisj
}


func ꞋeqDisj() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Disj_once Once
var ᛧeq1Disj Any

func Ꞌeq1Disj() Any {
    ᛌeq1Disj_once.Do(func() {
        ᛧeq1Disj = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqDisj(), dictEq))
        },}
    })
return ᛧeq1Disj
}



var ᛌord1Disj_once Once
var ᛧord1Disj Any

func Ꞌord1Disj() Any {
    ᛌord1Disj_once.Do(func() {
        ᛧord1Disj = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordDisj(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Disj()
        },}
    })
return ᛧord1Disj
}


func ꞋboundedDisj() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyDisj_once Once
var ᛧapplyDisj Any

func ꞋapplyDisj() Any {
    ᛌapplyDisj_once.Do(func() {
        ᛧapplyDisj = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorDisj()
        },}
    })
return ᛧapplyDisj
}



var ᛌbindDisj_once Once
var ᛧbindDisj Any

func ꞋbindDisj() Any {
    ᛌbindDisj_once.Do(func() {
        ᛧbindDisj = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyDisj()
        },}
    })
return ᛧbindDisj
}



var ᛌapplicativeDisj_once Once
var ᛧapplicativeDisj Any

func ꞋapplicativeDisj() Any {
    ᛌapplicativeDisj_once.Do(func() {
        ᛧapplicativeDisj = Dict{"pure": ꞋDisj(), "Apply0": func(_ Any) Any {
            return ꞋapplyDisj()
        },}
    })
return ᛧapplicativeDisj
}



var ᛌmonadDisj_once Once
var ᛧmonadDisj Any

func ꞋmonadDisj() Any {
    ᛌmonadDisj_once.Do(func() {
        ᛧmonadDisj = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeDisj()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindDisj()
        },}
    })
return ᛧmonadDisj
}





