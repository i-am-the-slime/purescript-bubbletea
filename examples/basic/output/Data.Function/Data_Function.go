// Code generated by psgo. DO NOT EDIT.

package Data_Function

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ring"
)

type _ = Any

func ꞋlessThanOrEq() Any {
    return Apply(Data_Ord.ꞋlessThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌsub() Any {
    return Apply(Data_Ring.Ꞌsub(), Data_Ring.ꞋringInt())
}
func Ꞌon() Any {
    return func(f Any) Any {
        return func(g Any) Any {
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(f, Apply(g, x), Apply(g, y))
                }
            }
        }
    }
}
func Ꞌflip() Any {
    return func(f Any) Any {
        return func(b Any) Any {
            return func(a Any) Any {
                return Apply(f, a, b)
            }
        }
    }
}
func Ꞌconst() Any {
    return func(a Any) Any {
        return func(v Any) Any {
            return a
        }
    }
}
func ꞋapplyN() Any {
    return func(f Any) Any {
        var ˉgo Any
        ˉgo = func(ṩcopy_n Any) Any {
            return func(ṩcopy_acc Any) Any {
                var ṩtco_var_n Any = ṩcopy_n
                var ṩtco_done = false
                var ṩtco_result Any
                var ṩtco_loop = func(n Any, acc Any) Any {
                    if Apply(ꞋlessThanOrEq(), n, 0) == true {
                        ṩtco_done = true
                        return acc
                    }
                    ṩtco_var_n = Apply(Ꞌsub(), n, 1)
                    ṩcopy_acc = Apply(f, acc)
                    return Undefined
                }
                for !ṩtco_done {
                    ṩtco_result = ṩtco_loop(ṩtco_var_n, ṩcopy_acc)
                }
                return ṩtco_result
            }
        }
        return ˉgo
    }
}
func ꞋapplyFlipped() Any {
    return func(x Any) Any {
        return func(f Any) Any {
            return Apply(f, x)
        }
    }
}
func Ꞌapply() Any {
    return func(f Any) Any {
        return func(x Any) Any {
            return Apply(f, x)
        }
    }
}



