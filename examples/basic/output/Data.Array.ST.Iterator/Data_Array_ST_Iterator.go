// Code generated by psgo. DO NOT EDIT.

package Data_Array_ST_Iterator

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Monad.ST.Internal"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Array.ST"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Maybe"
)

type _ = Any

func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Control_Monad_ST_Internal.ꞋbindST())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), Control_Monad_ST_Internal.ꞋapplicativeST())
}
func Ꞌadd() Any {
    return Apply(Data_Semiring.Ꞌadd(), Data_Semiring.ꞋsemiringInt())
}
func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Control_Monad_ST_Internal.ꞋfunctorST())
}
func Ꞌnot() Any {
    return Apply(Data_HeytingAlgebra.Ꞌnot(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func Ꞌvoid() Any {
    return Apply(Data_Functor.Ꞌvoid(), Control_Monad_ST_Internal.ꞋfunctorST())
}
func ꞋIterator() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"Iterator": true, "value0": value0, "value1": value1,}
        }
    }
}
func Ꞌpeek() Any {
    return func(v Any) Any {
        return Apply(Ꞌbind(), Apply(Control_Monad_ST_Internal.Ꞌread(), v.(Dict)["value1"]), func(i Any) Any {
            return Apply(Ꞌpure(), Apply(v.(Dict)["value0"], i))
        })
    }
}
func Ꞌnext() Any {
    return func(v Any) Any {
        return Apply(Ꞌbind(), Apply(Control_Monad_ST_Internal.Ꞌread(), v.(Dict)["value1"]), func(i Any) Any {
            return Apply(Ꞌbind(), Apply(Control_Monad_ST_Internal.Ꞌmodify(), func(v1 Any) Any {
                return Apply(Ꞌadd(), v1, 1)
            }, v.(Dict)["value1"]), func(_ Any) Any {
                return Apply(Ꞌpure(), Apply(v.(Dict)["value0"], i))
            })
        })
    }
}
func ꞋpushWhile() Any {
    return func(p Any) Any {
        return func(iter Any) Any {
            return func(array Any) Any {
                return Apply(Ꞌbind(), Apply(Control_Monad_ST_Internal.Ꞌnew(), false), func(ˉbreak Any) Any {
                    return Apply(Control_Monad_ST_Internal.Ꞌwhile(), Apply(Ꞌmap(), Ꞌnot(), Apply(Control_Monad_ST_Internal.Ꞌread(), ˉbreak)), Apply(Ꞌbind(), Apply(Ꞌpeek(), iter), func(mx Any) Any {
                        if Is(mx, "Just") && Apply(p, mx.(Dict)["value0"]) == true {
                            return Apply(Ꞌbind(), Apply(Data_Array_ST.Ꞌpush(), mx.(Dict)["value0"], array), func(_ Any) Any {
                                return Apply(Ꞌvoid(), Apply(Ꞌnext(), iter))
                            })
                        }
                        return Apply(Ꞌvoid(), Apply(Control_Monad_ST_Internal.Ꞌwrite(), true, ˉbreak))
                    }))
                })
            }
        }
    }
}
func ꞋpushAll() Any {
    return Apply(ꞋpushWhile(), Apply(Data_Function.Ꞌconst(), true))
}
func Ꞌiterator() Any {
    return func(f Any) Any {
        return Apply(Ꞌmap(), Apply(ꞋIterator(), f), Apply(Control_Monad_ST_Internal.Ꞌnew(), 0))
    }
}
func Ꞌiterate() Any {
    return func(iter Any) Any {
        return func(f Any) Any {
            return Apply(Ꞌbind(), Apply(Control_Monad_ST_Internal.Ꞌnew(), false), func(ˉbreak Any) Any {
                return Apply(Control_Monad_ST_Internal.Ꞌwhile(), Apply(Ꞌmap(), Ꞌnot(), Apply(Control_Monad_ST_Internal.Ꞌread(), ˉbreak)), Apply(Ꞌbind(), Apply(Ꞌnext(), iter), func(mx Any) Any {
                    if Is(mx, "Just") {
                        return Apply(f, mx.(Dict)["value0"])
                    }
                    if Is(mx, "Nothing") {
                        return Apply(Ꞌvoid(), Apply(Control_Monad_ST_Internal.Ꞌwrite(), true, ˉbreak))
                    }
                    panic("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47)")
                }))
            })
        }
    }
}
func Ꞌexhausted() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn(), Apply(Ꞌmap(), Data_Maybe.ꞋisNothing()), Ꞌpeek())
}



