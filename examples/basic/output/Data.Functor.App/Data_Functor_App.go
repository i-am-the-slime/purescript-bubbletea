// Code generated by psgo. DO NOT EDIT.

package Data_Functor_App

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Unsafe.Coerce"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋApp() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowApp() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(App ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupApp() Any {
    return func(dictApply Any) Any {
        var lift2 Any = Apply(Control_Apply.Ꞌlift2(), dictApply)
        return func(dictSemigroup Any) Any {
            var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
            return Dict{"append": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(lift2, append1, v, v1)
                    }
                },}
        }
    }
}
func ꞋplusApp() Any {
    return func(dictPlus Any) Any {
        return dictPlus
    }
}

var ᛌnewtypeApp_once Once
var ᛧnewtypeApp Any

func ꞋnewtypeApp() Any {
    ᛌnewtypeApp_once.Do(func() {
        ᛧnewtypeApp = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeApp
}


func ꞋmonoidApp() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var semigroupApp1 Any = Apply(ꞋsemigroupApp(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return func(dictMonoid Any) Any {
            var semigroupApp2 Any = Apply(semigroupApp1, Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            return Dict{"mempty": Apply(pure, Apply(Data_Monoid.Ꞌmempty(), dictMonoid)), "Semigroup0": func(_ Any) Any {
                    return semigroupApp2
                },}
        }
    }
}
func ꞋmonadPlusApp() Any {
    return func(dictMonadPlus Any) Any {
        return dictMonadPlus
    }
}
func ꞋmonadApp() Any {
    return func(dictMonad Any) Any {
        return dictMonad
    }
}
func ꞋlazyApp() Any {
    return func(dictLazy Any) Any {
        return dictLazy
    }
}
func ꞋhoistLowerApp() Any {
    return Unsafe_Coerce.ꞋunsafeCoerce()
}
func ꞋhoistLiftApp() Any {
    return Unsafe_Coerce.ꞋunsafeCoerce()
}
func ꞋhoistApp() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(f, v)
        }
    }
}
func ꞋfunctorApp() Any {
    return func(dictFunctor Any) Any {
        return dictFunctor
    }
}
func ꞋextendApp() Any {
    return func(dictExtend Any) Any {
        return dictExtend
    }
}
func ꞋeqApp() Any {
    return func(dictEq1 Any) Any {
        var eq1 Any = Apply(Data_Eq.Ꞌeq1(), dictEq1)
        return func(dictEq Any) Any {
            var eq11 Any = Apply(eq1, dictEq)
            return Dict{"eq": func(x Any) Any {
                    return func(y Any) Any {
                        return Apply(eq11, x, y)
                    }
                },}
        }
    }
}
func ꞋordApp() Any {
    return func(dictOrd1 Any) Any {
        var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd1)
        var eqApp1 Any = Apply(ꞋeqApp(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd Any) Any {
            var compare11 Any = Apply(compare1, dictOrd)
            var eqApp2 Any = Apply(eqApp1, Apply(dictOrd.(Dict)["Eq0"], Undefined))
            return Dict{"compare": func(x Any) Any {
                    return func(y Any) Any {
                        return Apply(compare11, x, y)
                    }
                }, "Eq0": func(_ Any) Any {
                    return eqApp2
                },}
        }
    }
}
func Ꞌeq1App() Any {
    return func(dictEq1 Any) Any {
        var eqApp1 Any = Apply(ꞋeqApp(), dictEq1)
        return Dict{"eq1": func(dictEq Any) Any {
                return Apply(Data_Eq.Ꞌeq(), Apply(eqApp1, dictEq))
            },}
    }
}
func Ꞌord1App() Any {
    return func(dictOrd1 Any) Any {
        var ordApp1 Any = Apply(ꞋordApp(), dictOrd1)
        var eq1App1 Any = Apply(Ꞌeq1App(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return Dict{"compare1": func(dictOrd Any) Any {
                return Apply(Data_Ord.Ꞌcompare(), Apply(ordApp1, dictOrd))
            }, "Eq10": func(_ Any) Any {
                return eq1App1
            },}
    }
}
func ꞋcomonadApp() Any {
    return func(dictComonad Any) Any {
        return dictComonad
    }
}
func ꞋbindApp() Any {
    return func(dictBind Any) Any {
        return dictBind
    }
}
func ꞋapplyApp() Any {
    return func(dictApply Any) Any {
        return dictApply
    }
}
func ꞋapplicativeApp() Any {
    return func(dictApplicative Any) Any {
        return dictApplicative
    }
}
func ꞋalternativeApp() Any {
    return func(dictAlternative Any) Any {
        return dictAlternative
    }
}
func ꞋaltApp() Any {
    return func(dictAlt Any) Any {
        return dictAlt
    }
}



