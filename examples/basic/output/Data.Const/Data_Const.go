// Code generated by psgo. DO NOT EDIT.

package Data_Const

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Functor.Invariant"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Monoid"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋConst() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowConst() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Const ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemiringConst() Any {
    return func(dictSemiring Any) Any {
        return dictSemiring
    }
}

var ᛌsemigroupoidConst_once Once
var ᛧsemigroupoidConst Any

func ꞋsemigroupoidConst() Any {
    ᛌsemigroupoidConst_once.Do(func() {
        ᛧsemigroupoidConst = Dict{"compose": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        },}
    })
return ᛧsemigroupoidConst
}


func ꞋsemigroupConst() Any {
    return func(dictSemigroup Any) Any {
        return dictSemigroup
    }
}
func ꞋringConst() Any {
    return func(dictRing Any) Any {
        return dictRing
    }
}
func ꞋordConst() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeConst_once Once
var ᛧnewtypeConst Any

func ꞋnewtypeConst() Any {
    ᛌnewtypeConst_once.Do(func() {
        ᛧnewtypeConst = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeConst
}


func ꞋmonoidConst() Any {
    return func(dictMonoid Any) Any {
        return dictMonoid
    }
}
func ꞋheytingAlgebraConst() Any {
    return func(dictHeytingAlgebra Any) Any {
        return dictHeytingAlgebra
    }
}

var ᛌfunctorConst_once Once
var ᛧfunctorConst Any

func ꞋfunctorConst() Any {
    ᛌfunctorConst_once.Do(func() {
        ᛧfunctorConst = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return m
            }
        },}
    })
return ᛧfunctorConst
}



var ᛌinvariantConst_once Once
var ᛧinvariantConst Any

func ꞋinvariantConst() Any {
    ᛌinvariantConst_once.Do(func() {
        ᛧinvariantConst = Dict{"imap": Apply(Data_Functor_Invariant.ꞋimapF(), ꞋfunctorConst()),}
    })
return ᛧinvariantConst
}


func ꞋeuclideanRingConst() Any {
    return func(dictEuclideanRing Any) Any {
        return dictEuclideanRing
    }
}
func ꞋeqConst() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func Ꞌeq1Const() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqConst(), dictEq))
        return Dict{"eq1": func(dictEq1 Any) Any {
                return eq
            },}
    }
}
func Ꞌord1Const() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordConst(), dictOrd))
        var eq1Const1 Any = Apply(Ꞌeq1Const(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare1": func(dictOrd1 Any) Any {
                return compare
            }, "Eq10": func(_ Any) Any {
                return eq1Const1
            },}
    }
}
func ꞋcommutativeRingConst() Any {
    return func(dictCommutativeRing Any) Any {
        return dictCommutativeRing
    }
}
func ꞋboundedConst() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}
func ꞋbooleanAlgebraConst() Any {
    return func(dictBooleanAlgebra Any) Any {
        return dictBooleanAlgebra
    }
}
func ꞋapplyConst() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"apply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(append1, v, v1)
                }
            }, "Functor0": func(_ Any) Any {
                return ꞋfunctorConst()
            },}
    }
}
func ꞋapplicativeConst() Any {
    return func(dictMonoid Any) Any {
        var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
        var applyConst1 Any = Apply(ꞋapplyConst(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"pure": func(v Any) Any {
                return mempty
            }, "Apply0": func(_ Any) Any {
                return applyConst1
            },}
    }
}



