// Code generated by psgo. DO NOT EDIT.

package Data_Generic_Rep

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Type.Proxy"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌshow() Any {
    return Apply(Data_Show.Ꞌshow(), Data_Show.ꞋshowString())
}
func ꞋInl() Any {
    return func(value0 Any) Any {
        return Dict{"Inl": true, "value0": value0,}
    }
}
func ꞋInr() Any {
    return func(value0 Any) Any {
        return Dict{"Inr": true, "value0": value0,}
    }
}
func ꞋProduct() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"Product": true, "value0": value0, "value1": value1,}
        }
    }
}
func ꞋNoConstructors() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌNoArguments_once Once
var ᛧNoArguments Any

func ꞋNoArguments() Any {
    ᛌNoArguments_once.Do(func() {
        ᛧNoArguments = Dict{"NoArguments": true,}
    })
return ᛧNoArguments
}


func ꞋGeneric_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋConstructor() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋArgument() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌto() Any {
    return func(dict Any) Any {
        return dict.(Dict)["to"]
    }
}
func ꞋshowSum() Any {
    return func(dictShow Any) Any {
        var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show2 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    if Is(v, "Inl") {
                        return Apply(Ꞌappend(), "(Inl ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value0"]), ")"))
                    }
                    if Is(v, "Inr") {
                        return Apply(Ꞌappend(), "(Inr ", Apply(Ꞌappend(), Apply(show2, v.(Dict)["value0"]), ")"))
                    }
                    panic("Failed pattern match at Data.Generic.Rep (line 32, column 1 - line 34, column 42)")
                },}
        }
    }
}
func ꞋshowProduct() Any {
    return func(dictShow Any) Any {
        var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show2 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(Product ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value0"]), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show2, v.(Dict)["value1"]), ")"))))
                },}
        }
    }
}

var ᛌshowNoArguments_once Once
var ᛧshowNoArguments Any

func ꞋshowNoArguments() Any {
    ᛌshowNoArguments_once.Do(func() {
        ᛧshowNoArguments = Dict{"show": func(v Any) Any {
            return "NoArguments"
        },}
    })
return ᛧshowNoArguments
}


func ꞋshowConstructor() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(dictShow Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(Constructor @", Apply(Ꞌappend(), Apply(Ꞌshow(), Apply(reflectSymbol, Type_Proxy.ꞋProxy())), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show1, v), ")"))))
                },}
        }
    }
}
func ꞋshowArgument() Any {
    return func(dictShow Any) Any {
        var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Argument ", Apply(Ꞌappend(), Apply(show1, v), ")"))
            },}
    }
}
func ꞋrepOf() Any {
    return func(dictGeneric Any) Any {
        return func(v Any) Any {
            return Type_Proxy.ꞋProxy()
        }
    }
}
func Ꞌfrom() Any {
    return func(dict Any) Any {
        return dict.(Dict)["from"]
    }
}



