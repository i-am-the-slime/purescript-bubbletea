// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Joker

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Bind"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋcomposeFlipped() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌun() Any {
    return Apply(Data_Newtype.Ꞌun(), Undefined)
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋJoker() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowJoker() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Joker ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋprofunctorJoker() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"dimap": func(v Any) Any {
                return func(g Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ˉmap, g, v1)
                    }
                }
            },}
    }
}
func ꞋordJoker() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeJoker_once Once
var ᛧnewtypeJoker Any

func ꞋnewtypeJoker() Any {
    ᛌnewtypeJoker_once.Do(func() {
        ᛧnewtypeJoker = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeJoker
}


func ꞋhoistJoker() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(f, v)
        }
    }
}
func ꞋfunctorJoker() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"map": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, f, v)
                }
            },}
    }
}
func ꞋeqJoker() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋchoiceJoker() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        var profunctorJoker1 Any = Apply(ꞋprofunctorJoker(), dictFunctor)
        return Dict{"left": func(v Any) Any {
                return Apply(ˉmap, Data_Either.ꞋLeft(), v)
            }, "right": func(v Any) Any {
                return Apply(ˉmap, Data_Either.ꞋRight(), v)
            }, "Profunctor0": func(_ Any) Any {
                return profunctorJoker1
            },}
    }
}
func ꞋbifunctorJoker() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"bimap": func(v Any) Any {
                return func(g Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ˉmap, g, v1)
                    }
                }
            },}
    }
}
func ꞋbiapplyJoker() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var bifunctorJoker1 Any = Apply(ꞋbifunctorJoker(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return Dict{"biapply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(apply, v, v1)
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorJoker1
            },}
    }
}
func ꞋbiapplicativeJoker() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var biapplyJoker1 Any = Apply(ꞋbiapplyJoker(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return Dict{"bipure": func(v Any) Any {
                return func(b Any) Any {
                    return Apply(pure, b)
                }
            }, "Biapply0": func(_ Any) Any {
                return biapplyJoker1
            },}
    }
}
func ꞋapplyJoker() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var functorJoker1 Any = Apply(ꞋfunctorJoker(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return Dict{"apply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(apply, v, v1)
                }
            }, "Functor0": func(_ Any) Any {
                return functorJoker1
            },}
    }
}
func ꞋbindJoker() Any {
    return func(dictBind Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), dictBind)
        var applyJoker1 Any = Apply(ꞋapplyJoker(), Apply(dictBind.(Dict)["Apply0"], Undefined))
        return Dict{"bind": func(v Any) Any {
                return func(amb Any) Any {
                    return Apply(bind, v, Apply(ꞋcomposeFlipped(), amb, Apply(Ꞌun(), ꞋJoker())))
                }
            }, "Apply0": func(_ Any) Any {
                return applyJoker1
            },}
    }
}
func ꞋapplicativeJoker() Any {
    return func(dictApplicative Any) Any {
        var applyJoker1 Any = Apply(ꞋapplyJoker(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return Dict{"pure": Apply(Ꞌcompose(), ꞋJoker(), Apply(Control_Applicative.Ꞌpure(), dictApplicative)), "Apply0": func(_ Any) Any {
                return applyJoker1
            },}
    }
}
func ꞋmonadJoker() Any {
    return func(dictMonad Any) Any {
        var applicativeJoker1 Any = Apply(ꞋapplicativeJoker(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        var bindJoker1 Any = Apply(ꞋbindJoker(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        return Dict{"Applicative0": func(_ Any) Any {
                return applicativeJoker1
            }, "Bind1": func(_ Any) Any {
                return bindJoker1
            },}
    }
}



