// Code generated by psgo. DO NOT EDIT.

package Data_Traversable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.Monoid.Multiplicative"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Data.Monoid.Disj"
	"project.localhost/purescript-native/output/Data.Const"
	"project.localhost/purescript-native/output/Data.Monoid.Conj"
	"project.localhost/purescript-native/output/Data.Functor.Compose"
	"project.localhost/purescript-native/output/Data.Monoid.Additive"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Functor.App"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Maybe.First"
	"project.localhost/purescript-native/output/Data.Maybe.Last"
	"project.localhost/purescript-native/output/Data.Functor.Product"
	"project.localhost/purescript-native/output/Data.Traversable.Accum.Internal"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋTraversable_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌtraverse() Any {
    return func(dict Any) Any {
        return dict.(Dict)["traverse"]
    }
}

var ᛌtraversableTuple_once Once
var ᛧtraversableTuple Any

func ꞋtraversableTuple() Any {
    ᛌtraversableTuple_once.Do(func() {
        ᛧtraversableTuple = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), Apply(f, v.(Dict)["value1"]))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), v.(Dict)["value1"])
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Tuple.ꞋfunctorTuple()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableTuple()
        },}
    })
return ᛧtraversableTuple
}



var ᛌtraversableMultiplicative_once Once
var ᛧtraversableMultiplicative Any

func ꞋtraversableMultiplicative() Any {
    ᛌtraversableMultiplicative_once.Do(func() {
        ᛧtraversableMultiplicative = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Multiplicative.ꞋMultiplicative(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Monoid_Multiplicative.ꞋMultiplicative(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Multiplicative.ꞋfunctorMultiplicative()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableMultiplicative()
        },}
    })
return ᛧtraversableMultiplicative
}



var ᛌtraversableMaybe_once Once
var ᛧtraversableMaybe Any

func ꞋtraversableMaybe() Any {
    ᛌtraversableMaybe_once.Do(func() {
        ᛧtraversableMaybe = Dict{"traverse": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v1, "Nothing") {
                        return Apply(pure, Data_Maybe.ꞋNothing())
                    }
                    if Is(v1, "Just") {
                        return Apply(ˉmap, Data_Maybe.ꞋJust(), Apply(v, v1.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33)")
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                if Is(v, "Nothing") {
                    return Apply(pure, Data_Maybe.ꞋNothing())
                }
                if Is(v, "Just") {
                    return Apply(ˉmap, Data_Maybe.ꞋJust(), v.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33)")
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe.ꞋfunctorMaybe()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableMaybe()
        },}
    })
return ᛧtraversableMaybe
}


func Ꞌtraverse1() Any {
    return Apply(Ꞌtraverse(), ꞋtraversableMaybe())
}

var ᛌtraversableIdentity_once Once
var ᛧtraversableIdentity Any

func ꞋtraversableIdentity() Any {
    ᛌtraversableIdentity_once.Do(func() {
        ᛧtraversableIdentity = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Identity.ꞋIdentity(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Identity.ꞋIdentity(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Identity.ꞋfunctorIdentity()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableIdentity()
        },}
    })
return ᛧtraversableIdentity
}



var ᛌtraversableEither_once Once
var ᛧtraversableEither Any

func ꞋtraversableEither() Any {
    ᛌtraversableEither_once.Do(func() {
        ᛧtraversableEither = Dict{"traverse": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v1, "Left") {
                        return Apply(pure, Apply(Data_Either.ꞋLeft(), v1.(Dict)["value0"]))
                    }
                    if Is(v1, "Right") {
                        return Apply(ˉmap, Data_Either.ꞋRight(), Apply(v, v1.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36)")
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                if Is(v, "Left") {
                    return Apply(pure, Apply(Data_Either.ꞋLeft(), v.(Dict)["value0"]))
                }
                if Is(v, "Right") {
                    return Apply(ˉmap, Data_Either.ꞋRight(), v.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36)")
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Either.ꞋfunctorEither()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableEither()
        },}
    })
return ᛧtraversableEither
}



var ᛌtraversableDual_once Once
var ᛧtraversableDual Any

func ꞋtraversableDual() Any {
    ᛌtraversableDual_once.Do(func() {
        ᛧtraversableDual = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Dual.ꞋDual(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Monoid_Dual.ꞋDual(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Dual.ꞋfunctorDual()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableDual()
        },}
    })
return ᛧtraversableDual
}



var ᛌtraversableDisj_once Once
var ᛧtraversableDisj Any

func ꞋtraversableDisj() Any {
    ᛌtraversableDisj_once.Do(func() {
        ᛧtraversableDisj = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Disj.ꞋDisj(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Monoid_Disj.ꞋDisj(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Disj.ꞋfunctorDisj()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableDisj()
        },}
    })
return ᛧtraversableDisj
}



var ᛌtraversableConst_once Once
var ᛧtraversableConst Any

func ꞋtraversableConst() Any {
    ᛌtraversableConst_once.Do(func() {
        ᛧtraversableConst = Dict{"traverse": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(pure, v1)
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(v Any) Any {
                return Apply(pure, v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Const.ꞋfunctorConst()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableConst()
        },}
    })
return ᛧtraversableConst
}



var ᛌtraversableConj_once Once
var ᛧtraversableConj Any

func ꞋtraversableConj() Any {
    ᛌtraversableConj_once.Do(func() {
        ᛧtraversableConj = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Conj.ꞋConj(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Monoid_Conj.ꞋConj(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Conj.ꞋfunctorConj()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableConj()
        },}
    })
return ᛧtraversableConj
}


func ꞋtraversableCompose() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable)
        var functorCompose Any = Apply(Data_Functor_Compose.ꞋfunctorCompose(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var foldableCompose Any = Apply(Data_Foldable.ꞋfoldableCompose(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return func(dictTraversable1 Any) Any {
            var traverse3 Any = Apply(Ꞌtraverse(), dictTraversable1)
            var functorCompose1 Any = Apply(functorCompose, Apply(dictTraversable1.(Dict)["Functor0"], Undefined))
            var foldableCompose1 Any = Apply(foldableCompose, Apply(dictTraversable1.(Dict)["Foldable1"], Undefined))
            return Dict{"traverse": func(dictApplicative Any) Any {
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                    var traverse4 Any = Apply(traverse2, dictApplicative)
                    var traverse5 Any = Apply(traverse3, dictApplicative)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(ˉmap, Data_Functor_Compose.ꞋCompose(), Apply(traverse4, Apply(traverse5, f), v))
                        }
                    }
                }, "sequence": func(dictApplicative Any) Any {
                    return Apply(Ꞌtraverse(), Apply(ꞋtraversableCompose(), dictTraversable, dictTraversable1), dictApplicative, Ꞌidentity())
                }, "Functor0": func(_ Any) Any {
                    return functorCompose1
                }, "Foldable1": func(_ Any) Any {
                    return foldableCompose1
                },}
        }
    }
}

var ᛌtraversableAdditive_once Once
var ᛧtraversableAdditive Any

func ꞋtraversableAdditive() Any {
    ᛌtraversableAdditive_once.Do(func() {
        ᛧtraversableAdditive = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Additive.ꞋAdditive(), Apply(f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Monoid_Additive.ꞋAdditive(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Additive.ꞋfunctorAdditive()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableAdditive()
        },}
    })
return ᛧtraversableAdditive
}


func ꞋsequenceDefault() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable)
        return func(dictApplicative Any) Any {
            return Apply(traverse2, dictApplicative, Ꞌidentity())
        }
    }
}

var ᛌtraversableArray_once Once
var ᛧtraversableArray Any

func ꞋtraversableArray() Any {
    ᛌtraversableArray_once.Do(func() {
        ᛧtraversableArray = Dict{"traverse": func(dictApplicative Any) Any {
            var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
            return Apply(ꞋtraverseArrayImpl(), Apply(Control_Apply.Ꞌapply(), Apply0), Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined)), Apply(Control_Applicative.Ꞌpure(), dictApplicative))
        }, "sequence": func(dictApplicative Any) Any {
            return Apply(ꞋsequenceDefault(), ꞋtraversableArray(), dictApplicative)
        }, "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorArray()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableArray()
        },}
    })
return ᛧtraversableArray
}


func Ꞌsequence() Any {
    return func(dict Any) Any {
        return dict.(Dict)["sequence"]
    }
}
func Ꞌsequence1() Any {
    return Apply(Ꞌsequence(), ꞋtraversableMaybe())
}
func ꞋtraversableApp() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable)
        var sequence2 Any = Apply(Ꞌsequence(), dictTraversable)
        var functorApp Any = Apply(Data_Functor_App.ꞋfunctorApp(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var foldableApp Any = Apply(Data_Foldable.ꞋfoldableApp(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return Dict{"traverse": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var traverse3 Any = Apply(traverse2, dictApplicative)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(ˉmap, Data_Functor_App.ꞋApp(), Apply(traverse3, f, v))
                    }
                }
            }, "sequence": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var sequence3 Any = Apply(sequence2, dictApplicative)
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Functor_App.ꞋApp(), Apply(sequence3, v))
                }
            }, "Functor0": func(_ Any) Any {
                return functorApp
            }, "Foldable1": func(_ Any) Any {
                return foldableApp
            },}
    }
}
func ꞋtraversableCoproduct() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable)
        var sequence2 Any = Apply(Ꞌsequence(), dictTraversable)
        var functorCoproduct Any = Apply(Data_Functor_Coproduct.ꞋfunctorCoproduct(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var foldableCoproduct Any = Apply(Data_Foldable.ꞋfoldableCoproduct(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return func(dictTraversable1 Any) Any {
            var traverse3 Any = Apply(Ꞌtraverse(), dictTraversable1)
            var sequence3 Any = Apply(Ꞌsequence(), dictTraversable1)
            var functorCoproduct1 Any = Apply(functorCoproduct, Apply(dictTraversable1.(Dict)["Functor0"], Undefined))
            var foldableCoproduct1 Any = Apply(foldableCoproduct, Apply(dictTraversable1.(Dict)["Foldable1"], Undefined))
            return Dict{"traverse": func(dictApplicative Any) Any {
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                    var traverse4 Any = Apply(traverse2, dictApplicative)
                    var traverse5 Any = Apply(traverse3, dictApplicative)
                    return func(f Any) Any {
                        return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋLeft())), Apply(traverse4, f)), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋRight())), Apply(traverse5, f)))
                    }
                }, "sequence": func(dictApplicative Any) Any {
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                    return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋLeft())), Apply(sequence2, dictApplicative)), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋRight())), Apply(sequence3, dictApplicative)))
                }, "Functor0": func(_ Any) Any {
                    return functorCoproduct1
                }, "Foldable1": func(_ Any) Any {
                    return foldableCoproduct1
                },}
        }
    }
}

var ᛌtraversableFirst_once Once
var ᛧtraversableFirst Any

func ꞋtraversableFirst() Any {
    ᛌtraversableFirst_once.Do(func() {
        ᛧtraversableFirst = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            var traverse2 Any = Apply(Ꞌtraverse1(), dictApplicative)
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Maybe_First.ꞋFirst(), Apply(traverse2, f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            var sequence2 Any = Apply(Ꞌsequence1(), dictApplicative)
            return func(v Any) Any {
                return Apply(ˉmap, Data_Maybe_First.ꞋFirst(), Apply(sequence2, v))
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe_First.ꞋfunctorFirst()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableFirst()
        },}
    })
return ᛧtraversableFirst
}



var ᛌtraversableLast_once Once
var ᛧtraversableLast Any

func ꞋtraversableLast() Any {
    ᛌtraversableLast_once.Do(func() {
        ᛧtraversableLast = Dict{"traverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            var traverse2 Any = Apply(Ꞌtraverse1(), dictApplicative)
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Maybe_Last.ꞋLast(), Apply(traverse2, f, v))
                }
            }
        }, "sequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            var sequence2 Any = Apply(Ꞌsequence1(), dictApplicative)
            return func(v Any) Any {
                return Apply(ˉmap, Data_Maybe_Last.ꞋLast(), Apply(sequence2, v))
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe_Last.ꞋfunctorLast()
        }, "Foldable1": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableLast()
        },}
    })
return ᛧtraversableLast
}


func ꞋtraversableProduct() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable)
        var sequence2 Any = Apply(Ꞌsequence(), dictTraversable)
        var functorProduct Any = Apply(Data_Functor_Product.ꞋfunctorProduct(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var foldableProduct Any = Apply(Data_Foldable.ꞋfoldableProduct(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return func(dictTraversable1 Any) Any {
            var traverse3 Any = Apply(Ꞌtraverse(), dictTraversable1)
            var sequence3 Any = Apply(Ꞌsequence(), dictTraversable1)
            var functorProduct1 Any = Apply(functorProduct, Apply(dictTraversable1.(Dict)["Functor0"], Undefined))
            var foldableProduct1 Any = Apply(foldableProduct, Apply(dictTraversable1.(Dict)["Foldable1"], Undefined))
            return Dict{"traverse": func(dictApplicative Any) Any {
                    var lift2 Any = Apply(Control_Apply.Ꞌlift2(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
                    var traverse4 Any = Apply(traverse2, dictApplicative)
                    var traverse5 Any = Apply(traverse3, dictApplicative)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(lift2, Data_Functor_Product.Ꞌproduct(), Apply(traverse4, f, v.(Dict)["value0"]), Apply(traverse5, f, v.(Dict)["value1"]))
                        }
                    }
                }, "sequence": func(dictApplicative Any) Any {
                    var lift2 Any = Apply(Control_Apply.Ꞌlift2(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
                    var sequence4 Any = Apply(sequence2, dictApplicative)
                    var sequence5 Any = Apply(sequence3, dictApplicative)
                    return func(v Any) Any {
                        return Apply(lift2, Data_Functor_Product.Ꞌproduct(), Apply(sequence4, v.(Dict)["value0"]), Apply(sequence5, v.(Dict)["value1"]))
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorProduct1
                }, "Foldable1": func(_ Any) Any {
                    return foldableProduct1
                },}
        }
    }
}
func ꞋtraverseDefault() Any {
    return func(dictTraversable Any) Any {
        var sequence2 Any = Apply(Ꞌsequence(), dictTraversable)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        return func(dictApplicative Any) Any {
            var sequence3 Any = Apply(sequence2, dictApplicative)
            return func(f Any) Any {
                return func(ta Any) Any {
                    return Apply(sequence3, Apply(ˉmap, f, ta))
                }
            }
        }
    }
}
func ꞋmapAccumR() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable, Data_Traversable_Accum_Internal.ꞋapplicativeStateR())
        return func(f Any) Any {
            return func(s0 Any) Any {
                return func(xs Any) Any {
                    return Apply(Data_Traversable_Accum_Internal.ꞋstateR(), Apply(traverse2, func(a Any) Any {
                        return func(s Any) Any {
                            return Apply(f, s, a)
                        }
                    }, xs), s0)
                }
            }
        }
    }
}
func Ꞌscanr() Any {
    return func(dictTraversable Any) Any {
        var mapAccumR1 Any = Apply(ꞋmapAccumR(), dictTraversable)
        return func(f Any) Any {
            return func(b0 Any) Any {
                return func(xs Any) Any {
                    return Apply(mapAccumR1, func(b Any) Any {
                        return func(a Any) Any {
                            var bꞌ Any = Apply(f, a, b)
                            return Dict{"accum": bꞌ, "value": bꞌ,}
                        }
                    }, b0, xs).(Dict)["value"]
                }
            }
        }
    }
}
func ꞋmapAccumL() Any {
    return func(dictTraversable Any) Any {
        var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable, Data_Traversable_Accum_Internal.ꞋapplicativeStateL())
        return func(f Any) Any {
            return func(s0 Any) Any {
                return func(xs Any) Any {
                    return Apply(Data_Traversable_Accum_Internal.ꞋstateL(), Apply(traverse2, func(a Any) Any {
                        return func(s Any) Any {
                            return Apply(f, s, a)
                        }
                    }, xs), s0)
                }
            }
        }
    }
}
func Ꞌscanl() Any {
    return func(dictTraversable Any) Any {
        var mapAccumL1 Any = Apply(ꞋmapAccumL(), dictTraversable)
        return func(f Any) Any {
            return func(b0 Any) Any {
                return func(xs Any) Any {
                    return Apply(mapAccumL1, func(b Any) Any {
                        return func(a Any) Any {
                            var bꞌ Any = Apply(f, b, a)
                            return Dict{"accum": bꞌ, "value": bꞌ,}
                        }
                    }, b0, xs).(Dict)["value"]
                }
            }
        }
    }
}
func Ꞌfor() Any {
    return func(dictApplicative Any) Any {
        return func(dictTraversable Any) Any {
            var traverse2 Any = Apply(Ꞌtraverse(), dictTraversable, dictApplicative)
            return func(x Any) Any {
                return func(f Any) Any {
                    return Apply(traverse2, f, x)
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Traversable")

var ᛌtraverseArrayImpl_once Once
var ᛧtraverseArrayImpl Any

func ꞋtraverseArrayImpl() Any { 
    ᛌtraverseArrayImpl_once.Do(func() {
        ᛧtraverseArrayImpl = Get(foreign, "traverseArrayImpl")
    })
    return ᛧtraverseArrayImpl
}


