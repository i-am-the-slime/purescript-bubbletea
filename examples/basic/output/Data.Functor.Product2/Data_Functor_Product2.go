// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Product2

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Profunctor"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Control.Biapply"
	"project.localhost/purescript-native/output/Control.Biapplicative"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋProduct2() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"Product2": true, "value0": value0, "value1": value1,}
        }
    }
}
func ꞋshowProduct2() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(Product2 ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value1"]), ")"))))
                },}
        }
    }
}
func ꞋprofunctorProduct2() Any {
    return func(dictProfunctor Any) Any {
        var dimap Any = Apply(Data_Profunctor.Ꞌdimap(), dictProfunctor)
        return func(dictProfunctor1 Any) Any {
            var dimap1 Any = Apply(Data_Profunctor.Ꞌdimap(), dictProfunctor1)
            return Dict{"dimap": func(f Any) Any {
                    return func(g Any) Any {
                        return func(v Any) Any {
                            return Apply(ꞋProduct2(), Apply(dimap, f, g, v.(Dict)["value0"]), Apply(dimap1, f, g, v.(Dict)["value1"]))
                        }
                    }
                },}
        }
    }
}
func ꞋfunctorProduct2() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(dictFunctor1 Any) Any {
            var map1 Any = Apply(Data_Functor.Ꞌmap(), dictFunctor1)
            return Dict{"map": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(ꞋProduct2(), Apply(ˉmap, f, v.(Dict)["value0"]), Apply(map1, f, v.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋeqProduct2() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(dictEq1 Any) Any {
            var eq1 Any = Apply(Data_Eq.Ꞌeq(), dictEq1)
            return Dict{"eq": func(x Any) Any {
                    return func(y Any) Any {
                        return Apply(Ꞌconj(), Apply(eq, x.(Dict)["value0"], y.(Dict)["value0"]), Apply(eq1, x.(Dict)["value1"], y.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋordProduct2() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        var eqProduct21 Any = Apply(ꞋeqProduct2(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return func(dictOrd1 Any) Any {
            var compare1 Any = Apply(Data_Ord.Ꞌcompare(), dictOrd1)
            var eqProduct22 Any = Apply(eqProduct21, Apply(dictOrd1.(Dict)["Eq0"], Undefined))
            return Dict{"compare": func(x Any) Any {
                    return func(y Any) Any {
                        var v Any = Apply(compare, x.(Dict)["value0"], y.(Dict)["value0"])
                        if Is(v, "LT") {
                            return Data_Ordering.ꞋLT()
                        }
                        if Is(v, "GT") {
                            return Data_Ordering.ꞋGT()
                        }
                        return Apply(compare1, x.(Dict)["value1"], y.(Dict)["value1"])
                    }
                }, "Eq0": func(_ Any) Any {
                    return eqProduct22
                },}
        }
    }
}
func ꞋbifunctorProduct2() Any {
    return func(dictBifunctor Any) Any {
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), dictBifunctor)
        return func(dictBifunctor1 Any) Any {
            var bimap1 Any = Apply(Data_Bifunctor.Ꞌbimap(), dictBifunctor1)
            return Dict{"bimap": func(f Any) Any {
                    return func(g Any) Any {
                        return func(v Any) Any {
                            return Apply(ꞋProduct2(), Apply(bimap, f, g, v.(Dict)["value0"]), Apply(bimap1, f, g, v.(Dict)["value1"]))
                        }
                    }
                },}
        }
    }
}
func ꞋbiapplyProduct2() Any {
    return func(dictBiapply Any) Any {
        var biapply Any = Apply(Control_Biapply.Ꞌbiapply(), dictBiapply)
        var bifunctorProduct21 Any = Apply(ꞋbifunctorProduct2(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return func(dictBiapply1 Any) Any {
            var biapply1 Any = Apply(Control_Biapply.Ꞌbiapply(), dictBiapply1)
            var bifunctorProduct22 Any = Apply(bifunctorProduct21, Apply(dictBiapply1.(Dict)["Bifunctor0"], Undefined))
            return Dict{"biapply": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋProduct2(), Apply(biapply, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(biapply1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "Bifunctor0": func(_ Any) Any {
                    return bifunctorProduct22
                },}
        }
    }
}
func ꞋbiapplicativeProduct2() Any {
    return func(dictBiapplicative Any) Any {
        var bipure Any = Apply(Control_Biapplicative.Ꞌbipure(), dictBiapplicative)
        var biapplyProduct21 Any = Apply(ꞋbiapplyProduct2(), Apply(dictBiapplicative.(Dict)["Biapply0"], Undefined))
        return func(dictBiapplicative1 Any) Any {
            var bipure1 Any = Apply(Control_Biapplicative.Ꞌbipure(), dictBiapplicative1)
            var biapplyProduct22 Any = Apply(biapplyProduct21, Apply(dictBiapplicative1.(Dict)["Biapply0"], Undefined))
            return Dict{"bipure": func(a Any) Any {
                    return func(b Any) Any {
                        return Apply(ꞋProduct2(), Apply(bipure, a, b), Apply(bipure1, a, b))
                    }
                }, "Biapply0": func(_ Any) Any {
                    return biapplyProduct22
                },}
        }
    }
}



