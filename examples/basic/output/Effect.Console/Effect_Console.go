// Code generated by psgo. DO NOT EDIT.

package Effect_Console

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Effect"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Show"
)

type _ = Any

func Ꞌdiscard() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit(), Effect.ꞋbindEffect())
}
func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Effect.ꞋbindEffect())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), Effect.ꞋapplicativeEffect())
}
func ꞋwarnShow() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(a Any) Any {
            return Apply(Ꞌwarn(), Apply(show, a))
        }
    }
}
func ꞋlogShow() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(a Any) Any {
            return Apply(Ꞌlog(), Apply(show, a))
        }
    }
}
func ꞋinfoShow() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(a Any) Any {
            return Apply(Ꞌinfo(), Apply(show, a))
        }
    }
}
func Ꞌgrouped() Any {
    return func(name Any) Any {
        return func(inner Any) Any {
            return Apply(Ꞌdiscard(), Apply(Ꞌgroup(), name), func(_ Any) Any {
                return Apply(Ꞌbind(), inner, func(result Any) Any {
                    return Apply(Ꞌdiscard(), ꞋgroupEnd(), func(_ Any) Any {
                        return Apply(Ꞌpure(), result)
                    })
                })
            })
        }
    }
}
func ꞋerrorShow() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(a Any) Any {
            return Apply(Ꞌerror(), Apply(show, a))
        }
    }
}
func ꞋdebugShow() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(a Any) Any {
            return Apply(Ꞌdebug(), Apply(show, a))
        }
    }
}


// Foreign values

var foreign = Foreign("Effect.Console")

var ᛌlog_once Once
var ᛧlog Any

func Ꞌlog() Any { 
    ᛌlog_once.Do(func() {
        ᛧlog = Get(foreign, "log")
    })
    return ᛧlog
}

var ᛌwarn_once Once
var ᛧwarn Any

func Ꞌwarn() Any { 
    ᛌwarn_once.Do(func() {
        ᛧwarn = Get(foreign, "warn")
    })
    return ᛧwarn
}

var ᛌerror_once Once
var ᛧerror Any

func Ꞌerror() Any { 
    ᛌerror_once.Do(func() {
        ᛧerror = Get(foreign, "error")
    })
    return ᛧerror
}

var ᛌinfo_once Once
var ᛧinfo Any

func Ꞌinfo() Any { 
    ᛌinfo_once.Do(func() {
        ᛧinfo = Get(foreign, "info")
    })
    return ᛧinfo
}

var ᛌdebug_once Once
var ᛧdebug Any

func Ꞌdebug() Any { 
    ᛌdebug_once.Do(func() {
        ᛧdebug = Get(foreign, "debug")
    })
    return ᛧdebug
}

var ᛌtime_once Once
var ᛧtime Any

func Ꞌtime() Any { 
    ᛌtime_once.Do(func() {
        ᛧtime = Get(foreign, "time")
    })
    return ᛧtime
}

var ᛌtimeLog_once Once
var ᛧtimeLog Any

func ꞋtimeLog() Any { 
    ᛌtimeLog_once.Do(func() {
        ᛧtimeLog = Get(foreign, "timeLog")
    })
    return ᛧtimeLog
}

var ᛌtimeEnd_once Once
var ᛧtimeEnd Any

func ꞋtimeEnd() Any { 
    ᛌtimeEnd_once.Do(func() {
        ᛧtimeEnd = Get(foreign, "timeEnd")
    })
    return ᛧtimeEnd
}

var ᛌclear_once Once
var ᛧclear Any

func Ꞌclear() Any { 
    ᛌclear_once.Do(func() {
        ᛧclear = Get(foreign, "clear")
    })
    return ᛧclear
}

var ᛌgroup_once Once
var ᛧgroup Any

func Ꞌgroup() Any { 
    ᛌgroup_once.Do(func() {
        ᛧgroup = Get(foreign, "group")
    })
    return ᛧgroup
}

var ᛌgroupCollapsed_once Once
var ᛧgroupCollapsed Any

func ꞋgroupCollapsed() Any { 
    ᛌgroupCollapsed_once.Do(func() {
        ᛧgroupCollapsed = Get(foreign, "groupCollapsed")
    })
    return ᛧgroupCollapsed
}

var ᛌgroupEnd_once Once
var ᛧgroupEnd Any

func ꞋgroupEnd() Any { 
    ᛌgroupEnd_once.Do(func() {
        ᛧgroupEnd = Get(foreign, "groupEnd")
    })
    return ᛧgroupEnd
}


