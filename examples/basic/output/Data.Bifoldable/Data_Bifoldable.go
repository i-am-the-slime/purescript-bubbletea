// Code generated by psgo. DO NOT EDIT.

package Data_Bifoldable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Data.Monoid.Endo"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Monoid.Disj"
	"project.localhost/purescript-native/output/Data.Monoid.Conj"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func ꞋmonoidEndo() Any {
    return Apply(Data_Monoid_Endo.ꞋmonoidEndo(), Control_Category.ꞋcategoryFn())
}
func ꞋmonoidDual() Any {
    return Apply(Data_Monoid_Dual.ꞋmonoidDual(), ꞋmonoidEndo())
}
func ꞋBifoldable_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌbifoldr() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bifoldr"]
    }
}
func Ꞌbitraverse_() Any {
    return func(dictBifoldable Any) Any {
        var bifoldr1 Any = Apply(Ꞌbifoldr(), dictBifoldable)
        return func(dictApplicative Any) Any {
            var applySecond Any = Apply(Control_Apply.ꞋapplySecond(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(f Any) Any {
                return func(g Any) Any {
                    return Apply(bifoldr1, Apply(Ꞌcompose(), applySecond, f), Apply(Ꞌcompose(), applySecond, g), Apply(pure, Data_Unit.Ꞌunit()))
                }
            }
        }
    }
}
func Ꞌbifor_() Any {
    return func(dictBifoldable Any) Any {
        var bitraverse_1 Any = Apply(Ꞌbitraverse_(), dictBifoldable)
        return func(dictApplicative Any) Any {
            var bitraverse_2 Any = Apply(bitraverse_1, dictApplicative)
            return func(t Any) Any {
                return func(f Any) Any {
                    return func(g Any) Any {
                        return Apply(bitraverse_2, f, g, t)
                    }
                }
            }
        }
    }
}
func Ꞌbisequence_() Any {
    return func(dictBifoldable Any) Any {
        var bitraverse_1 Any = Apply(Ꞌbitraverse_(), dictBifoldable)
        return func(dictApplicative Any) Any {
            return Apply(bitraverse_1, dictApplicative, Ꞌidentity(), Ꞌidentity())
        }
    }
}
func Ꞌbifoldl() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bifoldl"]
    }
}

var ᛌbifoldableTuple_once Once
var ᛧbifoldableTuple Any

func ꞋbifoldableTuple() Any {
    ᛌbifoldableTuple_once.Do(func() {
        ᛧbifoldableTuple = Dict{"bifoldMap": func(dictMonoid Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            return func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(append, Apply(f, v.(Dict)["value0"]), Apply(g, v.(Dict)["value1"]))
                    }
                }
            }
        }, "bifoldr": func(f Any) Any {
            return func(g Any) Any {
                return func(z Any) Any {
                    return func(v Any) Any {
                        return Apply(f, v.(Dict)["value0"], Apply(g, v.(Dict)["value1"], z))
                    }
                }
            }
        }, "bifoldl": func(f Any) Any {
            return func(g Any) Any {
                return func(z Any) Any {
                    return func(v Any) Any {
                        return Apply(g, Apply(f, z, v.(Dict)["value0"]), v.(Dict)["value1"])
                    }
                }
            }
        },}
    })
return ᛧbifoldableTuple
}


func ꞋbifoldableJoker() Any {
    return func(dictFoldable Any) Any {
        var foldr Any = Apply(Data_Foldable.Ꞌfoldr(), dictFoldable)
        var foldl Any = Apply(Data_Foldable.Ꞌfoldl(), dictFoldable)
        var foldMap Any = Apply(Data_Foldable.ꞋfoldMap(), dictFoldable)
        return Dict{"bifoldr": func(v Any) Any {
                return func(r Any) Any {
                    return func(u Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldr, r, u, v1)
                        }
                    }
                }
            }, "bifoldl": func(v Any) Any {
                return func(r Any) Any {
                    return func(u Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldl, r, u, v1)
                        }
                    }
                }
            }, "bifoldMap": func(dictMonoid Any) Any {
                var foldMap1 Any = Apply(foldMap, dictMonoid)
                return func(v Any) Any {
                    return func(r Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldMap1, r, v1)
                        }
                    }
                }
            },}
    }
}

var ᛌbifoldableEither_once Once
var ᛧbifoldableEither Any

func ꞋbifoldableEither() Any {
    ᛌbifoldableEither_once.Do(func() {
        ᛧbifoldableEither = Dict{"bifoldr": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return func(v3 Any) Any {
                        if Is(v3, "Left") {
                            return Apply(v, v3.(Dict)["value0"], v2)
                        }
                        if Is(v3, "Right") {
                            return Apply(v1, v3.(Dict)["value0"], v2)
                        }
                        panic("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32)")
                    }
                }
            }
        }, "bifoldl": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return func(v3 Any) Any {
                        if Is(v3, "Left") {
                            return Apply(v, v2, v3.(Dict)["value0"])
                        }
                        if Is(v3, "Right") {
                            return Apply(v1, v2, v3.(Dict)["value0"])
                        }
                        panic("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32)")
                    }
                }
            }
        }, "bifoldMap": func(dictMonoid Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(v2 Any) Any {
                        if Is(v2, "Left") {
                            return Apply(v, v2.(Dict)["value0"])
                        }
                        if Is(v2, "Right") {
                            return Apply(v1, v2.(Dict)["value0"])
                        }
                        panic("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32)")
                    }
                }
            }
        },}
    })
return ᛧbifoldableEither
}



var ᛌbifoldableConst_once Once
var ᛧbifoldableConst Any

func ꞋbifoldableConst() Any {
    ᛌbifoldableConst_once.Do(func() {
        ᛧbifoldableConst = Dict{"bifoldr": func(f Any) Any {
            return func(v Any) Any {
                return func(z Any) Any {
                    return func(v1 Any) Any {
                        return Apply(f, v1, z)
                    }
                }
            }
        }, "bifoldl": func(f Any) Any {
            return func(v Any) Any {
                return func(z Any) Any {
                    return func(v1 Any) Any {
                        return Apply(f, z, v1)
                    }
                }
            }
        }, "bifoldMap": func(dictMonoid Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(f, v1)
                    }
                }
            }
        },}
    })
return ᛧbifoldableConst
}


func ꞋbifoldableClown() Any {
    return func(dictFoldable Any) Any {
        var foldr Any = Apply(Data_Foldable.Ꞌfoldr(), dictFoldable)
        var foldl Any = Apply(Data_Foldable.Ꞌfoldl(), dictFoldable)
        var foldMap Any = Apply(Data_Foldable.ꞋfoldMap(), dictFoldable)
        return Dict{"bifoldr": func(l Any) Any {
                return func(v Any) Any {
                    return func(u Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldr, l, u, v1)
                        }
                    }
                }
            }, "bifoldl": func(l Any) Any {
                return func(v Any) Any {
                    return func(u Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldl, l, u, v1)
                        }
                    }
                }
            }, "bifoldMap": func(dictMonoid Any) Any {
                var foldMap1 Any = Apply(foldMap, dictMonoid)
                return func(l Any) Any {
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            return Apply(foldMap1, l, v1)
                        }
                    }
                }
            },}
    }
}
func ꞋbifoldMapDefaultR() Any {
    return func(dictBifoldable Any) Any {
        var bifoldr1 Any = Apply(Ꞌbifoldr(), dictBifoldable)
        return func(dictMonoid Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(f Any) Any {
                return func(g Any) Any {
                    return Apply(bifoldr1, Apply(Ꞌcompose(), append, f), Apply(Ꞌcompose(), append, g), mempty)
                }
            }
        }
    }
}
func ꞋbifoldMapDefaultL() Any {
    return func(dictBifoldable Any) Any {
        var bifoldl1 Any = Apply(Ꞌbifoldl(), dictBifoldable)
        return func(dictMonoid Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(f Any) Any {
                return func(g Any) Any {
                    return Apply(bifoldl1, func(m Any) Any {
                        return func(a Any) Any {
                            return Apply(append, m, Apply(f, a))
                        }
                    }, func(m Any) Any {
                        return func(b Any) Any {
                            return Apply(append, m, Apply(g, b))
                        }
                    }, mempty)
                }
            }
        }
    }
}
func ꞋbifoldMap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bifoldMap"]
    }
}
func ꞋbifoldableFlip() Any {
    return func(dictBifoldable Any) Any {
        var bifoldr1 Any = Apply(Ꞌbifoldr(), dictBifoldable)
        var bifoldl1 Any = Apply(Ꞌbifoldl(), dictBifoldable)
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable)
        return Dict{"bifoldr": func(r Any) Any {
                return func(l Any) Any {
                    return func(u Any) Any {
                        return func(v Any) Any {
                            return Apply(bifoldr1, l, r, u, v)
                        }
                    }
                }
            }, "bifoldl": func(r Any) Any {
                return func(l Any) Any {
                    return func(u Any) Any {
                        return func(v Any) Any {
                            return Apply(bifoldl1, l, r, u, v)
                        }
                    }
                }
            }, "bifoldMap": func(dictMonoid Any) Any {
                var bifoldMap2 Any = Apply(bifoldMap1, dictMonoid)
                return func(r Any) Any {
                    return func(l Any) Any {
                        return func(v Any) Any {
                            return Apply(bifoldMap2, l, r, v)
                        }
                    }
                }
            },}
    }
}
func ꞋbifoldlDefault() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable, ꞋmonoidDual())
        return func(f Any) Any {
            return func(g Any) Any {
                return func(z Any) Any {
                    return func(p Any) Any {
                        return Apply(Ꞌunwrap(), Apply(Ꞌunwrap(), Apply(bifoldMap1, Apply(Ꞌcompose(), Data_Monoid_Dual.ꞋDual(), Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), Apply(Data_Function.Ꞌflip(), f))), Apply(Ꞌcompose(), Data_Monoid_Dual.ꞋDual(), Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), Apply(Data_Function.Ꞌflip(), g))), p)), z)
                    }
                }
            }
        }
    }
}
func ꞋbifoldrDefault() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable, ꞋmonoidEndo())
        return func(f Any) Any {
            return func(g Any) Any {
                return func(z Any) Any {
                    return func(p Any) Any {
                        return Apply(Ꞌunwrap(), Apply(bifoldMap1, Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), f), Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), g), p), z)
                    }
                }
            }
        }
    }
}
func ꞋbifoldableProduct2() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable)
        return func(dictBifoldable1 Any) Any {
            var bifoldMap2 Any = Apply(ꞋbifoldMap(), dictBifoldable1)
            return Dict{"bifoldr": func(l Any) Any {
                    return func(r Any) Any {
                        return func(u Any) Any {
                            return func(m Any) Any {
                                return Apply(ꞋbifoldrDefault(), Apply(ꞋbifoldableProduct2(), dictBifoldable, dictBifoldable1), l, r, u, m)
                            }
                        }
                    }
                }, "bifoldl": func(l Any) Any {
                    return func(r Any) Any {
                        return func(u Any) Any {
                            return func(m Any) Any {
                                return Apply(ꞋbifoldlDefault(), Apply(ꞋbifoldableProduct2(), dictBifoldable, dictBifoldable1), l, r, u, m)
                            }
                        }
                    }
                }, "bifoldMap": func(dictMonoid Any) Any {
                    var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
                    var bifoldMap3 Any = Apply(bifoldMap1, dictMonoid)
                    var bifoldMap4 Any = Apply(bifoldMap2, dictMonoid)
                    return func(l Any) Any {
                        return func(r Any) Any {
                            return func(v Any) Any {
                                return Apply(append, Apply(bifoldMap3, l, r, v.(Dict)["value0"]), Apply(bifoldMap4, l, r, v.(Dict)["value1"]))
                            }
                        }
                    }
                },}
        }
    }
}
func Ꞌbifold() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable)
        return func(dictMonoid Any) Any {
            return Apply(bifoldMap1, dictMonoid, Ꞌidentity(), Ꞌidentity())
        }
    }
}
func Ꞌbiany() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable)
        return func(dictBooleanAlgebra Any) Any {
            var bifoldMap2 Any = Apply(bifoldMap1, Apply(Data_Monoid_Disj.ꞋmonoidDisj(), Apply(dictBooleanAlgebra.(Dict)["HeytingAlgebra0"], Undefined)))
            return func(p Any) Any {
                return func(q Any) Any {
                    return Apply(Ꞌcompose(), Ꞌunwrap(), Apply(bifoldMap2, Apply(Ꞌcompose(), Data_Monoid_Disj.ꞋDisj(), p), Apply(Ꞌcompose(), Data_Monoid_Disj.ꞋDisj(), q)))
                }
            }
        }
    }
}
func Ꞌbiall() Any {
    return func(dictBifoldable Any) Any {
        var bifoldMap1 Any = Apply(ꞋbifoldMap(), dictBifoldable)
        return func(dictBooleanAlgebra Any) Any {
            var bifoldMap2 Any = Apply(bifoldMap1, Apply(Data_Monoid_Conj.ꞋmonoidConj(), Apply(dictBooleanAlgebra.(Dict)["HeytingAlgebra0"], Undefined)))
            return func(p Any) Any {
                return func(q Any) Any {
                    return Apply(Ꞌcompose(), Ꞌunwrap(), Apply(bifoldMap2, Apply(Ꞌcompose(), Data_Monoid_Conj.ꞋConj(), p), Apply(Ꞌcompose(), Data_Monoid_Conj.ꞋConj(), q)))
                }
            }
        }
    }
}



