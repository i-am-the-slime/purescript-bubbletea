// Code generated by psgo. DO NOT EDIT.

package Data_Ring

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋsemiringRecord() Any {
    return Apply(Data_Semiring.ꞋsemiringRecord(), Undefined)
}
func ꞋRingRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋRing_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋsubRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["subRecord"]
    }
}
func Ꞌsub() Any {
    return func(dict Any) Any {
        return dict.(Dict)["sub"]
    }
}

var ᛌringUnit_once Once
var ᛧringUnit Any

func ꞋringUnit() Any {
    ᛌringUnit_once.Do(func() {
        ᛧringUnit = Dict{"sub": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "Semiring0": func(_ Any) Any {
            return Data_Semiring.ꞋsemiringUnit()
        },}
    })
return ᛧringUnit
}



var ᛌringRecordNil_once Once
var ᛧringRecordNil Any

func ꞋringRecordNil() Any {
    ᛌringRecordNil_once.Do(func() {
        ᛧringRecordNil = Dict{"subRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "SemiringRecord0": func(_ Any) Any {
            return Data_Semiring.ꞋsemiringRecordNil()
        },}
    })
return ᛧringRecordNil
}


func ꞋringRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        var semiringRecordCons Any = Apply(Data_Semiring.ꞋsemiringRecordCons(), dictIsSymbol, Undefined)
        return func(_ Any) Any {
            return func(dictRingRecord Any) Any {
                var subRecord1 Any = Apply(ꞋsubRecord(), dictRingRecord)
                var semiringRecordCons1 Any = Apply(semiringRecordCons, Apply(dictRingRecord.(Dict)["SemiringRecord0"], Undefined))
                return func(dictRing Any) Any {
                    var sub1 Any = Apply(Ꞌsub(), dictRing)
                    var semiringRecordCons2 Any = Apply(semiringRecordCons1, Apply(dictRing.(Dict)["Semiring0"], Undefined))
                    return Dict{"subRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(subRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(sub1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "SemiringRecord0": func(_ Any) Any {
                            return semiringRecordCons2
                        },}
                }
            }
        }
    }
}
func ꞋringRecord() Any {
    return func(_ Any) Any {
        return func(dictRingRecord Any) Any {
            var semiringRecord1 Any = Apply(ꞋsemiringRecord(), Apply(dictRingRecord.(Dict)["SemiringRecord0"], Undefined))
            return Dict{"sub": Apply(ꞋsubRecord(), dictRingRecord, Type_Proxy.ꞋProxy()), "Semiring0": func(_ Any) Any {
                    return semiringRecord1
                },}
        }
    }
}

var ᛌringProxy_once Once
var ᛧringProxy Any

func ꞋringProxy() Any {
    ᛌringProxy_once.Do(func() {
        ᛧringProxy = Dict{"sub": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "Semiring0": func(_ Any) Any {
            return Data_Semiring.ꞋsemiringProxy()
        },}
    })
return ᛧringProxy
}



var ᛌringNumber_once Once
var ᛧringNumber Any

func ꞋringNumber() Any {
    ᛌringNumber_once.Do(func() {
        ᛧringNumber = Dict{"sub": ꞋnumSub(), "Semiring0": func(_ Any) Any {
            return Data_Semiring.ꞋsemiringNumber()
        },}
    })
return ᛧringNumber
}



var ᛌringInt_once Once
var ᛧringInt Any

func ꞋringInt() Any {
    ᛌringInt_once.Do(func() {
        ᛧringInt = Dict{"sub": ꞋintSub(), "Semiring0": func(_ Any) Any {
            return Data_Semiring.ꞋsemiringInt()
        },}
    })
return ᛧringInt
}


func ꞋringFn() Any {
    return func(dictRing Any) Any {
        var sub1 Any = Apply(Ꞌsub(), dictRing)
        var semiringFn Any = Apply(Data_Semiring.ꞋsemiringFn(), Apply(dictRing.(Dict)["Semiring0"], Undefined))
        return Dict{"sub": func(f Any) Any {
                return func(g Any) Any {
                    return func(x Any) Any {
                        return Apply(sub1, Apply(f, x), Apply(g, x))
                    }
                }
            }, "Semiring0": func(_ Any) Any {
                return semiringFn
            },}
    }
}
func Ꞌnegate() Any {
    return func(dictRing Any) Any {
        var sub1 Any = Apply(Ꞌsub(), dictRing)
        var zero Any = Apply(Data_Semiring.Ꞌzero(), Apply(dictRing.(Dict)["Semiring0"], Undefined))
        return func(a Any) Any {
            return Apply(sub1, zero, a)
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Ring")

var ᛌintSub_once Once
var ᛧintSub Any

func ꞋintSub() Any { 
    ᛌintSub_once.Do(func() {
        ᛧintSub = Get(foreign, "intSub")
    })
    return ᛧintSub
}

var ᛌnumSub_once Once
var ᛧnumSub Any

func ꞋnumSub() Any { 
    ᛌnumSub_once.Do(func() {
        ᛧnumSub = Get(foreign, "numSub")
    })
    return ᛧnumSub
}


