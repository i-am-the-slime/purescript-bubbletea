// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup_Last

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋLast() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowLast() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Last ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌsemigroupLast_once Once
var ᛧsemigroupLast Any

func ꞋsemigroupLast() Any {
    ᛌsemigroupLast_once.Do(func() {
        ᛧsemigroupLast = Dict{"append": func(v Any) Any {
            return func(x Any) Any {
                return x
            }
        },}
    })
return ᛧsemigroupLast
}


func ꞋordLast() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌfunctorLast_once Once
var ᛧfunctorLast Any

func ꞋfunctorLast() Any {
    ᛌfunctorLast_once.Do(func() {
        ᛧfunctorLast = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorLast
}


func ꞋeqLast() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Last_once Once
var ᛧeq1Last Any

func Ꞌeq1Last() Any {
    ᛌeq1Last_once.Do(func() {
        ᛧeq1Last = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqLast(), dictEq))
        },}
    })
return ᛧeq1Last
}



var ᛌord1Last_once Once
var ᛧord1Last Any

func Ꞌord1Last() Any {
    ᛌord1Last_once.Do(func() {
        ᛧord1Last = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordLast(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Last()
        },}
    })
return ᛧord1Last
}


func ꞋboundedLast() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyLast_once Once
var ᛧapplyLast Any

func ꞋapplyLast() Any {
    ᛌapplyLast_once.Do(func() {
        ᛧapplyLast = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorLast()
        },}
    })
return ᛧapplyLast
}



var ᛌbindLast_once Once
var ᛧbindLast Any

func ꞋbindLast() Any {
    ᛌbindLast_once.Do(func() {
        ᛧbindLast = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyLast()
        },}
    })
return ᛧbindLast
}



var ᛌapplicativeLast_once Once
var ᛧapplicativeLast Any

func ꞋapplicativeLast() Any {
    ᛌapplicativeLast_once.Do(func() {
        ᛧapplicativeLast = Dict{"pure": ꞋLast(), "Apply0": func(_ Any) Any {
            return ꞋapplyLast()
        },}
    })
return ᛧapplicativeLast
}



var ᛌmonadLast_once Once
var ᛧmonadLast Any

func ꞋmonadLast() Any {
    ᛌmonadLast_once.Do(func() {
        ᛧmonadLast = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeLast()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindLast()
        },}
    })
return ᛧmonadLast
}





