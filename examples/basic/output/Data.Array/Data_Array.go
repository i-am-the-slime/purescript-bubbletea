// Code generated by psgo. DO NOT EDIT.

package Data_Array

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Control.Monad.ST.Internal"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Function.Uncurried"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Array.ST"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Unfoldable"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Data.FunctorWithIndex"
	"project.localhost/purescript-native/output/Data.Array.ST.Iterator"
	"project.localhost/purescript-native/output/Control.Monad.Rec.Class"
	"project.localhost/purescript-native/output/Control.Lazy"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Control.Category"
)

type _ = Any

func Ꞌsequence() Any {
    return Apply(Data_Traversable.Ꞌsequence(), Data_Traversable.ꞋtraversableArray())
}
func Ꞌtraverse_() Any {
    return Apply(Data_Foldable.Ꞌtraverse_(), Control_Monad_ST_Internal.ꞋapplicativeST())
}
func ꞋlessThan() Any {
    return Apply(Data_Ord.ꞋlessThan(), Data_Ord.ꞋordInt())
}
func Ꞌadd() Any {
    return Apply(Data_Semiring.Ꞌadd(), Data_Semiring.ꞋsemiringInt())
}
func Ꞌnegate() Any {
    return Apply(Data_Ring.Ꞌnegate(), Data_Ring.ꞋringInt())
}
func ꞋlessThanOrEq() Any {
    return Apply(Data_Ord.ꞋlessThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌeq() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Eq.ꞋeqInt())
}
func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Control_Monad_ST_Internal.ꞋbindST())
}
func Ꞌdiscard() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit(), Control_Monad_ST_Internal.ꞋbindST())
}
func Ꞌvoid() Any {
    return Apply(Data_Functor.Ꞌvoid(), Control_Monad_ST_Internal.ꞋfunctorST())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), Control_Monad_ST_Internal.ꞋapplicativeST())
}
func Ꞌintercalate1() Any {
    return Apply(Data_Foldable.Ꞌintercalate(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌzero() Any {
    return Apply(Data_Semiring.Ꞌzero(), Data_Semiring.ꞋsemiringInt())
}
func Ꞌsub() Any {
    return Apply(Data_Ring.Ꞌsub(), Data_Ring.ꞋringInt())
}
func Ꞌone() Any {
    return Apply(Data_Semiring.Ꞌone(), Data_Semiring.ꞋsemiringInt())
}
func Ꞌapply() Any {
    return Apply(Control_Apply.Ꞌapply(), Data_Maybe.ꞋapplyMaybe())
}
func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe.ꞋfunctorMaybe())
}
func Ꞌmap1() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Functor.ꞋfunctorArray())
}
func Ꞌmap2() Any {
    return Apply(Data_Functor.Ꞌmap(), Control_Monad_ST_Internal.ꞋfunctorST())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋfromJust() Any {
    return Apply(Data_Maybe.ꞋfromJust(), Undefined)
}
func Ꞌwhen() Any {
    return Apply(Control_Applicative.Ꞌwhen(), Control_Monad_ST_Internal.ꞋapplicativeST())
}
func ꞋnotEq() Any {
    return Apply(Data_Eq.ꞋnotEq(), Data_Ordering.ꞋeqOrdering())
}
func Ꞌeq1() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Ordering.ꞋeqOrdering())
}
func ꞋgreaterThanOrEq() Any {
    return Apply(Data_Ord.ꞋgreaterThanOrEq(), Data_Ord.ꞋordInt())
}
func ꞋfoldMap1() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌfold1() Any {
    return Apply(Data_Foldable.Ꞌfold(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupArray())
}
func ꞋcomposeFlipped() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌtraverse() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableArray())
}
func Ꞌnot() Any {
    return Apply(Data_HeytingAlgebra.Ꞌnot(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋzipWith() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋzipWithImpl())
}
func ꞋzipWithA() Any {
    return func(dictApplicative Any) Any {
        var sequence1 Any = Apply(Ꞌsequence(), dictApplicative)
        return func(f Any) Any {
            return func(xs Any) Any {
                return func(ys Any) Any {
                    return Apply(sequence1, Apply(ꞋzipWith(), f, xs, ys))
                }
            }
        }
    }
}
func Ꞌzip() Any {
    return Apply(ꞋzipWith(), Data_Tuple.ꞋTuple())
}
func ꞋupdateAtIndices() Any {
    return func(dictFoldable Any) Any {
        var traverse_1 Any = Apply(Ꞌtraverse_(), dictFoldable)
        return func(us Any) Any {
            return func(xs Any) Any {
                return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Data_Array_ST.ꞋwithArray(), func(res Any) Any {
                    return Apply(traverse_1, func(v Any) Any {
                        return Apply(Data_Array_ST.Ꞌpoke(), v.(Dict)["value0"], v.(Dict)["value1"], res)
                    }, us)
                }, xs))
            }
        }
    }
}
func ꞋupdateAt() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn5(), Ꞌ_updateAt(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func ꞋunsafeIndex() Any {
    return func(_ Any) Any {
        return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋunsafeIndexImpl())
    }
}
func ꞋunsafeIndex1() Any {
    return Apply(ꞋunsafeIndex(), Undefined)
}
func Ꞌuncons() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋunconsImpl(), Apply(Data_Function.Ꞌconst(), Data_Maybe.ꞋNothing()), func(x Any) Any {
        return func(xs Any) Any {
            return Apply(Data_Maybe.ꞋJust(), Dict{"head": x, "tail": xs,})
        }
    })
}
func ꞋtoUnfoldable() Any {
    return func(dictUnfoldable Any) Any {
        var unfoldr Any = Apply(Data_Unfoldable.Ꞌunfoldr(), dictUnfoldable)
        return func(xs Any) Any {
            var len Any = Apply(Ꞌlength(), xs)
            var f Any = func(i Any) Any {
                if Apply(ꞋlessThan(), i, len) == true {
                    return Apply(Data_Maybe.ꞋJust(), Apply(Data_Tuple.ꞋTuple(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                        return Apply(ꞋunsafeIndex1(), xs, i)
                    }), Apply(Ꞌadd(), i, 1)))
                }
                return Data_Maybe.ꞋNothing()
            }
            return Apply(unfoldr, f, 0)
        }
    }
}
func Ꞌtail() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋunconsImpl(), Apply(Data_Function.Ꞌconst(), Data_Maybe.ꞋNothing()), func(v Any) Any {
        return func(xs Any) Any {
            return Apply(Data_Maybe.ꞋJust(), xs)
        }
    })
}
func ꞋsortBy() Any {
    return func(comp Any) Any {
        return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋsortByImpl(), comp, func(v Any) Any {
            if Is(v, "GT") {
                return 1
            }
            if Is(v, "EQ") {
                return 0
            }
            if Is(v, "LT") {
                return Apply(Ꞌnegate(), 1)
            }
            panic("Failed pattern match at Data.Array (line 897, column 38 - line 900, column 11)")
        })
    }
}
func ꞋsortWith() Any {
    return func(dictOrd Any) Any {
        var comparing Any = Apply(Data_Ord.Ꞌcomparing(), dictOrd)
        return func(f Any) Any {
            return Apply(ꞋsortBy(), Apply(comparing, f))
        }
    }
}
func ꞋsortWith1() Any {
    return Apply(ꞋsortWith(), Data_Ord.ꞋordInt())
}
func Ꞌsort() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        return func(xs Any) Any {
            return Apply(ꞋsortBy(), compare, xs)
        }
    }
}
func Ꞌsnoc() Any {
    return func(xs Any) Any {
        return func(x Any) Any {
            return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Data_Array_ST.ꞋwithArray(), Apply(Data_Array_ST.Ꞌpush(), x), xs))
        }
    }
}
func Ꞌslice() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋsliceImpl())
}
func ꞋsplitAt() Any {
    return func(v Any) Any {
        return func(v1 Any) Any {
            if Apply(ꞋlessThanOrEq(), v, 0) == true {
                return Dict{"before": []Any{}, "after": v1,}
            }
            return Dict{"before": Apply(Ꞌslice(), 0, v, v1), "after": Apply(Ꞌslice(), v, Apply(Ꞌlength(), v1), v1),}
        }
    }
}
func Ꞌtake() Any {
    return func(n Any) Any {
        return func(xs Any) Any {
            var ṩ12 Any = Apply(ꞋlessThan(), n, 1)
            if ṩ12 == true {
                return []Any{}
            }
            return Apply(Ꞌslice(), 0, n, xs)
        }
    }
}
func Ꞌsingleton() Any {
    return func(a Any) Any {
        return []Any{a}
    }
}
func Ꞌscanr() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋscanrImpl())
}
func Ꞌscanl() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋscanlImpl())
}
func Ꞌreplicate() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋreplicateImpl())
}
func Ꞌrange() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋrangeImpl())
}
func Ꞌpartition() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋpartitionImpl())
}
func Ꞌnull() Any {
    return func(xs Any) Any {
        return Apply(Ꞌeq(), Apply(Ꞌlength(), xs), 0)
    }
}
func ꞋmodifyAtIndices() Any {
    return func(dictFoldable Any) Any {
        var traverse_1 Any = Apply(Ꞌtraverse_(), dictFoldable)
        return func(is Any) Any {
            return func(f Any) Any {
                return func(xs Any) Any {
                    return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Data_Array_ST.ꞋwithArray(), func(res Any) Any {
                        return Apply(traverse_1, func(i Any) Any {
                            return Apply(Data_Array_ST.Ꞌmodify(), i, f, res)
                        }, is)
                    }, xs))
                }
            }
        }
    }
}
func ꞋmapWithIndex() Any {
    return Apply(Data_FunctorWithIndex.ꞋmapWithIndex(), Data_FunctorWithIndex.ꞋfunctorWithIndexArray())
}
func Ꞌintersperse() Any {
    return func(a Any) Any {
        return func(arr Any) Any {
            var v Any = Apply(Ꞌlength(), arr)
            if Apply(ꞋlessThan(), v, 2) == true {
                return arr
            }
            return Apply(Data_Array_ST.Ꞌrun(), Run(func() Any {
                var unsafeGetElem Any = func(idx Any) Any {
                    return Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                        return Apply(ꞋunsafeIndex1(), arr, idx)
                    })
                }
                return Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(out Any) Any {
                    return Apply(Ꞌbind(), Apply(Data_Array_ST.Ꞌpush(), Apply(unsafeGetElem, 0), out), func(_ Any) Any {
                        return Apply(Ꞌdiscard(), Apply(Control_Monad_ST_Internal.Ꞌfor(), 1, v, func(idx Any) Any {
                            return Apply(Ꞌbind(), Apply(Data_Array_ST.Ꞌpush(), a, out), func(_ Any) Any {
                                return Apply(Ꞌvoid(), Apply(Data_Array_ST.Ꞌpush(), Apply(unsafeGetElem, idx), out))
                            })
                        }), func(_ Any) Any {
                            return Apply(Ꞌpure(), out)
                        })
                    })
                })
            }))
        }
    }
}
func Ꞌintercalate() Any {
    return func(dictMonoid Any) Any {
        return Apply(Ꞌintercalate1(), dictMonoid)
    }
}
func ꞋinsertAt() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn5(), Ꞌ_insertAt(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌinit() Any {
    return func(xs Any) Any {
        if Apply(Ꞌnull(), xs) == true {
            return Data_Maybe.ꞋNothing()
        }
        return Apply(Data_Maybe.ꞋJust(), Apply(Ꞌslice(), Ꞌzero(), Apply(Ꞌsub(), Apply(Ꞌlength(), xs), Ꞌone()), xs))
    }
}
func Ꞌindex() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn4(), ꞋindexImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌlast() Any {
    return func(xs Any) Any {
        return Apply(Ꞌindex(), xs, Apply(Ꞌsub(), Apply(Ꞌlength(), xs), 1))
    }
}
func Ꞌunsnoc() Any {
    return func(xs Any) Any {
        return Apply(Ꞌapply(), Apply(Ꞌmap(), func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{"init": v, "last": v1,}
            }
        }, Apply(Ꞌinit(), xs)), Apply(Ꞌlast(), xs))
    }
}
func ꞋmodifyAt() Any {
    return func(i Any) Any {
        return func(f Any) Any {
            return func(xs Any) Any {
                var ˉgo Any = func(x Any) Any {
                    return Apply(ꞋupdateAt(), i, Apply(f, x), xs)
                }
                return Apply(Data_Maybe.Ꞌmaybe(), Data_Maybe.ꞋNothing(), ˉgo, Apply(Ꞌindex(), xs, i))
            }
        }
    }
}
func Ꞌspan() Any {
    return func(p Any) Any {
        return func(arr Any) Any {
            var ˉgo Any
            ˉgo = func(ṩcopy_i Any) Any {
                var ṩtco_done = false
                var ṩtco_result Any
                var ṩtco_loop = func(i Any) Any {
                    var v Any = Apply(Ꞌindex(), arr, i)
                    if Is(v, "Just") {
                        var ṩ16 Any = Apply(p, v.(Dict)["value0"])
                        if ṩ16 == true {
                            ṩcopy_i = Apply(Ꞌadd(), i, 1)
                            return Undefined
                        }
                        ṩtco_done = true
                        return Apply(Data_Maybe.ꞋJust(), i)
                    }
                    if Is(v, "Nothing") {
                        ṩtco_done = true
                        return Data_Maybe.ꞋNothing()
                    }
                    panic("Failed pattern match at Data.Array (line 1035, column 5 - line 1037, column 25)")
                }
                for !ṩtco_done {
                    ṩtco_result = ṩtco_loop(ṩcopy_i)
                }
                return ṩtco_result
            }
            var breakIndex Any = Apply(ˉgo, 0)
            if Is(breakIndex, "Just") && breakIndex.(Dict)["value0"] == 0 {
                return Dict{"init": []Any{}, "rest": arr,}
            }
            if Is(breakIndex, "Just") {
                return Dict{"init": Apply(Ꞌslice(), 0, breakIndex.(Dict)["value0"], arr), "rest": Apply(Ꞌslice(), breakIndex.(Dict)["value0"], Apply(Ꞌlength(), arr), arr),}
            }
            if Is(breakIndex, "Nothing") {
                return Dict{"init": arr, "rest": []Any{},}
            }
            panic("Failed pattern match at Data.Array (line 1022, column 3 - line 1028, column 30)")
        }
    }
}
func ꞋtakeWhile() Any {
    return func(p Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌspan(), p, xs).(Dict)["init"]
        }
    }
}
func Ꞌunzip() Any {
    return func(xs Any) Any {
        return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(fsts Any) Any {
            return Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(snds Any) Any {
                return Apply(Ꞌbind(), Apply(Data_Array_ST_Iterator.Ꞌiterator(), func(v Any) Any {
                    return Apply(Ꞌindex(), xs, v)
                }), func(iter Any) Any {
                    return Apply(Ꞌdiscard(), Apply(Data_Array_ST_Iterator.Ꞌiterate(), iter, func(v Any) Any {
                        return Apply(Ꞌdiscard(), Apply(Ꞌvoid(), Apply(Data_Array_ST.Ꞌpush(), v.(Dict)["value0"], fsts)), func(_ Any) Any {
                            return Apply(Ꞌvoid(), Apply(Data_Array_ST.Ꞌpush(), v.(Dict)["value1"], snds))
                        })
                    }), func(_ Any) Any {
                        return Apply(Ꞌbind(), Apply(Data_Array_ST.ꞋunsafeFreeze(), fsts), func(fstsꞌ Any) Any {
                            return Apply(Ꞌbind(), Apply(Data_Array_ST.ꞋunsafeFreeze(), snds), func(sndsꞌ Any) Any {
                                return Apply(Ꞌpure(), Apply(Data_Tuple.ꞋTuple(), fstsꞌ, sndsꞌ))
                            })
                        })
                    })
                })
            })
        }))
    }
}
func Ꞌhead() Any {
    return func(xs Any) Any {
        return Apply(Ꞌindex(), xs, 0)
    }
}
func ꞋnubBy() Any {
    return func(comp Any) Any {
        return func(xs Any) Any {
            var indexedAndSorted Any = Apply(ꞋsortBy(), func(x Any) Any {
                return func(y Any) Any {
                    return Apply(comp, Apply(Data_Tuple.Ꞌsnd(), x), Apply(Data_Tuple.Ꞌsnd(), y))
                }
            }, Apply(ꞋmapWithIndex(), Data_Tuple.ꞋTuple(), xs))
            var v Any = Apply(Ꞌhead(), indexedAndSorted)
            if Is(v, "Nothing") {
                return []Any{}
            }
            if Is(v, "Just") {
                return Apply(Ꞌmap1(), Data_Tuple.Ꞌsnd(), Apply(ꞋsortWith1(), Data_Tuple.Ꞌfst(), Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Ꞌbind(), Apply(Data_Array_ST.ꞋunsafeThaw(), Apply(Ꞌsingleton(), v.(Dict)["value0"])), func(result Any) Any {
                    return Apply(Ꞌdiscard(), Apply(Control_Monad_ST_Internal.Ꞌforeach(), indexedAndSorted, func(v1 Any) Any {
                        return Apply(Ꞌbind(), Apply(Ꞌmap2(), Apply(Ꞌcompose(), Data_Tuple.Ꞌsnd(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                            return Apply(Ꞌcompose(), ꞋfromJust(), Ꞌlast())
                        })), Apply(Data_Array_ST.ꞋunsafeFreeze(), result)), func(lst Any) Any {
                            return Apply(Ꞌwhen(), Apply(ꞋnotEq(), Apply(comp, lst, v1.(Dict)["value1"]), Data_Ordering.ꞋEQ()), Apply(Ꞌvoid(), Apply(Data_Array_ST.Ꞌpush(), v1, result)))
                        })
                    }), func(_ Any) Any {
                        return Apply(Data_Array_ST.ꞋunsafeFreeze(), result)
                    })
                }))))
            }
            panic("Failed pattern match at Data.Array (line 1115, column 17 - line 1123, column 28)")
        }
    }
}
func Ꞌnub() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋnubBy(), Apply(Data_Ord.Ꞌcompare(), dictOrd))
    }
}
func ꞋgroupBy() Any {
    return func(op Any) Any {
        return func(xs Any) Any {
            return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(result Any) Any {
                return Apply(Ꞌbind(), Apply(Data_Array_ST_Iterator.Ꞌiterator(), func(v Any) Any {
                    return Apply(Ꞌindex(), xs, v)
                }), func(iter Any) Any {
                    return Apply(Ꞌdiscard(), Apply(Data_Array_ST_Iterator.Ꞌiterate(), iter, func(x Any) Any {
                        return Apply(Ꞌvoid(), Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(sub1 Any) Any {
                            return Apply(Ꞌbind(), Apply(Data_Array_ST.Ꞌpush(), x, sub1), func(_ Any) Any {
                                return Apply(Ꞌdiscard(), Apply(Data_Array_ST_Iterator.ꞋpushWhile(), Apply(op, x), iter, sub1), func(_ Any) Any {
                                    return Apply(Ꞌbind(), Apply(Data_Array_ST.ꞋunsafeFreeze(), sub1), func(grp Any) Any {
                                        return Apply(Data_Array_ST.Ꞌpush(), grp, result)
                                    })
                                })
                            })
                        }))
                    }), func(_ Any) Any {
                        return Apply(Data_Array_ST.ꞋunsafeFreeze(), result)
                    })
                })
            }))
        }
    }
}
func ꞋgroupAllBy() Any {
    return func(cmp Any) Any {
        return Apply(Ꞌcompose(), Apply(ꞋgroupBy(), func(x Any) Any {
            return func(y Any) Any {
                return Apply(Ꞌeq1(), Apply(cmp, x, y), Data_Ordering.ꞋEQ())
            }
        }), Apply(ꞋsortBy(), cmp))
    }
}
func ꞋgroupAll() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋgroupAllBy(), Apply(Data_Ord.Ꞌcompare(), dictOrd))
    }
}
func Ꞌgroup() Any {
    return func(dictEq Any) Any {
        var eq2 Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(xs Any) Any {
            return Apply(ꞋgroupBy(), eq2, xs)
        }
    }
}
func ꞋfromFoldable() Any {
    return func(dictFoldable Any) Any {
        return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋfromFoldableImpl(), Apply(Data_Foldable.Ꞌfoldr(), dictFoldable))
    }
}
func Ꞌfoldr() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌfoldl() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌtranspose() Any {
    return func(xs Any) Any {
        var ˉgo Any
        var buildNext Any = func(idx Any) Any {
            return Apply(Data_Function.Ꞌflip(), Ꞌfoldl(), Data_Maybe.ꞋNothing(), func(acc Any) Any {
                return func(nextArr Any) Any {
                    return Apply(Data_Maybe.Ꞌmaybe(), acc, func(el Any) Any {
                        return Apply(Data_Maybe.ꞋJust(), Apply(Data_Maybe.Ꞌmaybe(), []Any{el}, Apply(Data_Function.Ꞌflip(), Ꞌsnoc(), el), acc))
                    }, Apply(Ꞌindex(), nextArr, idx))
                }
            }, xs)
        }
        ˉgo = func(ṩcopy_idx Any) Any {
            return func(ṩcopy_allArrays Any) Any {
                var ṩtco_var_idx Any = ṩcopy_idx
                var ṩtco_done = false
                var ṩtco_result Any
                var ṩtco_loop = func(idx Any, allArrays Any) Any {
                    var v Any = Apply(buildNext, idx)
                    if Is(v, "Nothing") {
                        ṩtco_done = true
                        return allArrays
                    }
                    if Is(v, "Just") {
                        ṩtco_var_idx = Apply(Ꞌadd(), idx, 1)
                        ṩcopy_allArrays = Apply(Ꞌsnoc(), allArrays, v.(Dict)["value0"])
                        return Undefined
                    }
                    panic("Failed pattern match at Data.Array (line 837, column 22 - line 839, column 52)")
                }
                for !ṩtco_done {
                    ṩtco_result = ṩtco_loop(ṩtco_var_idx, ṩcopy_allArrays)
                }
                return ṩtco_result
            }
        }
        return Apply(ˉgo, 0, []Any{})
    }
}
func ꞋfoldRecM() Any {
    return func(dictMonadRec Any) Any {
        var Monad0 Any = Apply(dictMonadRec.(Dict)["Monad0"], Undefined)
        var pure1 Any = Apply(Control_Applicative.Ꞌpure(), Apply(Monad0.(Dict)["Applicative0"], Undefined))
        var bind1 Any = Apply(Control_Bind.Ꞌbind(), Apply(Monad0.(Dict)["Bind1"], Undefined))
        var tailRecM2 Any = Apply(Control_Monad_Rec_Class.ꞋtailRecM2(), dictMonadRec)
        return func(f Any) Any {
            return func(b Any) Any {
                return func(array Any) Any {
                    var ˉgo Any = func(res Any) Any {
                        return func(i Any) Any {
                            if Apply(ꞋgreaterThanOrEq(), i, Apply(Ꞌlength(), array)) == true {
                                return Apply(pure1, Apply(Control_Monad_Rec_Class.ꞋDone(), res))
                            }
                            return Apply(bind1, Apply(f, res, Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                                return Apply(ꞋunsafeIndex1(), array, i)
                            })), func(resꞌ Any) Any {
                                return Apply(pure1, Apply(Control_Monad_Rec_Class.ꞋLoop(), Dict{"a": resꞌ, "b": Apply(Ꞌadd(), i, 1),}))
                            })
                        }
                    }
                    return Apply(tailRecM2, ˉgo, b, 0)
                }
            }
        }
    }
}
func ꞋfoldMap() Any {
    return func(dictMonoid Any) Any {
        return Apply(ꞋfoldMap1(), dictMonoid)
    }
}
func ꞋfoldM() Any {
    return func(dictMonad Any) Any {
        var pure1 Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        var bind1 Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        return func(f Any) Any {
            return func(b Any) Any {
                return Apply(Data_Function_Uncurried.ꞋrunFn3(), ꞋunconsImpl(), func(v Any) Any {
                    return Apply(pure1, b)
                }, func(a Any) Any {
                    return func(as Any) Any {
                        return Apply(bind1, Apply(f, b, a), func(bꞌ Any) Any {
                            return Apply(ꞋfoldM(), dictMonad, f, bꞌ, as)
                        })
                    }
                })
            }
        }
    }
}
func Ꞌfold() Any {
    return func(dictMonoid Any) Any {
        return Apply(Ꞌfold1(), dictMonoid)
    }
}
func ꞋfindMap() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn4(), ꞋfindMapImpl(), Data_Maybe.ꞋNothing(), Data_Maybe.ꞋisJust())
}
func ꞋfindLastIndex() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn4(), ꞋfindLastIndexImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func ꞋinsertBy() Any {
    return func(cmp Any) Any {
        return func(x Any) Any {
            return func(ys Any) Any {
                var i Any = Apply(Data_Maybe.Ꞌmaybe(), 0, func(v Any) Any {
                    return Apply(Ꞌadd(), v, 1)
                }, Apply(ꞋfindLastIndex(), func(y Any) Any {
                    return Apply(Ꞌeq1(), Apply(cmp, x, y), Data_Ordering.ꞋGT())
                }, ys))
                return Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                    return Apply(ꞋfromJust(), Apply(ꞋinsertAt(), i, x, ys))
                })
            }
        }
    }
}
func Ꞌinsert() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋinsertBy(), Apply(Data_Ord.Ꞌcompare(), dictOrd))
    }
}
func ꞋfindIndex() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn4(), ꞋfindIndexImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌfind() Any {
    return func(f Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌmap(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                return Apply(ꞋunsafeIndex1(), xs)
            }), Apply(ꞋfindIndex(), f, xs))
        }
    }
}
func Ꞌfilter() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋfilterImpl())
}
func ꞋintersectBy() Any {
    return func(eq2 Any) Any {
        return func(xs Any) Any {
            return func(ys Any) Any {
                return Apply(Ꞌfilter(), func(x Any) Any {
                    return Apply(Data_Maybe.ꞋisJust(), Apply(ꞋfindIndex(), Apply(eq2, x), ys))
                }, xs)
            }
        }
    }
}
func Ꞌintersect() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋintersectBy(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func ꞋelemLastIndex() Any {
    return func(dictEq Any) Any {
        var eq2 Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋfindLastIndex(), func(v Any) Any {
                return Apply(eq2, v, x)
            })
        }
    }
}
func ꞋelemIndex() Any {
    return func(dictEq Any) Any {
        var eq2 Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋfindIndex(), func(v Any) Any {
                return Apply(eq2, v, x)
            })
        }
    }
}
func ꞋnotElem() Any {
    return func(dictEq Any) Any {
        var elemIndex1 Any = Apply(ꞋelemIndex(), dictEq)
        return func(a Any) Any {
            return func(arr Any) Any {
                return Apply(Data_Maybe.ꞋisNothing(), Apply(elemIndex1, a, arr))
            }
        }
    }
}
func Ꞌelem() Any {
    return func(dictEq Any) Any {
        var elemIndex1 Any = Apply(ꞋelemIndex(), dictEq)
        return func(a Any) Any {
            return func(arr Any) Any {
                return Apply(Data_Maybe.ꞋisJust(), Apply(elemIndex1, a, arr))
            }
        }
    }
}
func ꞋdropWhile() Any {
    return func(p Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌspan(), p, xs).(Dict)["rest"]
        }
    }
}
func ꞋdropEnd() Any {
    return func(n Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌtake(), Apply(Ꞌsub(), Apply(Ꞌlength(), xs), n), xs)
        }
    }
}
func Ꞌdrop() Any {
    return func(n Any) Any {
        return func(xs Any) Any {
            var ṩ33 Any = Apply(ꞋlessThan(), n, 1)
            if ṩ33 == true {
                return xs
            }
            return Apply(Ꞌslice(), n, Apply(Ꞌlength(), xs), xs)
        }
    }
}
func ꞋtakeEnd() Any {
    return func(n Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌdrop(), Apply(Ꞌsub(), Apply(Ꞌlength(), xs), n), xs)
        }
    }
}
func ꞋdeleteAt() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn4(), Ꞌ_deleteAt(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func ꞋdeleteBy() Any {
    return func(v Any) Any {
        return func(v1 Any) Any {
            return func(v2 Any) Any {
                if Length(v2) == 0 {
                    return []Any{}
                }
                return Apply(Data_Maybe.Ꞌmaybe(), v2, func(i Any) Any {
                    return Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                        return Apply(ꞋfromJust(), Apply(ꞋdeleteAt(), i, v2))
                    })
                }, Apply(ꞋfindIndex(), Apply(v, v1), v2))
            }
        }
    }
}
func Ꞌdelete() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋdeleteBy(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func Ꞌdifference() Any {
    return func(dictEq Any) Any {
        return Apply(Ꞌfoldr(), Apply(Ꞌdelete(), dictEq))
    }
}
func Ꞌcons() Any {
    return func(x Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌappend(), []Any{x}, xs)
        }
    }
}
func Ꞌsome() Any {
    return func(dictAlternative Any) Any {
        var apply1 Any = Apply(Control_Apply.Ꞌapply(), Apply(Apply(dictAlternative.(Dict)["Applicative0"], Undefined).(Dict)["Apply0"], Undefined))
        var map3 Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(Apply(dictAlternative.(Dict)["Plus1"], Undefined).(Dict)["Alt0"], Undefined).(Dict)["Functor0"], Undefined))
        return func(dictLazy Any) Any {
            var ˉdefer Any = Apply(Control_Lazy.Ꞌdefer(), dictLazy)
            return func(v Any) Any {
                return Apply(apply1, Apply(map3, Ꞌcons(), v), Apply(ˉdefer, func(v1 Any) Any {
                    return Apply(Ꞌmany(), dictAlternative, dictLazy, v)
                }))
            }
        }
    }
}
func Ꞌmany() Any {
    return func(dictAlternative Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), Apply(Apply(dictAlternative.(Dict)["Plus1"], Undefined).(Dict)["Alt0"], Undefined))
        var pure1 Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictAlternative.(Dict)["Applicative0"], Undefined))
        return func(dictLazy Any) Any {
            return func(v Any) Any {
                return Apply(alt, Apply(Ꞌsome(), dictAlternative, dictLazy, v), Apply(pure1, []Any{}))
            }
        }
    }
}
func ꞋconcatMap() Any {
    return Apply(Data_Function.Ꞌflip(), Apply(Control_Bind.Ꞌbind(), Control_Bind.ꞋbindArray()))
}
func ꞋmapMaybe() Any {
    return func(f Any) Any {
        return Apply(ꞋconcatMap(), Apply(Ꞌcompose(), Apply(Data_Maybe.Ꞌmaybe(), []Any{}, Ꞌsingleton()), f))
    }
}
func ꞋfilterA() Any {
    return func(dictApplicative Any) Any {
        var traverse1 Any = Apply(Ꞌtraverse(), dictApplicative)
        var map3 Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
        return func(p Any) Any {
            return Apply(ꞋcomposeFlipped(), Apply(traverse1, func(x Any) Any {
                return Apply(map3, Apply(Data_Tuple.ꞋTuple(), x), Apply(p, x))
            }), Apply(map3, Apply(ꞋmapMaybe(), func(v Any) Any {
                if v.(Dict)["value1"] == true {
                    return Apply(Data_Maybe.ꞋJust(), v.(Dict)["value0"])
                }
                return Data_Maybe.ꞋNothing()
            })))
        }
    }
}
func ꞋcatMaybes() Any {
    return Apply(ꞋmapMaybe(), Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn()))
}
func Ꞌany() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋanyImpl())
}
func ꞋnubByEq() Any {
    return func(eq2 Any) Any {
        return func(xs Any) Any {
            return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Ꞌbind(), Data_Array_ST.Ꞌnew(), func(arr Any) Any {
                return Apply(Ꞌdiscard(), Apply(Control_Monad_ST_Internal.Ꞌforeach(), xs, func(x Any) Any {
                    return Apply(Ꞌbind(), Apply(Ꞌmap2(), Apply(Ꞌcompose(), Ꞌnot(), Apply(Ꞌany(), func(v Any) Any {
                        return Apply(eq2, v, x)
                    })), Apply(Data_Array_ST.ꞋunsafeFreeze(), arr)), func(e Any) Any {
                        return Apply(Ꞌwhen(), e, Apply(Ꞌvoid(), Apply(Data_Array_ST.Ꞌpush(), x, arr)))
                    })
                }), func(_ Any) Any {
                    return Apply(Data_Array_ST.ꞋunsafeFreeze(), arr)
                })
            }))
        }
    }
}
func ꞋnubEq() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋnubByEq(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func ꞋunionBy() Any {
    return func(eq2 Any) Any {
        return func(xs Any) Any {
            return func(ys Any) Any {
                return Apply(Ꞌappend(), xs, Apply(Ꞌfoldl(), Apply(Data_Function.Ꞌflip(), Apply(ꞋdeleteBy(), eq2)), Apply(ꞋnubByEq(), eq2, ys), xs))
            }
        }
    }
}
func Ꞌunion() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋunionBy(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func ꞋalterAt() Any {
    return func(i Any) Any {
        return func(f Any) Any {
            return func(xs Any) Any {
                var ˉgo Any = func(x Any) Any {
                    var v Any = Apply(f, x)
                    if Is(v, "Nothing") {
                        return Apply(ꞋdeleteAt(), i, xs)
                    }
                    if Is(v, "Just") {
                        return Apply(ꞋupdateAt(), i, v.(Dict)["value0"], xs)
                    }
                    panic("Failed pattern match at Data.Array (line 601, column 10 - line 603, column 32)")
                }
                return Apply(Data_Maybe.Ꞌmaybe(), Data_Maybe.ꞋNothing(), ˉgo, Apply(Ꞌindex(), xs, i))
            }
        }
    }
}
func Ꞌall() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn2(), ꞋallImpl())
}


// Foreign values

var foreign = Foreign("Data.Array")

var ᛌfromFoldableImpl_once Once
var ᛧfromFoldableImpl Any

func ꞋfromFoldableImpl() Any { 
    ᛌfromFoldableImpl_once.Do(func() {
        ᛧfromFoldableImpl = Get(foreign, "fromFoldableImpl")
    })
    return ᛧfromFoldableImpl
}

var ᛌrangeImpl_once Once
var ᛧrangeImpl Any

func ꞋrangeImpl() Any { 
    ᛌrangeImpl_once.Do(func() {
        ᛧrangeImpl = Get(foreign, "rangeImpl")
    })
    return ᛧrangeImpl
}

var ᛌreplicateImpl_once Once
var ᛧreplicateImpl Any

func ꞋreplicateImpl() Any { 
    ᛌreplicateImpl_once.Do(func() {
        ᛧreplicateImpl = Get(foreign, "replicateImpl")
    })
    return ᛧreplicateImpl
}

var ᛌlength_once Once
var ᛧlength Any

func Ꞌlength() Any { 
    ᛌlength_once.Do(func() {
        ᛧlength = Get(foreign, "length")
    })
    return ᛧlength
}

var ᛌunconsImpl_once Once
var ᛧunconsImpl Any

func ꞋunconsImpl() Any { 
    ᛌunconsImpl_once.Do(func() {
        ᛧunconsImpl = Get(foreign, "unconsImpl")
    })
    return ᛧunconsImpl
}

var ᛌindexImpl_once Once
var ᛧindexImpl Any

func ꞋindexImpl() Any { 
    ᛌindexImpl_once.Do(func() {
        ᛧindexImpl = Get(foreign, "indexImpl")
    })
    return ᛧindexImpl
}

var ᛌfindMapImpl_once Once
var ᛧfindMapImpl Any

func ꞋfindMapImpl() Any { 
    ᛌfindMapImpl_once.Do(func() {
        ᛧfindMapImpl = Get(foreign, "findMapImpl")
    })
    return ᛧfindMapImpl
}

var ᛌfindIndexImpl_once Once
var ᛧfindIndexImpl Any

func ꞋfindIndexImpl() Any { 
    ᛌfindIndexImpl_once.Do(func() {
        ᛧfindIndexImpl = Get(foreign, "findIndexImpl")
    })
    return ᛧfindIndexImpl
}

var ᛌfindLastIndexImpl_once Once
var ᛧfindLastIndexImpl Any

func ꞋfindLastIndexImpl() Any { 
    ᛌfindLastIndexImpl_once.Do(func() {
        ᛧfindLastIndexImpl = Get(foreign, "findLastIndexImpl")
    })
    return ᛧfindLastIndexImpl
}

var ᛌ_insertAt_once Once
var ᛧ_insertAt Any

func Ꞌ_insertAt() Any { 
    ᛌ_insertAt_once.Do(func() {
        ᛧ_insertAt = Get(foreign, "_insertAt")
    })
    return ᛧ_insertAt
}

var ᛌ_deleteAt_once Once
var ᛧ_deleteAt Any

func Ꞌ_deleteAt() Any { 
    ᛌ_deleteAt_once.Do(func() {
        ᛧ_deleteAt = Get(foreign, "_deleteAt")
    })
    return ᛧ_deleteAt
}

var ᛌ_updateAt_once Once
var ᛧ_updateAt Any

func Ꞌ_updateAt() Any { 
    ᛌ_updateAt_once.Do(func() {
        ᛧ_updateAt = Get(foreign, "_updateAt")
    })
    return ᛧ_updateAt
}

var ᛌreverse_once Once
var ᛧreverse Any

func Ꞌreverse() Any { 
    ᛌreverse_once.Do(func() {
        ᛧreverse = Get(foreign, "reverse")
    })
    return ᛧreverse
}

var ᛌconcat_once Once
var ᛧconcat Any

func Ꞌconcat() Any { 
    ᛌconcat_once.Do(func() {
        ᛧconcat = Get(foreign, "concat")
    })
    return ᛧconcat
}

var ᛌfilterImpl_once Once
var ᛧfilterImpl Any

func ꞋfilterImpl() Any { 
    ᛌfilterImpl_once.Do(func() {
        ᛧfilterImpl = Get(foreign, "filterImpl")
    })
    return ᛧfilterImpl
}

var ᛌpartitionImpl_once Once
var ᛧpartitionImpl Any

func ꞋpartitionImpl() Any { 
    ᛌpartitionImpl_once.Do(func() {
        ᛧpartitionImpl = Get(foreign, "partitionImpl")
    })
    return ᛧpartitionImpl
}

var ᛌscanlImpl_once Once
var ᛧscanlImpl Any

func ꞋscanlImpl() Any { 
    ᛌscanlImpl_once.Do(func() {
        ᛧscanlImpl = Get(foreign, "scanlImpl")
    })
    return ᛧscanlImpl
}

var ᛌscanrImpl_once Once
var ᛧscanrImpl Any

func ꞋscanrImpl() Any { 
    ᛌscanrImpl_once.Do(func() {
        ᛧscanrImpl = Get(foreign, "scanrImpl")
    })
    return ᛧscanrImpl
}

var ᛌsortByImpl_once Once
var ᛧsortByImpl Any

func ꞋsortByImpl() Any { 
    ᛌsortByImpl_once.Do(func() {
        ᛧsortByImpl = Get(foreign, "sortByImpl")
    })
    return ᛧsortByImpl
}

var ᛌsliceImpl_once Once
var ᛧsliceImpl Any

func ꞋsliceImpl() Any { 
    ᛌsliceImpl_once.Do(func() {
        ᛧsliceImpl = Get(foreign, "sliceImpl")
    })
    return ᛧsliceImpl
}

var ᛌzipWithImpl_once Once
var ᛧzipWithImpl Any

func ꞋzipWithImpl() Any { 
    ᛌzipWithImpl_once.Do(func() {
        ᛧzipWithImpl = Get(foreign, "zipWithImpl")
    })
    return ᛧzipWithImpl
}

var ᛌanyImpl_once Once
var ᛧanyImpl Any

func ꞋanyImpl() Any { 
    ᛌanyImpl_once.Do(func() {
        ᛧanyImpl = Get(foreign, "anyImpl")
    })
    return ᛧanyImpl
}

var ᛌallImpl_once Once
var ᛧallImpl Any

func ꞋallImpl() Any { 
    ᛌallImpl_once.Do(func() {
        ᛧallImpl = Get(foreign, "allImpl")
    })
    return ᛧallImpl
}

var ᛌunsafeIndexImpl_once Once
var ᛧunsafeIndexImpl Any

func ꞋunsafeIndexImpl() Any { 
    ᛌunsafeIndexImpl_once.Do(func() {
        ᛧunsafeIndexImpl = Get(foreign, "unsafeIndexImpl")
    })
    return ᛧunsafeIndexImpl
}


