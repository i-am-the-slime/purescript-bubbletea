// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Endo

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋEndo() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowEndo() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Endo ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupEndo() Any {
    return func(dictSemigroupoid Any) Any {
        var compose Any = Apply(Control_Semigroupoid.Ꞌcompose(), dictSemigroupoid)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(compose, v, v1)
                }
            },}
    }
}
func ꞋordEndo() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func ꞋmonoidEndo() Any {
    return func(dictCategory Any) Any {
        var semigroupEndo1 Any = Apply(ꞋsemigroupEndo(), Apply(dictCategory.(Dict)["Semigroupoid0"], Undefined))
        return Dict{"mempty": Apply(Control_Category.Ꞌidentity(), dictCategory), "Semigroup0": func(_ Any) Any {
                return semigroupEndo1
            },}
    }
}
func ꞋeqEndo() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋboundedEndo() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}



