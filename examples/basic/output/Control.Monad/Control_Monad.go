// Code generated by psgo. DO NOT EDIT.

package Control_Monad

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Applicative"
)

type _ = Any

func ꞋMonad_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋwhenM() Any {
    return func(dictMonad Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        var when Any = Apply(Control_Applicative.Ꞌwhen(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        return func(mb Any) Any {
            return func(m Any) Any {
                return Apply(bind, mb, func(b Any) Any {
                    return Apply(when, b, m)
                })
            }
        }
    }
}
func ꞋunlessM() Any {
    return func(dictMonad Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        var unless Any = Apply(Control_Applicative.Ꞌunless(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        return func(mb Any) Any {
            return func(m Any) Any {
                return Apply(bind, mb, func(b Any) Any {
                    return Apply(unless, b, m)
                })
            }
        }
    }
}

var ᛌmonadProxy_once Once
var ᛧmonadProxy Any

func ꞋmonadProxy() Any {
    ᛌmonadProxy_once.Do(func() {
        ᛧmonadProxy = Dict{"Applicative0": func(_ Any) Any {
            return Control_Applicative.ꞋapplicativeProxy()
        }, "Bind1": func(_ Any) Any {
            return Control_Bind.ꞋbindProxy()
        },}
    })
return ᛧmonadProxy
}



var ᛌmonadFn_once Once
var ᛧmonadFn Any

func ꞋmonadFn() Any {
    ᛌmonadFn_once.Do(func() {
        ᛧmonadFn = Dict{"Applicative0": func(_ Any) Any {
            return Control_Applicative.ꞋapplicativeFn()
        }, "Bind1": func(_ Any) Any {
            return Control_Bind.ꞋbindFn()
        },}
    })
return ᛧmonadFn
}



var ᛌmonadArray_once Once
var ᛧmonadArray Any

func ꞋmonadArray() Any {
    ᛌmonadArray_once.Do(func() {
        ᛧmonadArray = Dict{"Applicative0": func(_ Any) Any {
            return Control_Applicative.ꞋapplicativeArray()
        }, "Bind1": func(_ Any) Any {
            return Control_Bind.ꞋbindArray()
        },}
    })
return ᛧmonadArray
}


func ꞋliftM1() Any {
    return func(dictMonad Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return Apply(bind, a, func(aꞌ Any) Any {
                    return Apply(pure, Apply(f, aꞌ))
                })
            }
        }
    }
}
func Ꞌap() Any {
    return func(dictMonad Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return Apply(bind, f, func(fꞌ Any) Any {
                    return Apply(bind, a, func(aꞌ Any) Any {
                        return Apply(pure, Apply(fꞌ, aꞌ))
                    })
                })
            }
        }
    }
}



