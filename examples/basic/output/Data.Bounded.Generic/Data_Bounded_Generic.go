// Code generated by psgo. DO NOT EDIT.

package Data_Bounded_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.Bounded"
)

type _ = Any

func ꞋGenericTop_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋGenericBottom_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌgenericTopNoArguments_once Once
var ᛧgenericTopNoArguments Any

func ꞋgenericTopNoArguments() Any {
    ᛌgenericTopNoArguments_once.Do(func() {
        ᛧgenericTopNoArguments = Dict{"genericTop'": Data_Generic_Rep.ꞋNoArguments(),}
    })
return ᛧgenericTopNoArguments
}


func ꞋgenericTopArgument() Any {
    return func(dictBounded Any) Any {
        return Dict{"genericTop'": Apply(Data_Bounded.Ꞌtop(), dictBounded),}
    }
}
func ꞋgenericTopꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericTop'"]
    }
}
func ꞋgenericTopConstructor() Any {
    return func(dictGenericTop Any) Any {
        return Dict{"genericTop'": Apply(ꞋgenericTopꞌ(), dictGenericTop),}
    }
}
func ꞋgenericTopProduct() Any {
    return func(dictGenericTop Any) Any {
        var genericTopꞌ1 Any = Apply(ꞋgenericTopꞌ(), dictGenericTop)
        return func(dictGenericTop1 Any) Any {
            return Dict{"genericTop'": Apply(Data_Generic_Rep.ꞋProduct(), genericTopꞌ1, Apply(ꞋgenericTopꞌ(), dictGenericTop1)),}
        }
    }
}
func ꞋgenericTopSum() Any {
    return func(dictGenericTop Any) Any {
        return Dict{"genericTop'": Apply(Data_Generic_Rep.ꞋInr(), Apply(ꞋgenericTopꞌ(), dictGenericTop)),}
    }
}
func ꞋgenericTop() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericTop Any) Any {
            return Apply(to, Apply(ꞋgenericTopꞌ(), dictGenericTop))
        }
    }
}

var ᛌgenericBottomNoArguments_once Once
var ᛧgenericBottomNoArguments Any

func ꞋgenericBottomNoArguments() Any {
    ᛌgenericBottomNoArguments_once.Do(func() {
        ᛧgenericBottomNoArguments = Dict{"genericBottom'": Data_Generic_Rep.ꞋNoArguments(),}
    })
return ᛧgenericBottomNoArguments
}


func ꞋgenericBottomArgument() Any {
    return func(dictBounded Any) Any {
        return Dict{"genericBottom'": Apply(Data_Bounded.Ꞌbottom(), dictBounded),}
    }
}
func ꞋgenericBottomꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericBottom'"]
    }
}
func ꞋgenericBottomConstructor() Any {
    return func(dictGenericBottom Any) Any {
        return Dict{"genericBottom'": Apply(ꞋgenericBottomꞌ(), dictGenericBottom),}
    }
}
func ꞋgenericBottomProduct() Any {
    return func(dictGenericBottom Any) Any {
        var genericBottomꞌ1 Any = Apply(ꞋgenericBottomꞌ(), dictGenericBottom)
        return func(dictGenericBottom1 Any) Any {
            return Dict{"genericBottom'": Apply(Data_Generic_Rep.ꞋProduct(), genericBottomꞌ1, Apply(ꞋgenericBottomꞌ(), dictGenericBottom1)),}
        }
    }
}
func ꞋgenericBottomSum() Any {
    return func(dictGenericBottom Any) Any {
        return Dict{"genericBottom'": Apply(Data_Generic_Rep.ꞋInl(), Apply(ꞋgenericBottomꞌ(), dictGenericBottom)),}
    }
}
func ꞋgenericBottom() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericBottom Any) Any {
            return Apply(to, Apply(ꞋgenericBottomꞌ(), dictGenericBottom))
        }
    }
}



