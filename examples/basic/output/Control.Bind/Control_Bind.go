// Code generated by psgo. DO NOT EDIT.

package Control_Bind

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋBind_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋDiscard_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌdiscard() Any {
    return func(dict Any) Any {
        return dict.(Dict)["discard"]
    }
}

var ᛌbindProxy_once Once
var ᛧbindProxy Any

func ꞋbindProxy() Any {
    ᛌbindProxy_once.Do(func() {
        ᛧbindProxy = Dict{"bind": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyProxy()
        },}
    })
return ᛧbindProxy
}



var ᛌbindFn_once Once
var ᛧbindFn Any

func ꞋbindFn() Any {
    ᛌbindFn_once.Do(func() {
        ᛧbindFn = Dict{"bind": func(m Any) Any {
            return func(f Any) Any {
                return func(x Any) Any {
                    return Apply(f, Apply(m, x), x)
                }
            }
        }, "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyFn()
        },}
    })
return ᛧbindFn
}



var ᛌbindArray_once Once
var ᛧbindArray Any

func ꞋbindArray() Any {
    ᛌbindArray_once.Do(func() {
        ᛧbindArray = Dict{"bind": ꞋarrayBind(), "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyArray()
        },}
    })
return ᛧbindArray
}


func Ꞌbind() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bind"]
    }
}
func ꞋbindFlipped() Any {
    return func(dictBind Any) Any {
        return Apply(Data_Function.Ꞌflip(), Apply(Ꞌbind(), dictBind))
    }
}
func ꞋcomposeKleisliFlipped() Any {
    return func(dictBind Any) Any {
        var bindFlipped1 Any = Apply(ꞋbindFlipped(), dictBind)
        return func(f Any) Any {
            return func(g Any) Any {
                return func(a Any) Any {
                    return Apply(bindFlipped1, f, Apply(g, a))
                }
            }
        }
    }
}
func ꞋcomposeKleisli() Any {
    return func(dictBind Any) Any {
        var bind1 Any = Apply(Ꞌbind(), dictBind)
        return func(f Any) Any {
            return func(g Any) Any {
                return func(a Any) Any {
                    return Apply(bind1, Apply(f, a), g)
                }
            }
        }
    }
}

var ᛌdiscardProxy_once Once
var ᛧdiscardProxy Any

func ꞋdiscardProxy() Any {
    ᛌdiscardProxy_once.Do(func() {
        ᛧdiscardProxy = Dict{"discard": func(dictBind Any) Any {
            return Apply(Ꞌbind(), dictBind)
        },}
    })
return ᛧdiscardProxy
}



var ᛌdiscardUnit_once Once
var ᛧdiscardUnit Any

func ꞋdiscardUnit() Any {
    ᛌdiscardUnit_once.Do(func() {
        ᛧdiscardUnit = Dict{"discard": func(dictBind Any) Any {
            return Apply(Ꞌbind(), dictBind)
        },}
    })
return ᛧdiscardUnit
}


func ꞋifM() Any {
    return func(dictBind Any) Any {
        var bind1 Any = Apply(Ꞌbind(), dictBind)
        return func(cond Any) Any {
            return func(t Any) Any {
                return func(f Any) Any {
                    return Apply(bind1, cond, func(condꞌ Any) Any {
                        if condꞌ == true {
                            return t
                        }
                        return f
                    })
                }
            }
        }
    }
}
func Ꞌjoin() Any {
    return func(dictBind Any) Any {
        var bind1 Any = Apply(Ꞌbind(), dictBind)
        return func(m Any) Any {
            return Apply(bind1, m, Ꞌidentity())
        }
    }
}


// Foreign values

var foreign = Foreign("Control.Bind")

var ᛌarrayBind_once Once
var ᛧarrayBind Any

func ꞋarrayBind() Any { 
    ᛌarrayBind_once.Do(func() {
        ᛧarrayBind = Get(foreign, "arrayBind")
    })
    return ᛧarrayBind
}


