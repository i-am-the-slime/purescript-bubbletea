// Code generated by psgo. DO NOT EDIT.

package Data_Bounded

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋordRecord() Any {
    return Apply(Data_Ord.ꞋordRecord(), Undefined)
}
func ꞋBoundedRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋBounded_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋtopRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["topRecord"]
    }
}
func Ꞌtop() Any {
    return func(dict Any) Any {
        return dict.(Dict)["top"]
    }
}

var ᛌboundedUnit_once Once
var ᛧboundedUnit Any

func ꞋboundedUnit() Any {
    ᛌboundedUnit_once.Do(func() {
        ᛧboundedUnit = Dict{"top": Data_Unit.Ꞌunit(), "bottom": Data_Unit.Ꞌunit(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordUnit()
        },}
    })
return ᛧboundedUnit
}



var ᛌboundedRecordNil_once Once
var ᛧboundedRecordNil Any

func ꞋboundedRecordNil() Any {
    ᛌboundedRecordNil_once.Do(func() {
        ᛧboundedRecordNil = Dict{"topRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        }, "bottomRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        }, "OrdRecord0": func(_ Any) Any {
            return Data_Ord.ꞋordRecordNil()
        },}
    })
return ᛧboundedRecordNil
}



var ᛌboundedProxy_once Once
var ᛧboundedProxy Any

func ꞋboundedProxy() Any {
    ᛌboundedProxy_once.Do(func() {
        ᛧboundedProxy = Dict{"bottom": Type_Proxy.ꞋProxy(), "top": Type_Proxy.ꞋProxy(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordProxy()
        },}
    })
return ᛧboundedProxy
}



var ᛌboundedOrdering_once Once
var ᛧboundedOrdering Any

func ꞋboundedOrdering() Any {
    ᛌboundedOrdering_once.Do(func() {
        ᛧboundedOrdering = Dict{"top": Data_Ordering.ꞋGT(), "bottom": Data_Ordering.ꞋLT(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordOrdering()
        },}
    })
return ᛧboundedOrdering
}



var ᛌboundedNumber_once Once
var ᛧboundedNumber Any

func ꞋboundedNumber() Any {
    ᛌboundedNumber_once.Do(func() {
        ᛧboundedNumber = Dict{"top": ꞋtopNumber(), "bottom": ꞋbottomNumber(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordNumber()
        },}
    })
return ᛧboundedNumber
}



var ᛌboundedInt_once Once
var ᛧboundedInt Any

func ꞋboundedInt() Any {
    ᛌboundedInt_once.Do(func() {
        ᛧboundedInt = Dict{"top": ꞋtopInt(), "bottom": ꞋbottomInt(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordInt()
        },}
    })
return ᛧboundedInt
}



var ᛌboundedChar_once Once
var ᛧboundedChar Any

func ꞋboundedChar() Any {
    ᛌboundedChar_once.Do(func() {
        ᛧboundedChar = Dict{"top": ꞋtopChar(), "bottom": ꞋbottomChar(), "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordChar()
        },}
    })
return ᛧboundedChar
}



var ᛌboundedBoolean_once Once
var ᛧboundedBoolean Any

func ꞋboundedBoolean() Any {
    ᛌboundedBoolean_once.Do(func() {
        ᛧboundedBoolean = Dict{"top": true, "bottom": false, "Ord0": func(_ Any) Any {
            return Data_Ord.ꞋordBoolean()
        },}
    })
return ᛧboundedBoolean
}


func ꞋbottomRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bottomRecord"]
    }
}
func ꞋboundedRecord() Any {
    return func(_ Any) Any {
        return func(dictBoundedRecord Any) Any {
            var ordRecord1 Any = Apply(ꞋordRecord(), Apply(dictBoundedRecord.(Dict)["OrdRecord0"], Undefined))
            return Dict{"top": Apply(ꞋtopRecord(), dictBoundedRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()), "bottom": Apply(ꞋbottomRecord(), dictBoundedRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()), "Ord0": func(_ Any) Any {
                    return ordRecord1
                },}
        }
    }
}
func Ꞌbottom() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bottom"]
    }
}
func ꞋboundedRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(dictBounded Any) Any {
            var top1 Any = Apply(Ꞌtop(), dictBounded)
            var bottom1 Any = Apply(Ꞌbottom(), dictBounded)
            var Ord0 Any = Apply(dictBounded.(Dict)["Ord0"], Undefined)
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(dictBoundedRecord Any) Any {
                        var topRecord1 Any = Apply(ꞋtopRecord(), dictBoundedRecord)
                        var bottomRecord1 Any = Apply(ꞋbottomRecord(), dictBoundedRecord)
                        var ordRecordCons Any = Apply(Data_Ord.ꞋordRecordCons(), Apply(dictBoundedRecord.(Dict)["OrdRecord0"], Undefined), Undefined, dictIsSymbol, Ord0)
                        return Dict{"topRecord": func(v Any) Any {
                                return func(rowProxy Any) Any {
                                    var tail Any = Apply(topRecord1, Type_Proxy.ꞋProxy(), rowProxy)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    return Apply(insert, top1, tail)
                                }
                            }, "bottomRecord": func(v Any) Any {
                                return func(rowProxy Any) Any {
                                    var tail Any = Apply(bottomRecord1, Type_Proxy.ꞋProxy(), rowProxy)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    return Apply(insert, bottom1, tail)
                                }
                            }, "OrdRecord0": func(_ Any) Any {
                                return ordRecordCons
                            },}
                    }
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Bounded")

var ᛌtopInt_once Once
var ᛧtopInt Any

func ꞋtopInt() Any { 
    ᛌtopInt_once.Do(func() {
        ᛧtopInt = Get(foreign, "topInt")
    })
    return ᛧtopInt
}

var ᛌbottomInt_once Once
var ᛧbottomInt Any

func ꞋbottomInt() Any { 
    ᛌbottomInt_once.Do(func() {
        ᛧbottomInt = Get(foreign, "bottomInt")
    })
    return ᛧbottomInt
}

var ᛌtopChar_once Once
var ᛧtopChar Any

func ꞋtopChar() Any { 
    ᛌtopChar_once.Do(func() {
        ᛧtopChar = Get(foreign, "topChar")
    })
    return ᛧtopChar
}

var ᛌbottomChar_once Once
var ᛧbottomChar Any

func ꞋbottomChar() Any { 
    ᛌbottomChar_once.Do(func() {
        ᛧbottomChar = Get(foreign, "bottomChar")
    })
    return ᛧbottomChar
}

var ᛌtopNumber_once Once
var ᛧtopNumber Any

func ꞋtopNumber() Any { 
    ᛌtopNumber_once.Do(func() {
        ᛧtopNumber = Get(foreign, "topNumber")
    })
    return ᛧtopNumber
}

var ᛌbottomNumber_once Once
var ᛧbottomNumber Any

func ꞋbottomNumber() Any { 
    ᛌbottomNumber_once.Do(func() {
        ᛧbottomNumber = Get(foreign, "bottomNumber")
    })
    return ᛧbottomNumber
}


