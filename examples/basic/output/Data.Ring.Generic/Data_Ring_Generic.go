// Code generated by psgo. DO NOT EDIT.

package Data_Ring_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.Ring"
)

type _ = Any

func ꞋGenericRing_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋgenericSubꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericSub'"]
    }
}
func ꞋgenericSub() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericRing Any) Any {
            var genericSubꞌ1 Any = Apply(ꞋgenericSubꞌ(), dictGenericRing)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericSubꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}
func ꞋgenericRingProduct() Any {
    return func(dictGenericRing Any) Any {
        var genericSubꞌ1 Any = Apply(ꞋgenericSubꞌ(), dictGenericRing)
        return func(dictGenericRing1 Any) Any {
            var genericSubꞌ2 Any = Apply(ꞋgenericSubꞌ(), dictGenericRing1)
            return Dict{"genericSub'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericSubꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericSubꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                },}
        }
    }
}

var ᛌgenericRingNoArguments_once Once
var ᛧgenericRingNoArguments Any

func ꞋgenericRingNoArguments() Any {
    ᛌgenericRingNoArguments_once.Do(func() {
        ᛧgenericRingNoArguments = Dict{"genericSub'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        },}
    })
return ᛧgenericRingNoArguments
}


func ꞋgenericRingConstructor() Any {
    return func(dictGenericRing Any) Any {
        var genericSubꞌ1 Any = Apply(ꞋgenericSubꞌ(), dictGenericRing)
        return Dict{"genericSub'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericSubꞌ1, v, v1)
                }
            },}
    }
}
func ꞋgenericRingArgument() Any {
    return func(dictRing Any) Any {
        var sub Any = Apply(Data_Ring.Ꞌsub(), dictRing)
        return Dict{"genericSub'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(sub, v, v1)
                }
            },}
    }
}



