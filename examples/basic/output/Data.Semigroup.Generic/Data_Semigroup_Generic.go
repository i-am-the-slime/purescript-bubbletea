// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Generic.Rep"
)

type _ = Any

func ꞋGenericSemigroup_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌgenericSemigroupNoConstructors_once Once
var ᛧgenericSemigroupNoConstructors Any

func ꞋgenericSemigroupNoConstructors() Any {
    ᛌgenericSemigroupNoConstructors_once.Do(func() {
        ᛧgenericSemigroupNoConstructors = Dict{"genericAppend'": func(a Any) Any {
            return func(v Any) Any {
                return a
            }
        },}
    })
return ᛧgenericSemigroupNoConstructors
}



var ᛌgenericSemigroupNoArguments_once Once
var ᛧgenericSemigroupNoArguments Any

func ꞋgenericSemigroupNoArguments() Any {
    ᛌgenericSemigroupNoArguments_once.Do(func() {
        ᛧgenericSemigroupNoArguments = Dict{"genericAppend'": func(a Any) Any {
            return func(v Any) Any {
                return a
            }
        },}
    })
return ᛧgenericSemigroupNoArguments
}


func ꞋgenericSemigroupArgument() Any {
    return func(dictSemigroup Any) Any {
        var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"genericAppend'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(append, v, v1)
                }
            },}
    }
}
func ꞋgenericAppendꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericAppend'"]
    }
}
func ꞋgenericSemigroupConstructor() Any {
    return func(dictGenericSemigroup Any) Any {
        var genericAppendꞌ1 Any = Apply(ꞋgenericAppendꞌ(), dictGenericSemigroup)
        return Dict{"genericAppend'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericAppendꞌ1, v, v1)
                }
            },}
    }
}
func ꞋgenericSemigroupProduct() Any {
    return func(dictGenericSemigroup Any) Any {
        var genericAppendꞌ1 Any = Apply(ꞋgenericAppendꞌ(), dictGenericSemigroup)
        return func(dictGenericSemigroup1 Any) Any {
            var genericAppendꞌ2 Any = Apply(ꞋgenericAppendꞌ(), dictGenericSemigroup1)
            return Dict{"genericAppend'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericAppendꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericAppendꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋgenericAppend() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericSemigroup Any) Any {
            var genericAppendꞌ1 Any = Apply(ꞋgenericAppendꞌ(), dictGenericSemigroup)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericAppendꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}



