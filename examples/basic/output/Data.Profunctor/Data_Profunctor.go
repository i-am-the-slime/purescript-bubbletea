// Code generated by psgo. DO NOT EDIT.

package Data_Profunctor

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Newtype"
)

type _ = Any

func ꞋcomposeFlipped() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func Ꞌwrap() Any {
    return Apply(Data_Newtype.Ꞌwrap(), Undefined)
}
func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func ꞋProfunctor_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌprofunctorFn_once Once
var ᛧprofunctorFn Any

func ꞋprofunctorFn() Any {
    ᛌprofunctorFn_once.Do(func() {
        ᛧprofunctorFn = Dict{"dimap": func(a2b Any) Any {
            return func(c2d Any) Any {
                return func(b2c Any) Any {
                    return Apply(ꞋcomposeFlipped(), a2b, Apply(ꞋcomposeFlipped(), b2c, c2d))
                }
            }
        },}
    })
return ᛧprofunctorFn
}


func Ꞌdimap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["dimap"]
    }
}
func Ꞌlcmap() Any {
    return func(dictProfunctor Any) Any {
        var dimap1 Any = Apply(Ꞌdimap(), dictProfunctor)
        return func(a2b Any) Any {
            return Apply(dimap1, a2b, Ꞌidentity())
        }
    }
}
func Ꞌrmap() Any {
    return func(dictProfunctor Any) Any {
        var dimap1 Any = Apply(Ꞌdimap(), dictProfunctor)
        return func(b2c Any) Any {
            return Apply(dimap1, Ꞌidentity(), b2c)
        }
    }
}
func ꞋunwrapIso() Any {
    return func(dictProfunctor Any) Any {
        var dimap1 Any = Apply(Ꞌdimap(), dictProfunctor)
        return func(_ Any) Any {
            return Apply(dimap1, Ꞌwrap(), Ꞌunwrap())
        }
    }
}
func ꞋwrapIso() Any {
    return func(dictProfunctor Any) Any {
        var dimap1 Any = Apply(Ꞌdimap(), dictProfunctor)
        return func(_ Any) Any {
            return func(v Any) Any {
                return Apply(dimap1, Ꞌunwrap(), Ꞌwrap())
            }
        }
    }
}
func Ꞌarr() Any {
    return func(dictCategory Any) Any {
        var identity1 Any = Apply(Control_Category.Ꞌidentity(), dictCategory)
        return func(dictProfunctor Any) Any {
            var rmap1 Any = Apply(Ꞌrmap(), dictProfunctor)
            return func(f Any) Any {
                return Apply(rmap1, f, identity1)
            }
        }
    }
}



