// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Coproduct_Nested

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Void"
)

type _ = Any

func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func Ꞌin9() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v)))))))))
    }
}
func Ꞌin8() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v))))))))
    }
}
func Ꞌin7() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v)))))))
    }
}
func Ꞌin6() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v))))))
    }
}
func Ꞌin5() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v)))))
    }
}
func Ꞌin4() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v))))
    }
}
func Ꞌin3() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v)))
    }
}
func Ꞌin2() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v))
    }
}
func Ꞌin10() Any {
    return func(v Any) Any {
        return Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌright(), Apply(Data_Functor_Coproduct.Ꞌleft(), v))))))))))
    }
}
func Ꞌin1() Any {
    return Data_Functor_Coproduct.Ꞌleft()
}
func Ꞌcoproduct9() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(f Any) Any {
                            return func(g Any) Any {
                                return func(h Any) Any {
                                    return func(i Any) Any {
                                        return func(y Any) Any {
                                            if Is(y, "Left") {
                                                return Apply(a, y.(Dict)["value0"])
                                            }
                                            if Is(y, "Right") {
                                                if Is(y.(Dict)["value0"], "Left") {
                                                    return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                                }
                                                if Is(y.(Dict)["value0"], "Right") {
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                                        return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                    }
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                            return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                        }
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                            }
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                }
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                        return Apply(g, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                    }
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                            return Apply(h, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                        }
                                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                                return Apply(i, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                            }
                                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                                return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                                                            }
                                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 248, column 41 - line 250, column 61)")
                                                                        }
                                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 246, column 39 - line 250, column 61)")
                                                                    }
                                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 244, column 37 - line 250, column 61)")
                                                                }
                                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 242, column 35 - line 250, column 61)")
                                                            }
                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 240, column 33 - line 250, column 61)")
                                                        }
                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 238, column 31 - line 250, column 61)")
                                                    }
                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 236, column 29 - line 250, column 61)")
                                                }
                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 234, column 27 - line 250, column 61)")
                                            }
                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 232, column 34 - line 250, column 61)")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct8() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(f Any) Any {
                            return func(g Any) Any {
                                return func(h Any) Any {
                                    return func(y Any) Any {
                                        if Is(y, "Left") {
                                            return Apply(a, y.(Dict)["value0"])
                                        }
                                        if Is(y, "Right") {
                                            if Is(y.(Dict)["value0"], "Left") {
                                                return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                            }
                                            if Is(y.(Dict)["value0"], "Right") {
                                                if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                                    return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                }
                                                if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                        return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                    }
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                            return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                        }
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                            }
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                    return Apply(g, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                }
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                        return Apply(h, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                    }
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                        return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                                                    }
                                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 227, column 39 - line 229, column 59)")
                                                                }
                                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 225, column 37 - line 229, column 59)")
                                                            }
                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 223, column 35 - line 229, column 59)")
                                                        }
                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 221, column 33 - line 229, column 59)")
                                                    }
                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 219, column 31 - line 229, column 59)")
                                                }
                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 217, column 29 - line 229, column 59)")
                                            }
                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 215, column 27 - line 229, column 59)")
                                        }
                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 213, column 32 - line 229, column 59)")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct7() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(f Any) Any {
                            return func(g Any) Any {
                                return func(y Any) Any {
                                    if Is(y, "Left") {
                                        return Apply(a, y.(Dict)["value0"])
                                    }
                                    if Is(y, "Right") {
                                        if Is(y.(Dict)["value0"], "Left") {
                                            return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                        }
                                        if Is(y.(Dict)["value0"], "Right") {
                                            if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                                return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                            }
                                            if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                    return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                }
                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                        return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                    }
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                            return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                        }
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                return Apply(g, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                            }
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                                            }
                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 208, column 37 - line 210, column 57)")
                                                        }
                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 206, column 35 - line 210, column 57)")
                                                    }
                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 204, column 33 - line 210, column 57)")
                                                }
                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 202, column 31 - line 210, column 57)")
                                            }
                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 200, column 29 - line 210, column 57)")
                                        }
                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 198, column 27 - line 210, column 57)")
                                    }
                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 196, column 30 - line 210, column 57)")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct6() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(f Any) Any {
                            return func(y Any) Any {
                                if Is(y, "Left") {
                                    return Apply(a, y.(Dict)["value0"])
                                }
                                if Is(y, "Right") {
                                    if Is(y.(Dict)["value0"], "Left") {
                                        return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                    }
                                    if Is(y.(Dict)["value0"], "Right") {
                                        if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                            return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                        }
                                        if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                            }
                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                    return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                }
                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                        return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                    }
                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                        return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                                    }
                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 191, column 35 - line 193, column 55)")
                                                }
                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 189, column 33 - line 193, column 55)")
                                            }
                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 187, column 31 - line 193, column 55)")
                                        }
                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 185, column 29 - line 193, column 55)")
                                    }
                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 183, column 27 - line 193, column 55)")
                                }
                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 181, column 28 - line 193, column 55)")
                            }
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct5() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(y Any) Any {
                            if Is(y, "Left") {
                                return Apply(a, y.(Dict)["value0"])
                            }
                            if Is(y, "Right") {
                                if Is(y.(Dict)["value0"], "Left") {
                                    return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                }
                                if Is(y.(Dict)["value0"], "Right") {
                                    if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                        return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                    }
                                    if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                            return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                        }
                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                            }
                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                            }
                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 176, column 33 - line 178, column 53)")
                                        }
                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 174, column 31 - line 178, column 53)")
                                    }
                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 172, column 29 - line 178, column 53)")
                                }
                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 170, column 27 - line 178, column 53)")
                            }
                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 168, column 26 - line 178, column 53)")
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct4() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(y Any) Any {
                        if Is(y, "Left") {
                            return Apply(a, y.(Dict)["value0"])
                        }
                        if Is(y, "Right") {
                            if Is(y.(Dict)["value0"], "Left") {
                                return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                            }
                            if Is(y.(Dict)["value0"], "Right") {
                                if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                    return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                }
                                if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                        return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                    }
                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                        return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                    }
                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 163, column 31 - line 165, column 51)")
                                }
                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 161, column 29 - line 165, column 51)")
                            }
                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 159, column 27 - line 165, column 51)")
                        }
                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 157, column 24 - line 165, column 51)")
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct3() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(y Any) Any {
                    if Is(y, "Left") {
                        return Apply(a, y.(Dict)["value0"])
                    }
                    if Is(y, "Right") {
                        if Is(y.(Dict)["value0"], "Left") {
                            return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                        }
                        if Is(y.(Dict)["value0"], "Right") {
                            if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                            }
                            if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                            }
                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 152, column 29 - line 154, column 49)")
                        }
                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 150, column 27 - line 154, column 49)")
                    }
                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 148, column 22 - line 154, column 49)")
                }
            }
        }
    }
}
func Ꞌcoproduct2() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(y Any) Any {
                if Is(y, "Left") {
                    return Apply(a, y.(Dict)["value0"])
                }
                if Is(y, "Right") {
                    if Is(y.(Dict)["value0"], "Left") {
                        return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                    }
                    if Is(y.(Dict)["value0"], "Right") {
                        return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 143, column 27 - line 145, column 47)")
                }
                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 141, column 20 - line 145, column 47)")
            }
        }
    }
}
func Ꞌcoproduct10() Any {
    return func(a Any) Any {
        return func(b Any) Any {
            return func(c Any) Any {
                return func(d Any) Any {
                    return func(e Any) Any {
                        return func(f Any) Any {
                            return func(g Any) Any {
                                return func(h Any) Any {
                                    return func(i Any) Any {
                                        return func(j Any) Any {
                                            return func(y Any) Any {
                                                if Is(y, "Left") {
                                                    return Apply(a, y.(Dict)["value0"])
                                                }
                                                if Is(y, "Right") {
                                                    if Is(y.(Dict)["value0"], "Left") {
                                                        return Apply(b, y.(Dict)["value0"].(Dict)["value0"])
                                                    }
                                                    if Is(y.(Dict)["value0"], "Right") {
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"], "Left") {
                                                            return Apply(c, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                        }
                                                        if Is(y.(Dict)["value0"].(Dict)["value0"], "Right") {
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                return Apply(d, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                            }
                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                    return Apply(e, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                }
                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                        return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                    }
                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                            return Apply(g, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                        }
                                                                        if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                                return Apply(h, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                            }
                                                                            if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                                    return Apply(i, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                                }
                                                                                if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left") {
                                                                                        return Apply(j, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                                                                                    }
                                                                                    if Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") {
                                                                                        return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"]))
                                                                                    }
                                                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 271, column 43 - line 273, column 65)")
                                                                                }
                                                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 269, column 41 - line 273, column 65)")
                                                                            }
                                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 267, column 39 - line 273, column 65)")
                                                                        }
                                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 265, column 37 - line 273, column 65)")
                                                                    }
                                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 263, column 35 - line 273, column 65)")
                                                                }
                                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 261, column 33 - line 273, column 65)")
                                                            }
                                                            panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 259, column 31 - line 273, column 65)")
                                                        }
                                                        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 257, column 29 - line 273, column 65)")
                                                    }
                                                    panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 255, column 27 - line 273, column 65)")
                                                }
                                                panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 253, column 37 - line 273, column 65)")
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
func Ꞌcoproduct1() Any {
    return func(y Any) Any {
        if Is(y, "Left") {
            return y.(Dict)["value0"]
        }
        if Is(y, "Right") {
            return Apply(Data_Void.Ꞌabsurd(), Apply(Ꞌunwrap(), y.(Dict)["value0"]))
        }
        panic("Failed pattern match at Data.Functor.Coproduct.Nested (line 136, column 16 - line 138, column 45)")
    }
}
func Ꞌat9() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left")))))))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat8() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left"))))))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat7() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left")))))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat6() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left"))))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat5() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left")))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat4() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left"))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat3() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"], "Left")) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat2() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && Is(y.(Dict)["value0"], "Left") {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat10() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Right") && (Is(y.(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && (Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Right") && Is(y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"], "Left"))))))))) {
                    return Apply(f, y.(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"].(Dict)["value0"])
                }
                return b
            }
        }
    }
}
func Ꞌat1() Any {
    return func(b Any) Any {
        return func(f Any) Any {
            return func(y Any) Any {
                if Is(y, "Left") {
                    return Apply(f, y.(Dict)["value0"])
                }
                return b
            }
        }
    }
}



