// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup_First

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋFirst() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowFirst() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(First ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌsemigroupFirst_once Once
var ᛧsemigroupFirst Any

func ꞋsemigroupFirst() Any {
    ᛌsemigroupFirst_once.Do(func() {
        ᛧsemigroupFirst = Dict{"append": func(x Any) Any {
            return func(v Any) Any {
                return x
            }
        },}
    })
return ᛧsemigroupFirst
}


func ꞋordFirst() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌfunctorFirst_once Once
var ᛧfunctorFirst Any

func ꞋfunctorFirst() Any {
    ᛌfunctorFirst_once.Do(func() {
        ᛧfunctorFirst = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorFirst
}


func ꞋeqFirst() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1First_once Once
var ᛧeq1First Any

func Ꞌeq1First() Any {
    ᛌeq1First_once.Do(func() {
        ᛧeq1First = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqFirst(), dictEq))
        },}
    })
return ᛧeq1First
}



var ᛌord1First_once Once
var ᛧord1First Any

func Ꞌord1First() Any {
    ᛌord1First_once.Do(func() {
        ᛧord1First = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordFirst(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1First()
        },}
    })
return ᛧord1First
}


func ꞋboundedFirst() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyFirst_once Once
var ᛧapplyFirst Any

func ꞋapplyFirst() Any {
    ᛌapplyFirst_once.Do(func() {
        ᛧapplyFirst = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorFirst()
        },}
    })
return ᛧapplyFirst
}



var ᛌbindFirst_once Once
var ᛧbindFirst Any

func ꞋbindFirst() Any {
    ᛌbindFirst_once.Do(func() {
        ᛧbindFirst = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyFirst()
        },}
    })
return ᛧbindFirst
}



var ᛌapplicativeFirst_once Once
var ᛧapplicativeFirst Any

func ꞋapplicativeFirst() Any {
    ᛌapplicativeFirst_once.Do(func() {
        ᛧapplicativeFirst = Dict{"pure": ꞋFirst(), "Apply0": func(_ Any) Any {
            return ꞋapplyFirst()
        },}
    })
return ᛧapplicativeFirst
}



var ᛌmonadFirst_once Once
var ᛧmonadFirst Any

func ꞋmonadFirst() Any {
    ᛌmonadFirst_once.Do(func() {
        ᛧmonadFirst = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeFirst()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindFirst()
        },}
    })
return ᛧmonadFirst
}





