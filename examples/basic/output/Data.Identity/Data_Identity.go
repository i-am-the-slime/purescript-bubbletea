// Code generated by psgo. DO NOT EDIT.

package Data_Identity

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Functor.Invariant"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋIdentity() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowIdentity() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Identity ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemiringIdentity() Any {
    return func(dictSemiring Any) Any {
        return dictSemiring
    }
}
func ꞋsemigroupIdentity() Any {
    return func(dictSemigroup Any) Any {
        return dictSemigroup
    }
}
func ꞋringIdentity() Any {
    return func(dictRing Any) Any {
        return dictRing
    }
}
func ꞋordIdentity() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeIdentity_once Once
var ᛧnewtypeIdentity Any

func ꞋnewtypeIdentity() Any {
    ᛌnewtypeIdentity_once.Do(func() {
        ᛧnewtypeIdentity = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeIdentity
}


func ꞋmonoidIdentity() Any {
    return func(dictMonoid Any) Any {
        return dictMonoid
    }
}
func ꞋlazyIdentity() Any {
    return func(dictLazy Any) Any {
        return dictLazy
    }
}
func ꞋheytingAlgebraIdentity() Any {
    return func(dictHeytingAlgebra Any) Any {
        return dictHeytingAlgebra
    }
}

var ᛌfunctorIdentity_once Once
var ᛧfunctorIdentity Any

func ꞋfunctorIdentity() Any {
    ᛌfunctorIdentity_once.Do(func() {
        ᛧfunctorIdentity = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorIdentity
}



var ᛌinvariantIdentity_once Once
var ᛧinvariantIdentity Any

func ꞋinvariantIdentity() Any {
    ᛌinvariantIdentity_once.Do(func() {
        ᛧinvariantIdentity = Dict{"imap": Apply(Data_Functor_Invariant.ꞋimapF(), ꞋfunctorIdentity()),}
    })
return ᛧinvariantIdentity
}



var ᛌextendIdentity_once Once
var ᛧextendIdentity Any

func ꞋextendIdentity() Any {
    ᛌextendIdentity_once.Do(func() {
        ᛧextendIdentity = Dict{"extend": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorIdentity()
        },}
    })
return ᛧextendIdentity
}


func ꞋeuclideanRingIdentity() Any {
    return func(dictEuclideanRing Any) Any {
        return dictEuclideanRing
    }
}
func ꞋeqIdentity() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Identity_once Once
var ᛧeq1Identity Any

func Ꞌeq1Identity() Any {
    ᛌeq1Identity_once.Do(func() {
        ᛧeq1Identity = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqIdentity(), dictEq))
        },}
    })
return ᛧeq1Identity
}



var ᛌord1Identity_once Once
var ᛧord1Identity Any

func Ꞌord1Identity() Any {
    ᛌord1Identity_once.Do(func() {
        ᛧord1Identity = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordIdentity(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Identity()
        },}
    })
return ᛧord1Identity
}



var ᛌcomonadIdentity_once Once
var ᛧcomonadIdentity Any

func ꞋcomonadIdentity() Any {
    ᛌcomonadIdentity_once.Do(func() {
        ᛧcomonadIdentity = Dict{"extract": func(v Any) Any {
            return v
        }, "Extend0": func(_ Any) Any {
            return ꞋextendIdentity()
        },}
    })
return ᛧcomonadIdentity
}


func ꞋcommutativeRingIdentity() Any {
    return func(dictCommutativeRing Any) Any {
        return dictCommutativeRing
    }
}
func ꞋboundedIdentity() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}
func ꞋbooleanAlgebraIdentity() Any {
    return func(dictBooleanAlgebra Any) Any {
        return dictBooleanAlgebra
    }
}

var ᛌapplyIdentity_once Once
var ᛧapplyIdentity Any

func ꞋapplyIdentity() Any {
    ᛌapplyIdentity_once.Do(func() {
        ᛧapplyIdentity = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorIdentity()
        },}
    })
return ᛧapplyIdentity
}



var ᛌbindIdentity_once Once
var ᛧbindIdentity Any

func ꞋbindIdentity() Any {
    ᛌbindIdentity_once.Do(func() {
        ᛧbindIdentity = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyIdentity()
        },}
    })
return ᛧbindIdentity
}



var ᛌapplicativeIdentity_once Once
var ᛧapplicativeIdentity Any

func ꞋapplicativeIdentity() Any {
    ᛌapplicativeIdentity_once.Do(func() {
        ᛧapplicativeIdentity = Dict{"pure": ꞋIdentity(), "Apply0": func(_ Any) Any {
            return ꞋapplyIdentity()
        },}
    })
return ᛧapplicativeIdentity
}



var ᛌmonadIdentity_once Once
var ᛧmonadIdentity Any

func ꞋmonadIdentity() Any {
    ᛌmonadIdentity_once.Do(func() {
        ᛧmonadIdentity = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeIdentity()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindIdentity()
        },}
    })
return ᛧmonadIdentity
}



var ᛌaltIdentity_once Once
var ᛧaltIdentity Any

func ꞋaltIdentity() Any {
    ᛌaltIdentity_once.Do(func() {
        ᛧaltIdentity = Dict{"alt": func(x Any) Any {
            return func(v Any) Any {
                return x
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorIdentity()
        },}
    })
return ᛧaltIdentity
}





