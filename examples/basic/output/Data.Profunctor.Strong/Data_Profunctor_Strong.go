// Code generated by psgo. DO NOT EDIT.

package Data_Profunctor_Strong

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Profunctor"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
)

type _ = Any

func ꞋStrong_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌstrongFn_once Once
var ᛧstrongFn Any

func ꞋstrongFn() Any {
    ᛌstrongFn_once.Do(func() {
        ᛧstrongFn = Dict{"first": func(a2b Any) Any {
            return func(v Any) Any {
                return Apply(Data_Tuple.ꞋTuple(), Apply(a2b, v.(Dict)["value0"]), v.(Dict)["value1"])
            }
        }, "second": Apply(Data_Functor.Ꞌmap(), Data_Tuple.ꞋfunctorTuple()), "Profunctor0": func(_ Any) Any {
            return Data_Profunctor.ꞋprofunctorFn()
        },}
    })
return ᛧstrongFn
}


func Ꞌsecond() Any {
    return func(dict Any) Any {
        return dict.(Dict)["second"]
    }
}
func Ꞌfirst() Any {
    return func(dict Any) Any {
        return dict.(Dict)["first"]
    }
}
func ꞋsplitStrong() Any {
    return func(dictSemigroupoid Any) Any {
        var composeFlipped Any = Apply(Control_Semigroupoid.ꞋcomposeFlipped(), dictSemigroupoid)
        return func(dictStrong Any) Any {
            var first1 Any = Apply(Ꞌfirst(), dictStrong)
            var second1 Any = Apply(Ꞌsecond(), dictStrong)
            return func(l Any) Any {
                return func(r Any) Any {
                    return Apply(composeFlipped, Apply(first1, l), Apply(second1, r))
                }
            }
        }
    }
}
func Ꞌfanout() Any {
    return func(dictSemigroupoid Any) Any {
        var splitStrong1 Any = Apply(ꞋsplitStrong(), dictSemigroupoid)
        return func(dictStrong Any) Any {
            var lcmap Any = Apply(Data_Profunctor.Ꞌlcmap(), Apply(dictStrong.(Dict)["Profunctor0"], Undefined))
            var splitStrong2 Any = Apply(splitStrong1, dictStrong)
            return func(l Any) Any {
                return func(r Any) Any {
                    return Apply(lcmap, func(a Any) Any {
                        return Apply(Data_Tuple.ꞋTuple(), a, a)
                    }, Apply(splitStrong2, l, r))
                }
            }
        }
    }
}



