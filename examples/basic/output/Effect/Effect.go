// Code generated by psgo. DO NOT EDIT.

package Effect

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Monad"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Monoid"
)

type _ = Any


var ᛌmonadEffect_once Once
var ᛧmonadEffect Any

func ꞋmonadEffect() Any {
    ᛌmonadEffect_once.Do(func() {
        ᛧmonadEffect = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeEffect()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindEffect()
        },}
    })
return ᛧmonadEffect
}



var ᛌbindEffect_once Once
var ᛧbindEffect Any

func ꞋbindEffect() Any {
    ᛌbindEffect_once.Do(func() {
        ᛧbindEffect = Dict{"bind": ꞋbindE(), "Apply0": func(_ Any) Any {
            return ꞋapplyEffect()
        },}
    })
return ᛧbindEffect
}



var ᛌapplyEffect_once Once
var ᛧapplyEffect Any

func ꞋapplyEffect() Any {
    ᛌapplyEffect_once.Do(func() {
        ᛧapplyEffect = Dict{"apply": Apply(Control_Monad.Ꞌap(), ꞋmonadEffect()), "Functor0": func(_ Any) Any {
            return ꞋfunctorEffect()
        },}
    })
return ᛧapplyEffect
}



var ᛌapplicativeEffect_once Once
var ᛧapplicativeEffect Any

func ꞋapplicativeEffect() Any {
    ᛌapplicativeEffect_once.Do(func() {
        ᛧapplicativeEffect = Dict{"pure": ꞋpureE(), "Apply0": func(_ Any) Any {
            return ꞋapplyEffect()
        },}
    })
return ᛧapplicativeEffect
}



var ᛌfunctorEffect_once Once
var ᛧfunctorEffect Any

func ꞋfunctorEffect() Any {
    ᛌfunctorEffect_once.Do(func() {
        ᛧfunctorEffect = Dict{"map": Apply(Control_Applicative.ꞋliftA1(), ꞋapplicativeEffect()),}
    })
return ᛧfunctorEffect
}


func Ꞌlift2() Any {
    return Apply(Control_Apply.Ꞌlift2(), ꞋapplyEffect())
}
func ꞋsemigroupEffect() Any {
    return func(dictSemigroup Any) Any {
        return Dict{"append": Apply(Ꞌlift2(), Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)),}
    }
}
func ꞋmonoidEffect() Any {
    return func(dictMonoid Any) Any {
        var semigroupEffect1 Any = Apply(ꞋsemigroupEffect(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"mempty": Apply(ꞋpureE(), Apply(Data_Monoid.Ꞌmempty(), dictMonoid)), "Semigroup0": func(_ Any) Any {
                return semigroupEffect1
            },}
    }
}


// Foreign values

var foreign = Foreign("Effect")

var ᛌpureE_once Once
var ᛧpureE Any

func ꞋpureE() Any { 
    ᛌpureE_once.Do(func() {
        ᛧpureE = Get(foreign, "pureE")
    })
    return ᛧpureE
}

var ᛌbindE_once Once
var ᛧbindE Any

func ꞋbindE() Any { 
    ᛌbindE_once.Do(func() {
        ᛧbindE = Get(foreign, "bindE")
    })
    return ᛧbindE
}

var ᛌuntilE_once Once
var ᛧuntilE Any

func ꞋuntilE() Any { 
    ᛌuntilE_once.Do(func() {
        ᛧuntilE = Get(foreign, "untilE")
    })
    return ᛧuntilE
}

var ᛌwhileE_once Once
var ᛧwhileE Any

func ꞋwhileE() Any { 
    ᛌwhileE_once.Do(func() {
        ᛧwhileE = Get(foreign, "whileE")
    })
    return ᛧwhileE
}

var ᛌforE_once Once
var ᛧforE Any

func ꞋforE() Any { 
    ᛌforE_once.Do(func() {
        ᛧforE = Get(foreign, "forE")
    })
    return ᛧforE
}

var ᛌforeachE_once Once
var ᛧforeachE Any

func ꞋforeachE() Any { 
    ᛌforeachE_once.Do(func() {
        ᛧforeachE = Get(foreign, "foreachE")
    })
    return ᛧforeachE
}


