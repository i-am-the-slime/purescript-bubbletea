// Code generated by psgo. DO NOT EDIT.

package Data_Divide

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Predicate"
	"project.localhost/purescript-native/output/Data.Op"
	"project.localhost/purescript-native/output/Data.Equivalence"
	"project.localhost/purescript-native/output/Data.Comparison"
)

type _ = Any

func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Ordering.ꞋsemigroupOrdering())
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋDivide_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌdividePredicate_once Once
var ᛧdividePredicate Any

func ꞋdividePredicate() Any {
    ᛌdividePredicate_once.Do(func() {
        ᛧdividePredicate = Dict{"divide": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        var v2 Any = Apply(f, a)
                        return Apply(Ꞌconj(), Apply(v, v2.(Dict)["value0"]), Apply(v1, v2.(Dict)["value1"]))
                    }
                }
            }
        }, "Contravariant0": func(_ Any) Any {
            return Data_Predicate.ꞋcontravariantPredicate()
        },}
    })
return ᛧdividePredicate
}


func ꞋdivideOp() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"divide": func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return func(a Any) Any {
                            var v2 Any = Apply(f, a)
                            return Apply(append1, Apply(v, v2.(Dict)["value0"]), Apply(v1, v2.(Dict)["value1"]))
                        }
                    }
                }
            }, "Contravariant0": func(_ Any) Any {
                return Data_Op.ꞋcontravariantOp()
            },}
    }
}

var ᛌdivideEquivalence_once Once
var ᛧdivideEquivalence Any

func ꞋdivideEquivalence() Any {
    ᛌdivideEquivalence_once.Do(func() {
        ᛧdivideEquivalence = Dict{"divide": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return func(b Any) Any {
                            var v2 Any = Apply(f, a)
                            var v3 Any = Apply(f, b)
                            return Apply(Ꞌconj(), Apply(v, v2.(Dict)["value0"], v3.(Dict)["value0"]), Apply(v1, v2.(Dict)["value1"], v3.(Dict)["value1"]))
                        }
                    }
                }
            }
        }, "Contravariant0": func(_ Any) Any {
            return Data_Equivalence.ꞋcontravariantEquivalence()
        },}
    })
return ᛧdivideEquivalence
}



var ᛌdivideComparison_once Once
var ᛧdivideComparison Any

func ꞋdivideComparison() Any {
    ᛌdivideComparison_once.Do(func() {
        ᛧdivideComparison = Dict{"divide": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return func(b Any) Any {
                            var v2 Any = Apply(f, a)
                            var v3 Any = Apply(f, b)
                            return Apply(Ꞌappend(), Apply(v, v2.(Dict)["value0"], v3.(Dict)["value0"]), Apply(v1, v2.(Dict)["value1"], v3.(Dict)["value1"]))
                        }
                    }
                }
            }
        }, "Contravariant0": func(_ Any) Any {
            return Data_Comparison.ꞋcontravariantComparison()
        },}
    })
return ᛧdivideComparison
}


func Ꞌdivide() Any {
    return func(dict Any) Any {
        return dict.(Dict)["divide"]
    }
}
func Ꞌdivided() Any {
    return func(dictDivide Any) Any {
        return Apply(Ꞌdivide(), dictDivide, Ꞌidentity())
    }
}



