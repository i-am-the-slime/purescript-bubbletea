// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup_Traversable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Semigroup.Foldable"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Data.Monoid.Multiplicative"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋTraversable1_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌtraverse1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["traverse1"]
    }
}

var ᛌtraversableTuple_once Once
var ᛧtraversableTuple Any

func ꞋtraversableTuple() Any {
    ᛌtraversableTuple_once.Do(func() {
        ᛧtraversableTuple = Dict{"traverse1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), Apply(f, v.(Dict)["value1"]))
                }
            }
        }, "sequence1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), v.(Dict)["value1"])
            }
        }, "Foldable10": func(_ Any) Any {
            return Data_Semigroup_Foldable.ꞋfoldableTuple()
        }, "Traversable1": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableTuple()
        },}
    })
return ᛧtraversableTuple
}



var ᛌtraversableIdentity_once Once
var ᛧtraversableIdentity Any

func ꞋtraversableIdentity() Any {
    ᛌtraversableIdentity_once.Do(func() {
        ᛧtraversableIdentity = Dict{"traverse1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Identity.ꞋIdentity(), Apply(f, v))
                }
            }
        }, "sequence1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Identity.ꞋIdentity(), v)
            }
        }, "Foldable10": func(_ Any) Any {
            return Data_Semigroup_Foldable.ꞋfoldableIdentity()
        }, "Traversable1": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableIdentity()
        },}
    })
return ᛧtraversableIdentity
}


func Ꞌsequence1Default() Any {
    return func(dictTraversable1 Any) Any {
        var traverse11 Any = Apply(Ꞌtraverse1(), dictTraversable1)
        return func(dictApply Any) Any {
            return Apply(traverse11, dictApply, Ꞌidentity())
        }
    }
}

var ᛌtraversableDual_once Once
var ᛧtraversableDual Any

func ꞋtraversableDual() Any {
    ᛌtraversableDual_once.Do(func() {
        ᛧtraversableDual = Dict{"traverse1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Dual.ꞋDual(), Apply(f, v))
                }
            }
        }, "sequence1": func(dictApply Any) Any {
            return Apply(Ꞌsequence1Default(), ꞋtraversableDual(), dictApply)
        }, "Foldable10": func(_ Any) Any {
            return Data_Semigroup_Foldable.ꞋfoldableDual()
        }, "Traversable1": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableDual()
        },}
    })
return ᛧtraversableDual
}



var ᛌtraversableMultiplicative_once Once
var ᛧtraversableMultiplicative Any

func ꞋtraversableMultiplicative() Any {
    ᛌtraversableMultiplicative_once.Do(func() {
        ᛧtraversableMultiplicative = Dict{"traverse1": func(dictApply Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Monoid_Multiplicative.ꞋMultiplicative(), Apply(f, v))
                }
            }
        }, "sequence1": func(dictApply Any) Any {
            return Apply(Ꞌsequence1Default(), ꞋtraversableMultiplicative(), dictApply)
        }, "Foldable10": func(_ Any) Any {
            return Data_Semigroup_Foldable.ꞋfoldableMultiplicative()
        }, "Traversable1": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableMultiplicative()
        },}
    })
return ᛧtraversableMultiplicative
}


func Ꞌsequence1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["sequence1"]
    }
}
func Ꞌtraverse1Default() Any {
    return func(dictTraversable1 Any) Any {
        var sequence11 Any = Apply(Ꞌsequence1(), dictTraversable1)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictTraversable1.(Dict)["Traversable1"], Undefined).(Dict)["Functor0"], Undefined))
        return func(dictApply Any) Any {
            var sequence12 Any = Apply(sequence11, dictApply)
            return func(f Any) Any {
                return func(ta Any) Any {
                    return Apply(sequence12, Apply(ˉmap, f, ta))
                }
            }
        }
    }
}



