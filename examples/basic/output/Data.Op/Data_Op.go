// Code generated by psgo. DO NOT EDIT.

package Data_Op

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Control.Category"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋOp() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌsemigroupoidOp_once Once
var ᛧsemigroupoidOp Any

func ꞋsemigroupoidOp() Any {
    ᛌsemigroupoidOp_once.Do(func() {
        ᛧsemigroupoidOp = Dict{"compose": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(Ꞌcompose(), v1, v)
            }
        },}
    })
return ᛧsemigroupoidOp
}


func ꞋsemigroupOp() Any {
    return func(dictSemigroup Any) Any {
        return Apply(Data_Semigroup.ꞋsemigroupFn(), dictSemigroup)
    }
}

var ᛌnewtypeOp_once Once
var ᛧnewtypeOp Any

func ꞋnewtypeOp() Any {
    ᛌnewtypeOp_once.Do(func() {
        ᛧnewtypeOp = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeOp
}


func ꞋmonoidOp() Any {
    return func(dictMonoid Any) Any {
        return Apply(Data_Monoid.ꞋmonoidFn(), dictMonoid)
    }
}

var ᛌcontravariantOp_once Once
var ᛧcontravariantOp Any

func ꞋcontravariantOp() Any {
    ᛌcontravariantOp_once.Do(func() {
        ᛧcontravariantOp = Dict{"cmap": func(f Any) Any {
            return func(v Any) Any {
                return Apply(Ꞌcompose(), v, f)
            }
        },}
    })
return ᛧcontravariantOp
}



var ᛌcategoryOp_once Once
var ᛧcategoryOp Any

func ꞋcategoryOp() Any {
    ᛌcategoryOp_once.Do(func() {
        ᛧcategoryOp = Dict{"identity": Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn()), "Semigroupoid0": func(_ Any) Any {
            return ꞋsemigroupoidOp()
        },}
    })
return ᛧcategoryOp
}





