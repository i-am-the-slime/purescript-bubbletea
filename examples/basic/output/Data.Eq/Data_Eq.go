// Code generated by psgo. DO NOT EDIT.

package Data_Eq

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋEqRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋEq_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋEq1_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌeqVoid_once Once
var ᛧeqVoid Any

func ꞋeqVoid() Any {
    ᛌeqVoid_once.Do(func() {
        ᛧeqVoid = Dict{"eq": func(v Any) Any {
            return func(v1 Any) Any {
                return true
            }
        },}
    })
return ᛧeqVoid
}



var ᛌeqUnit_once Once
var ᛧeqUnit Any

func ꞋeqUnit() Any {
    ᛌeqUnit_once.Do(func() {
        ᛧeqUnit = Dict{"eq": func(v Any) Any {
            return func(v1 Any) Any {
                return true
            }
        },}
    })
return ᛧeqUnit
}



var ᛌeqString_once Once
var ᛧeqString Any

func ꞋeqString() Any {
    ᛌeqString_once.Do(func() {
        ᛧeqString = Dict{"eq": ꞋeqStringImpl(),}
    })
return ᛧeqString
}



var ᛌeqRowNil_once Once
var ᛧeqRowNil Any

func ꞋeqRowNil() Any {
    ᛌeqRowNil_once.Do(func() {
        ᛧeqRowNil = Dict{"eqRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return true
                }
            }
        },}
    })
return ᛧeqRowNil
}


func ꞋeqRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["eqRecord"]
    }
}
func ꞋeqRec() Any {
    return func(_ Any) Any {
        return func(dictEqRecord Any) Any {
            return Dict{"eq": Apply(ꞋeqRecord(), dictEqRecord, Type_Proxy.ꞋProxy()),}
        }
    }
}

var ᛌeqProxy_once Once
var ᛧeqProxy Any

func ꞋeqProxy() Any {
    ᛌeqProxy_once.Do(func() {
        ᛧeqProxy = Dict{"eq": func(v Any) Any {
            return func(v1 Any) Any {
                return true
            }
        },}
    })
return ᛧeqProxy
}



var ᛌeqNumber_once Once
var ᛧeqNumber Any

func ꞋeqNumber() Any {
    ᛌeqNumber_once.Do(func() {
        ᛧeqNumber = Dict{"eq": ꞋeqNumberImpl(),}
    })
return ᛧeqNumber
}



var ᛌeqInt_once Once
var ᛧeqInt Any

func ꞋeqInt() Any {
    ᛌeqInt_once.Do(func() {
        ᛧeqInt = Dict{"eq": ꞋeqIntImpl(),}
    })
return ᛧeqInt
}



var ᛌeqChar_once Once
var ᛧeqChar Any

func ꞋeqChar() Any {
    ᛌeqChar_once.Do(func() {
        ᛧeqChar = Dict{"eq": ꞋeqCharImpl(),}
    })
return ᛧeqChar
}



var ᛌeqBoolean_once Once
var ᛧeqBoolean Any

func ꞋeqBoolean() Any {
    ᛌeqBoolean_once.Do(func() {
        ᛧeqBoolean = Dict{"eq": ꞋeqBooleanImpl(),}
    })
return ᛧeqBoolean
}


func Ꞌeq1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["eq1"]
    }
}
func Ꞌeq() Any {
    return func(dict Any) Any {
        return dict.(Dict)["eq"]
    }
}
func Ꞌeq2() Any {
    return Apply(Ꞌeq(), ꞋeqBoolean())
}
func ꞋeqArray() Any {
    return func(dictEq Any) Any {
        return Dict{"eq": Apply(ꞋeqArrayImpl(), Apply(Ꞌeq(), dictEq)),}
    }
}

var ᛌeq1Array_once Once
var ᛧeq1Array Any

func Ꞌeq1Array() Any {
    ᛌeq1Array_once.Do(func() {
        ᛧeq1Array = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Ꞌeq(), Apply(ꞋeqArray(), dictEq))
        },}
    })
return ᛧeq1Array
}


func ꞋeqRowCons() Any {
    return func(dictEqRecord Any) Any {
        var eqRecord1 Any = Apply(ꞋeqRecord(), dictEqRecord)
        return func(_ Any) Any {
            return func(dictIsSymbol Any) Any {
                var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
                return func(dictEq Any) Any {
                    var eq3 Any = Apply(Ꞌeq(), dictEq)
                    return Dict{"eqRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(eqRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(Ꞌconj(), Apply(eq3, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        },}
                }
            }
        }
    }
}
func ꞋnotEq() Any {
    return func(dictEq Any) Any {
        var eq3 Any = Apply(Ꞌeq(), dictEq)
        return func(x Any) Any {
            return func(y Any) Any {
                return Apply(Ꞌeq2(), Apply(eq3, x, y), false)
            }
        }
    }
}
func ꞋnotEq1() Any {
    return func(dictEq1 Any) Any {
        var eq11 Any = Apply(Ꞌeq1(), dictEq1)
        return func(dictEq Any) Any {
            var eq12 Any = Apply(eq11, dictEq)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(Ꞌeq2(), Apply(eq12, x, y), false)
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Eq")

var ᛌeqBooleanImpl_once Once
var ᛧeqBooleanImpl Any

func ꞋeqBooleanImpl() Any { 
    ᛌeqBooleanImpl_once.Do(func() {
        ᛧeqBooleanImpl = Get(foreign, "eqBooleanImpl")
    })
    return ᛧeqBooleanImpl
}

var ᛌeqIntImpl_once Once
var ᛧeqIntImpl Any

func ꞋeqIntImpl() Any { 
    ᛌeqIntImpl_once.Do(func() {
        ᛧeqIntImpl = Get(foreign, "eqIntImpl")
    })
    return ᛧeqIntImpl
}

var ᛌeqNumberImpl_once Once
var ᛧeqNumberImpl Any

func ꞋeqNumberImpl() Any { 
    ᛌeqNumberImpl_once.Do(func() {
        ᛧeqNumberImpl = Get(foreign, "eqNumberImpl")
    })
    return ᛧeqNumberImpl
}

var ᛌeqCharImpl_once Once
var ᛧeqCharImpl Any

func ꞋeqCharImpl() Any { 
    ᛌeqCharImpl_once.Do(func() {
        ᛧeqCharImpl = Get(foreign, "eqCharImpl")
    })
    return ᛧeqCharImpl
}

var ᛌeqStringImpl_once Once
var ᛧeqStringImpl Any

func ꞋeqStringImpl() Any { 
    ᛌeqStringImpl_once.Do(func() {
        ᛧeqStringImpl = Get(foreign, "eqStringImpl")
    })
    return ᛧeqStringImpl
}

var ᛌeqArrayImpl_once Once
var ᛧeqArrayImpl Any

func ꞋeqArrayImpl() Any { 
    ᛌeqArrayImpl_once.Do(func() {
        ᛧeqArrayImpl = Get(foreign, "eqArrayImpl")
    })
    return ᛧeqArrayImpl
}


