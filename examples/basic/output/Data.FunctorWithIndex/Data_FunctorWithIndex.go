// Code generated by psgo. DO NOT EDIT.

package Data_FunctorWithIndex

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Monoid.Multiplicative"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Maybe.Last"
	"project.localhost/purescript-native/output/Data.Maybe.First"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Data.Monoid.Disj"
	"project.localhost/purescript-native/output/Data.Monoid.Conj"
	"project.localhost/purescript-native/output/Data.Monoid.Additive"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Functor.Product"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Const"
	"project.localhost/purescript-native/output/Data.Functor.Compose"
	"project.localhost/purescript-native/output/Data.Functor.App"
)

type _ = Any

func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Tuple.ꞋfunctorTuple())
}
func Ꞌbimap() Any {
    return Apply(Data_Bifunctor.Ꞌbimap(), Data_Bifunctor.ꞋbifunctorTuple())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌmap1() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Monoid_Multiplicative.ꞋfunctorMultiplicative())
}
func Ꞌmap2() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe.ꞋfunctorMaybe())
}
func Ꞌmap3() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe_Last.ꞋfunctorLast())
}
func Ꞌmap4() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe_First.ꞋfunctorFirst())
}
func Ꞌmap5() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Either.ꞋfunctorEither())
}
func Ꞌmap6() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Monoid_Dual.ꞋfunctorDual())
}
func Ꞌmap7() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Monoid_Disj.ꞋfunctorDisj())
}
func Ꞌbimap1() Any {
    return Apply(Data_Bifunctor.Ꞌbimap(), Data_Bifunctor.ꞋbifunctorEither())
}
func Ꞌmap8() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Monoid_Conj.ꞋfunctorConj())
}
func Ꞌmap9() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Monoid_Additive.ꞋfunctorAdditive())
}
func ꞋFunctorWithIndex_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋmapWithIndex() Any {
    return func(dict Any) Any {
        return dict.(Dict)["mapWithIndex"]
    }
}
func ꞋmapDefault() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex1 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex)
        return func(f Any) Any {
            return Apply(mapWithIndex1, Apply(Data_Function.Ꞌconst(), f))
        }
    }
}

var ᛌfunctorWithIndexTuple_once Once
var ᛧfunctorWithIndexTuple Any

func ꞋfunctorWithIndexTuple() Any {
    ᛌfunctorWithIndexTuple_once.Do(func() {
        ᛧfunctorWithIndexTuple = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Tuple.ꞋfunctorTuple()
        },}
    })
return ᛧfunctorWithIndexTuple
}


func ꞋfunctorWithIndexProduct() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex1 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex)
        var functorProduct Any = Apply(Data_Functor_Product.ꞋfunctorProduct(), Apply(dictFunctorWithIndex.(Dict)["Functor0"], Undefined))
        return func(dictFunctorWithIndex1 Any) Any {
            var mapWithIndex2 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex1)
            var functorProduct1 Any = Apply(functorProduct, Apply(dictFunctorWithIndex1.(Dict)["Functor0"], Undefined))
            return Dict{"mapWithIndex": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(Ꞌbimap(), Apply(mapWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft())), Apply(mapWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight())), v)
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorProduct1
                },}
        }
    }
}

var ᛌfunctorWithIndexMultiplicative_once Once
var ᛧfunctorWithIndexMultiplicative Any

func ꞋfunctorWithIndexMultiplicative() Any {
    ᛌfunctorWithIndexMultiplicative_once.Do(func() {
        ᛧfunctorWithIndexMultiplicative = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap1(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Multiplicative.ꞋfunctorMultiplicative()
        },}
    })
return ᛧfunctorWithIndexMultiplicative
}



var ᛌfunctorWithIndexMaybe_once Once
var ᛧfunctorWithIndexMaybe Any

func ꞋfunctorWithIndexMaybe() Any {
    ᛌfunctorWithIndexMaybe_once.Do(func() {
        ᛧfunctorWithIndexMaybe = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap2(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe.ꞋfunctorMaybe()
        },}
    })
return ᛧfunctorWithIndexMaybe
}



var ᛌfunctorWithIndexLast_once Once
var ᛧfunctorWithIndexLast Any

func ꞋfunctorWithIndexLast() Any {
    ᛌfunctorWithIndexLast_once.Do(func() {
        ᛧfunctorWithIndexLast = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap3(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe_Last.ꞋfunctorLast()
        },}
    })
return ᛧfunctorWithIndexLast
}



var ᛌfunctorWithIndexIdentity_once Once
var ᛧfunctorWithIndexIdentity Any

func ꞋfunctorWithIndexIdentity() Any {
    ᛌfunctorWithIndexIdentity_once.Do(func() {
        ᛧfunctorWithIndexIdentity = Dict{"mapWithIndex": func(f Any) Any {
            return func(v Any) Any {
                return Apply(f, Data_Unit.Ꞌunit(), v)
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Identity.ꞋfunctorIdentity()
        },}
    })
return ᛧfunctorWithIndexIdentity
}



var ᛌfunctorWithIndexFirst_once Once
var ᛧfunctorWithIndexFirst Any

func ꞋfunctorWithIndexFirst() Any {
    ᛌfunctorWithIndexFirst_once.Do(func() {
        ᛧfunctorWithIndexFirst = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap4(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Maybe_First.ꞋfunctorFirst()
        },}
    })
return ᛧfunctorWithIndexFirst
}



var ᛌfunctorWithIndexEither_once Once
var ᛧfunctorWithIndexEither Any

func ꞋfunctorWithIndexEither() Any {
    ᛌfunctorWithIndexEither_once.Do(func() {
        ᛧfunctorWithIndexEither = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap5(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Either.ꞋfunctorEither()
        },}
    })
return ᛧfunctorWithIndexEither
}



var ᛌfunctorWithIndexDual_once Once
var ᛧfunctorWithIndexDual Any

func ꞋfunctorWithIndexDual() Any {
    ᛌfunctorWithIndexDual_once.Do(func() {
        ᛧfunctorWithIndexDual = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap6(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Dual.ꞋfunctorDual()
        },}
    })
return ᛧfunctorWithIndexDual
}



var ᛌfunctorWithIndexDisj_once Once
var ᛧfunctorWithIndexDisj Any

func ꞋfunctorWithIndexDisj() Any {
    ᛌfunctorWithIndexDisj_once.Do(func() {
        ᛧfunctorWithIndexDisj = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap7(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Disj.ꞋfunctorDisj()
        },}
    })
return ᛧfunctorWithIndexDisj
}


func ꞋfunctorWithIndexCoproduct() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex1 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex)
        var functorCoproduct Any = Apply(Data_Functor_Coproduct.ꞋfunctorCoproduct(), Apply(dictFunctorWithIndex.(Dict)["Functor0"], Undefined))
        return func(dictFunctorWithIndex1 Any) Any {
            var mapWithIndex2 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex1)
            var functorCoproduct1 Any = Apply(functorCoproduct, Apply(dictFunctorWithIndex1.(Dict)["Functor0"], Undefined))
            return Dict{"mapWithIndex": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(Ꞌbimap1(), Apply(mapWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft())), Apply(mapWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight())), v)
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorCoproduct1
                },}
        }
    }
}

var ᛌfunctorWithIndexConst_once Once
var ᛧfunctorWithIndexConst Any

func ꞋfunctorWithIndexConst() Any {
    ᛌfunctorWithIndexConst_once.Do(func() {
        ᛧfunctorWithIndexConst = Dict{"mapWithIndex": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Const.ꞋfunctorConst()
        },}
    })
return ᛧfunctorWithIndexConst
}



var ᛌfunctorWithIndexConj_once Once
var ᛧfunctorWithIndexConj Any

func ꞋfunctorWithIndexConj() Any {
    ᛌfunctorWithIndexConj_once.Do(func() {
        ᛧfunctorWithIndexConj = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap8(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Conj.ꞋfunctorConj()
        },}
    })
return ᛧfunctorWithIndexConj
}


func ꞋfunctorWithIndexCompose() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex1 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex)
        var functorCompose Any = Apply(Data_Functor_Compose.ꞋfunctorCompose(), Apply(dictFunctorWithIndex.(Dict)["Functor0"], Undefined))
        return func(dictFunctorWithIndex1 Any) Any {
            var mapWithIndex2 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex1)
            var functorCompose1 Any = Apply(functorCompose, Apply(dictFunctorWithIndex1.(Dict)["Functor0"], Undefined))
            return Dict{"mapWithIndex": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(mapWithIndex1, Apply(Ꞌcompose(), mapWithIndex2, Apply(Data_Tuple.Ꞌcurry(), f)), v)
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorCompose1
                },}
        }
    }
}

var ᛌfunctorWithIndexArray_once Once
var ᛧfunctorWithIndexArray Any

func ꞋfunctorWithIndexArray() Any {
    ᛌfunctorWithIndexArray_once.Do(func() {
        ᛧfunctorWithIndexArray = Dict{"mapWithIndex": ꞋmapWithIndexArray(), "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorArray()
        },}
    })
return ᛧfunctorWithIndexArray
}


func ꞋfunctorWithIndexApp() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex1 Any = Apply(ꞋmapWithIndex(), dictFunctorWithIndex)
        var functorApp Any = Apply(Data_Functor_App.ꞋfunctorApp(), Apply(dictFunctorWithIndex.(Dict)["Functor0"], Undefined))
        return Dict{"mapWithIndex": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(mapWithIndex1, f, v)
                }
            }, "Functor0": func(_ Any) Any {
                return functorApp
            },}
    }
}

var ᛌfunctorWithIndexAdditive_once Once
var ᛧfunctorWithIndexAdditive Any

func ꞋfunctorWithIndexAdditive() Any {
    ᛌfunctorWithIndexAdditive_once.Do(func() {
        ᛧfunctorWithIndexAdditive = Dict{"mapWithIndex": func(f Any) Any {
            return Apply(Ꞌmap9(), Apply(f, Data_Unit.Ꞌunit()))
        }, "Functor0": func(_ Any) Any {
            return Data_Monoid_Additive.ꞋfunctorAdditive()
        },}
    })
return ᛧfunctorWithIndexAdditive
}




// Foreign values

var foreign = Foreign("Data.FunctorWithIndex")

var ᛌmapWithIndexArray_once Once
var ᛧmapWithIndexArray Any

func ꞋmapWithIndexArray() Any { 
    ᛌmapWithIndexArray_once.Do(func() {
        ᛧmapWithIndexArray = Get(foreign, "mapWithIndexArray")
    })
    return ᛧmapWithIndexArray
}


