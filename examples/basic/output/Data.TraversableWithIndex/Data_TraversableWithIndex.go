// Code generated by psgo. DO NOT EDIT.

package Data_TraversableWithIndex

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.FunctorWithIndex"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.FoldableWithIndex"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Functor.Product"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Identity"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Functor.Compose"
	"project.localhost/purescript-native/output/Data.Functor.App"
	"project.localhost/purescript-native/output/Data.Traversable.Accum.Internal"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌtraverse() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableMultiplicative())
}
func Ꞌtraverse1() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableMaybe())
}
func Ꞌtraverse2() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableLast())
}
func Ꞌtraverse3() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableFirst())
}
func Ꞌtraverse4() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableDual())
}
func Ꞌtraverse5() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableDisj())
}
func Ꞌtraverse6() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableConj())
}
func Ꞌtraverse7() Any {
    return Apply(Data_Traversable.Ꞌtraverse(), Data_Traversable.ꞋtraversableAdditive())
}
func ꞋTraversableWithIndex_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋtraverseWithIndexDefault() Any {
    return func(dictTraversableWithIndex Any) Any {
        var sequence Any = Apply(Data_Traversable.Ꞌsequence(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        var mapWithIndex Any = Apply(Data_FunctorWithIndex.ꞋmapWithIndex(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        return func(dictApplicative Any) Any {
            var sequence1 Any = Apply(sequence, dictApplicative)
            return func(f Any) Any {
                return Apply(Ꞌcompose(), sequence1, Apply(mapWithIndex, f))
            }
        }
    }
}
func ꞋtraverseWithIndex() Any {
    return func(dict Any) Any {
        return dict.(Dict)["traverseWithIndex"]
    }
}
func ꞋtraverseDefault() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex)
        return func(dictApplicative Any) Any {
            var traverseWithIndex2 Any = Apply(traverseWithIndex1, dictApplicative)
            return func(f Any) Any {
                return Apply(traverseWithIndex2, Apply(Data_Function.Ꞌconst(), f))
            }
        }
    }
}

var ᛌtraversableWithIndexTuple_once Once
var ᛧtraversableWithIndexTuple Any

func ꞋtraversableWithIndexTuple() Any {
    ᛌtraversableWithIndexTuple_once.Do(func() {
        ᛧtraversableWithIndexTuple = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), Apply(f, Data_Unit.Ꞌunit(), v.(Dict)["value1"]))
                }
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexTuple()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexTuple()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableTuple()
        },}
    })
return ᛧtraversableWithIndexTuple
}


func ꞋtraversableWithIndexProduct() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex)
        var functorWithIndexProduct Any = Apply(Data_FunctorWithIndex.ꞋfunctorWithIndexProduct(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        var foldableWithIndexProduct Any = Apply(Data_FoldableWithIndex.ꞋfoldableWithIndexProduct(), Apply(dictTraversableWithIndex.(Dict)["FoldableWithIndex1"], Undefined))
        var traversableProduct Any = Apply(Data_Traversable.ꞋtraversableProduct(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        return func(dictTraversableWithIndex1 Any) Any {
            var traverseWithIndex2 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex1)
            var functorWithIndexProduct1 Any = Apply(functorWithIndexProduct, Apply(dictTraversableWithIndex1.(Dict)["FunctorWithIndex0"], Undefined))
            var foldableWithIndexProduct1 Any = Apply(foldableWithIndexProduct, Apply(dictTraversableWithIndex1.(Dict)["FoldableWithIndex1"], Undefined))
            var traversableProduct1 Any = Apply(traversableProduct, Apply(dictTraversableWithIndex1.(Dict)["Traversable2"], Undefined))
            return Dict{"traverseWithIndex": func(dictApplicative Any) Any {
                    var lift2 Any = Apply(Control_Apply.Ꞌlift2(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
                    var traverseWithIndex3 Any = Apply(traverseWithIndex1, dictApplicative)
                    var traverseWithIndex4 Any = Apply(traverseWithIndex2, dictApplicative)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(lift2, Data_Functor_Product.Ꞌproduct(), Apply(traverseWithIndex3, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), v.(Dict)["value0"]), Apply(traverseWithIndex4, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), v.(Dict)["value1"]))
                        }
                    }
                }, "FunctorWithIndex0": func(_ Any) Any {
                    return functorWithIndexProduct1
                }, "FoldableWithIndex1": func(_ Any) Any {
                    return foldableWithIndexProduct1
                }, "Traversable2": func(_ Any) Any {
                    return traversableProduct1
                },}
        }
    }
}

var ᛌtraversableWithIndexMultiplicative_once Once
var ᛧtraversableWithIndexMultiplicative Any

func ꞋtraversableWithIndexMultiplicative() Any {
    ᛌtraversableWithIndexMultiplicative_once.Do(func() {
        ᛧtraversableWithIndexMultiplicative = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexMultiplicative()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexMultiplicative()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableMultiplicative()
        },}
    })
return ᛧtraversableWithIndexMultiplicative
}



var ᛌtraversableWithIndexMaybe_once Once
var ᛧtraversableWithIndexMaybe Any

func ꞋtraversableWithIndexMaybe() Any {
    ᛌtraversableWithIndexMaybe_once.Do(func() {
        ᛧtraversableWithIndexMaybe = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse1(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexMaybe()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexMaybe()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableMaybe()
        },}
    })
return ᛧtraversableWithIndexMaybe
}



var ᛌtraversableWithIndexLast_once Once
var ᛧtraversableWithIndexLast Any

func ꞋtraversableWithIndexLast() Any {
    ᛌtraversableWithIndexLast_once.Do(func() {
        ᛧtraversableWithIndexLast = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse2(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexLast()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexLast()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableLast()
        },}
    })
return ᛧtraversableWithIndexLast
}



var ᛌtraversableWithIndexIdentity_once Once
var ᛧtraversableWithIndexIdentity Any

func ꞋtraversableWithIndexIdentity() Any {
    ᛌtraversableWithIndexIdentity_once.Do(func() {
        ᛧtraversableWithIndexIdentity = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Identity.ꞋIdentity(), Apply(f, Data_Unit.Ꞌunit(), v))
                }
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexIdentity()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexIdentity()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableIdentity()
        },}
    })
return ᛧtraversableWithIndexIdentity
}



var ᛌtraversableWithIndexFirst_once Once
var ᛧtraversableWithIndexFirst Any

func ꞋtraversableWithIndexFirst() Any {
    ᛌtraversableWithIndexFirst_once.Do(func() {
        ᛧtraversableWithIndexFirst = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse3(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexFirst()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexFirst()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableFirst()
        },}
    })
return ᛧtraversableWithIndexFirst
}



var ᛌtraversableWithIndexEither_once Once
var ᛧtraversableWithIndexEither Any

func ꞋtraversableWithIndexEither() Any {
    ᛌtraversableWithIndexEither_once.Do(func() {
        ᛧtraversableWithIndexEither = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v1, "Left") {
                        return Apply(pure, Apply(Data_Either.ꞋLeft(), v1.(Dict)["value0"]))
                    }
                    if Is(v1, "Right") {
                        return Apply(ˉmap, Data_Either.ꞋRight(), Apply(v, Data_Unit.Ꞌunit(), v1.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.TraversableWithIndex (line 95, column 1 - line 97, column 53)")
                }
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexEither()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexEither()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableEither()
        },}
    })
return ᛧtraversableWithIndexEither
}



var ᛌtraversableWithIndexDual_once Once
var ᛧtraversableWithIndexDual Any

func ꞋtraversableWithIndexDual() Any {
    ᛌtraversableWithIndexDual_once.Do(func() {
        ᛧtraversableWithIndexDual = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse4(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexDual()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexDual()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableDual()
        },}
    })
return ᛧtraversableWithIndexDual
}



var ᛌtraversableWithIndexDisj_once Once
var ᛧtraversableWithIndexDisj Any

func ꞋtraversableWithIndexDisj() Any {
    ᛌtraversableWithIndexDisj_once.Do(func() {
        ᛧtraversableWithIndexDisj = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse5(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexDisj()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexDisj()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableDisj()
        },}
    })
return ᛧtraversableWithIndexDisj
}


func ꞋtraversableWithIndexCoproduct() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex)
        var functorWithIndexCoproduct Any = Apply(Data_FunctorWithIndex.ꞋfunctorWithIndexCoproduct(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        var foldableWithIndexCoproduct Any = Apply(Data_FoldableWithIndex.ꞋfoldableWithIndexCoproduct(), Apply(dictTraversableWithIndex.(Dict)["FoldableWithIndex1"], Undefined))
        var traversableCoproduct Any = Apply(Data_Traversable.ꞋtraversableCoproduct(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        return func(dictTraversableWithIndex1 Any) Any {
            var traverseWithIndex2 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex1)
            var functorWithIndexCoproduct1 Any = Apply(functorWithIndexCoproduct, Apply(dictTraversableWithIndex1.(Dict)["FunctorWithIndex0"], Undefined))
            var foldableWithIndexCoproduct1 Any = Apply(foldableWithIndexCoproduct, Apply(dictTraversableWithIndex1.(Dict)["FoldableWithIndex1"], Undefined))
            var traversableCoproduct1 Any = Apply(traversableCoproduct, Apply(dictTraversableWithIndex1.(Dict)["Traversable2"], Undefined))
            return Dict{"traverseWithIndex": func(dictApplicative Any) Any {
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                    var traverseWithIndex3 Any = Apply(traverseWithIndex1, dictApplicative)
                    var traverseWithIndex4 Any = Apply(traverseWithIndex2, dictApplicative)
                    return func(f Any) Any {
                        return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋLeft())), Apply(traverseWithIndex3, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()))), Apply(Ꞌcompose(), Apply(ˉmap, Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋRight())), Apply(traverseWithIndex4, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()))))
                    }
                }, "FunctorWithIndex0": func(_ Any) Any {
                    return functorWithIndexCoproduct1
                }, "FoldableWithIndex1": func(_ Any) Any {
                    return foldableWithIndexCoproduct1
                }, "Traversable2": func(_ Any) Any {
                    return traversableCoproduct1
                },}
        }
    }
}

var ᛌtraversableWithIndexConst_once Once
var ᛧtraversableWithIndexConst Any

func ꞋtraversableWithIndexConst() Any {
    ᛌtraversableWithIndexConst_once.Do(func() {
        ᛧtraversableWithIndexConst = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(pure, v1)
                }
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexConst()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexConst()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableConst()
        },}
    })
return ᛧtraversableWithIndexConst
}



var ᛌtraversableWithIndexConj_once Once
var ᛧtraversableWithIndexConj Any

func ꞋtraversableWithIndexConj() Any {
    ᛌtraversableWithIndexConj_once.Do(func() {
        ᛧtraversableWithIndexConj = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse6(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexConj()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexConj()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableConj()
        },}
    })
return ᛧtraversableWithIndexConj
}


func ꞋtraversableWithIndexCompose() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex)
        var functorWithIndexCompose Any = Apply(Data_FunctorWithIndex.ꞋfunctorWithIndexCompose(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        var foldableWithIndexCompose Any = Apply(Data_FoldableWithIndex.ꞋfoldableWithIndexCompose(), Apply(dictTraversableWithIndex.(Dict)["FoldableWithIndex1"], Undefined))
        var traversableCompose Any = Apply(Data_Traversable.ꞋtraversableCompose(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        return func(dictTraversableWithIndex1 Any) Any {
            var traverseWithIndex2 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex1)
            var functorWithIndexCompose1 Any = Apply(functorWithIndexCompose, Apply(dictTraversableWithIndex1.(Dict)["FunctorWithIndex0"], Undefined))
            var foldableWithIndexCompose1 Any = Apply(foldableWithIndexCompose, Apply(dictTraversableWithIndex1.(Dict)["FoldableWithIndex1"], Undefined))
            var traversableCompose1 Any = Apply(traversableCompose, Apply(dictTraversableWithIndex1.(Dict)["Traversable2"], Undefined))
            return Dict{"traverseWithIndex": func(dictApplicative Any) Any {
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                    var traverseWithIndex3 Any = Apply(traverseWithIndex1, dictApplicative)
                    var traverseWithIndex4 Any = Apply(traverseWithIndex2, dictApplicative)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(ˉmap, Data_Functor_Compose.ꞋCompose(), Apply(traverseWithIndex3, Apply(Ꞌcompose(), traverseWithIndex4, Apply(Data_Tuple.Ꞌcurry(), f)), v))
                        }
                    }
                }, "FunctorWithIndex0": func(_ Any) Any {
                    return functorWithIndexCompose1
                }, "FoldableWithIndex1": func(_ Any) Any {
                    return foldableWithIndexCompose1
                }, "Traversable2": func(_ Any) Any {
                    return traversableCompose1
                },}
        }
    }
}

var ᛌtraversableWithIndexArray_once Once
var ᛧtraversableWithIndexArray Any

func ꞋtraversableWithIndexArray() Any {
    ᛌtraversableWithIndexArray_once.Do(func() {
        ᛧtraversableWithIndexArray = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            return Apply(ꞋtraverseWithIndexDefault(), ꞋtraversableWithIndexArray(), dictApplicative)
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexArray()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexArray()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableArray()
        },}
    })
return ᛧtraversableWithIndexArray
}


func ꞋtraversableWithIndexApp() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex)
        var functorWithIndexApp Any = Apply(Data_FunctorWithIndex.ꞋfunctorWithIndexApp(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        var foldableWithIndexApp Any = Apply(Data_FoldableWithIndex.ꞋfoldableWithIndexApp(), Apply(dictTraversableWithIndex.(Dict)["FoldableWithIndex1"], Undefined))
        var traversableApp Any = Apply(Data_Traversable.ꞋtraversableApp(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        return Dict{"traverseWithIndex": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var traverseWithIndex2 Any = Apply(traverseWithIndex1, dictApplicative)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(ˉmap, Data_Functor_App.ꞋApp(), Apply(traverseWithIndex2, f, v))
                    }
                }
            }, "FunctorWithIndex0": func(_ Any) Any {
                return functorWithIndexApp
            }, "FoldableWithIndex1": func(_ Any) Any {
                return foldableWithIndexApp
            }, "Traversable2": func(_ Any) Any {
                return traversableApp
            },}
    }
}

var ᛌtraversableWithIndexAdditive_once Once
var ᛧtraversableWithIndexAdditive Any

func ꞋtraversableWithIndexAdditive() Any {
    ᛌtraversableWithIndexAdditive_once.Do(func() {
        ᛧtraversableWithIndexAdditive = Dict{"traverseWithIndex": func(dictApplicative Any) Any {
            var traverse8 Any = Apply(Ꞌtraverse7(), dictApplicative)
            return func(f Any) Any {
                return Apply(traverse8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "FunctorWithIndex0": func(_ Any) Any {
            return Data_FunctorWithIndex.ꞋfunctorWithIndexAdditive()
        }, "FoldableWithIndex1": func(_ Any) Any {
            return Data_FoldableWithIndex.ꞋfoldableWithIndexAdditive()
        }, "Traversable2": func(_ Any) Any {
            return Data_Traversable.ꞋtraversableAdditive()
        },}
    })
return ᛧtraversableWithIndexAdditive
}


func ꞋmapAccumRWithIndex() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex, Data_Traversable_Accum_Internal.ꞋapplicativeStateR())
        return func(f Any) Any {
            return func(s0 Any) Any {
                return func(xs Any) Any {
                    return Apply(Data_Traversable_Accum_Internal.ꞋstateR(), Apply(traverseWithIndex1, func(i Any) Any {
                        return func(a Any) Any {
                            return func(s Any) Any {
                                return Apply(f, i, s, a)
                            }
                        }
                    }, xs), s0)
                }
            }
        }
    }
}
func ꞋscanrWithIndex() Any {
    return func(dictTraversableWithIndex Any) Any {
        var mapAccumRWithIndex1 Any = Apply(ꞋmapAccumRWithIndex(), dictTraversableWithIndex)
        return func(f Any) Any {
            return func(b0 Any) Any {
                return func(xs Any) Any {
                    return Apply(mapAccumRWithIndex1, func(i Any) Any {
                        return func(b Any) Any {
                            return func(a Any) Any {
                                var bꞌ Any = Apply(f, i, a, b)
                                return Dict{"accum": bꞌ, "value": bꞌ,}
                            }
                        }
                    }, b0, xs).(Dict)["value"]
                }
            }
        }
    }
}
func ꞋmapAccumLWithIndex() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex1 Any = Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex, Data_Traversable_Accum_Internal.ꞋapplicativeStateL())
        return func(f Any) Any {
            return func(s0 Any) Any {
                return func(xs Any) Any {
                    return Apply(Data_Traversable_Accum_Internal.ꞋstateL(), Apply(traverseWithIndex1, func(i Any) Any {
                        return func(a Any) Any {
                            return func(s Any) Any {
                                return Apply(f, i, s, a)
                            }
                        }
                    }, xs), s0)
                }
            }
        }
    }
}
func ꞋscanlWithIndex() Any {
    return func(dictTraversableWithIndex Any) Any {
        var mapAccumLWithIndex1 Any = Apply(ꞋmapAccumLWithIndex(), dictTraversableWithIndex)
        return func(f Any) Any {
            return func(b0 Any) Any {
                return func(xs Any) Any {
                    return Apply(mapAccumLWithIndex1, func(i Any) Any {
                        return func(b Any) Any {
                            return func(a Any) Any {
                                var bꞌ Any = Apply(f, i, b, a)
                                return Dict{"accum": bꞌ, "value": bꞌ,}
                            }
                        }
                    }, b0, xs).(Dict)["value"]
                }
            }
        }
    }
}
func ꞋforWithIndex() Any {
    return func(dictApplicative Any) Any {
        return func(dictTraversableWithIndex Any) Any {
            return Apply(Data_Function.Ꞌflip(), Apply(ꞋtraverseWithIndex(), dictTraversableWithIndex, dictApplicative))
        }
    }
}



