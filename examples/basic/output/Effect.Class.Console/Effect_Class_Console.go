// Code generated by psgo. DO NOT EDIT.

package Effect_Class_Console

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Effect.Class"
	"project.localhost/purescript-native/output/Effect.Console"
	"project.localhost/purescript-native/output/Control.Applicative"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌdiscard() Any {
    return Apply(Control_Bind.Ꞌdiscard(), Control_Bind.ꞋdiscardUnit())
}
func ꞋwarnShow() Any {
    return func(dictMonadEffect Any) Any {
        var liftEffect Any = Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect)
        return func(dictShow Any) Any {
            return Apply(Ꞌcompose(), liftEffect, Apply(Effect_Console.ꞋwarnShow(), dictShow))
        }
    }
}
func Ꞌwarn() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌwarn())
    }
}
func ꞋtimeLog() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.ꞋtimeLog())
    }
}
func ꞋtimeEnd() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.ꞋtimeEnd())
    }
}
func Ꞌtime() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌtime())
    }
}
func ꞋlogShow() Any {
    return func(dictMonadEffect Any) Any {
        var liftEffect Any = Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect)
        return func(dictShow Any) Any {
            return Apply(Ꞌcompose(), liftEffect, Apply(Effect_Console.ꞋlogShow(), dictShow))
        }
    }
}
func Ꞌlog() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌlog())
    }
}
func ꞋinfoShow() Any {
    return func(dictMonadEffect Any) Any {
        var liftEffect Any = Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect)
        return func(dictShow Any) Any {
            return Apply(Ꞌcompose(), liftEffect, Apply(Effect_Console.ꞋinfoShow(), dictShow))
        }
    }
}
func Ꞌinfo() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌinfo())
    }
}
func ꞋgroupEnd() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect, Effect_Console.ꞋgroupEnd())
    }
}
func ꞋgroupCollapsed() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.ꞋgroupCollapsed())
    }
}
func Ꞌgroup() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌgroup())
    }
}
func Ꞌgrouped() Any {
    return func(dictMonadEffect Any) Any {
        var Monad0 Any = Apply(dictMonadEffect.(Dict)["Monad0"], Undefined)
        var Bind1 Any = Apply(Monad0.(Dict)["Bind1"], Undefined)
        var discard1 Any = Apply(Ꞌdiscard(), Bind1)
        var group1 Any = Apply(Ꞌgroup(), dictMonadEffect)
        var bind Any = Apply(Control_Bind.Ꞌbind(), Bind1)
        var groupEnd1 Any = Apply(ꞋgroupEnd(), dictMonadEffect)
        var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(Monad0.(Dict)["Applicative0"], Undefined))
        return func(name Any) Any {
            return func(inner Any) Any {
                return Apply(discard1, Apply(group1, name), func(_ Any) Any {
                    return Apply(bind, inner, func(result Any) Any {
                        return Apply(discard1, groupEnd1, func(_ Any) Any {
                            return Apply(pure, result)
                        })
                    })
                })
            }
        }
    }
}
func ꞋerrorShow() Any {
    return func(dictMonadEffect Any) Any {
        var liftEffect Any = Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect)
        return func(dictShow Any) Any {
            return Apply(Ꞌcompose(), liftEffect, Apply(Effect_Console.ꞋerrorShow(), dictShow))
        }
    }
}
func Ꞌerror() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌerror())
    }
}
func ꞋdebugShow() Any {
    return func(dictMonadEffect Any) Any {
        var liftEffect Any = Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect)
        return func(dictShow Any) Any {
            return Apply(Ꞌcompose(), liftEffect, Apply(Effect_Console.ꞋdebugShow(), dictShow))
        }
    }
}
func Ꞌdebug() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Ꞌcompose(), Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect), Effect_Console.Ꞌdebug())
    }
}
func Ꞌclear() Any {
    return func(dictMonadEffect Any) Any {
        return Apply(Effect_Class.ꞋliftEffect(), dictMonadEffect, Effect_Console.Ꞌclear())
    }
}



