// Code generated by psgo. DO NOT EDIT.

package Data_Functor

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
)

type _ = Any

func ꞋFunctor_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌmap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["map"]
    }
}
func ꞋmapFlipped() Any {
    return func(dictFunctor Any) Any {
        var map1 Any = Apply(Ꞌmap(), dictFunctor)
        return func(fa Any) Any {
            return func(f Any) Any {
                return Apply(map1, f, fa)
            }
        }
    }
}
func Ꞌvoid() Any {
    return func(dictFunctor Any) Any {
        return Apply(Ꞌmap(), dictFunctor, Apply(Data_Function.Ꞌconst(), Data_Unit.Ꞌunit()))
    }
}
func ꞋvoidLeft() Any {
    return func(dictFunctor Any) Any {
        var map1 Any = Apply(Ꞌmap(), dictFunctor)
        return func(f Any) Any {
            return func(x Any) Any {
                return Apply(map1, Apply(Data_Function.Ꞌconst(), x), f)
            }
        }
    }
}
func ꞋvoidRight() Any {
    return func(dictFunctor Any) Any {
        var map1 Any = Apply(Ꞌmap(), dictFunctor)
        return func(x Any) Any {
            return Apply(map1, Apply(Data_Function.Ꞌconst(), x))
        }
    }
}

var ᛌfunctorProxy_once Once
var ᛧfunctorProxy Any

func ꞋfunctorProxy() Any {
    ᛌfunctorProxy_once.Do(func() {
        ᛧfunctorProxy = Dict{"map": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        },}
    })
return ᛧfunctorProxy
}



var ᛌfunctorFn_once Once
var ᛧfunctorFn Any

func ꞋfunctorFn() Any {
    ᛌfunctorFn_once.Do(func() {
        ᛧfunctorFn = Dict{"map": Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn()),}
    })
return ᛧfunctorFn
}



var ᛌfunctorArray_once Once
var ᛧfunctorArray Any

func ꞋfunctorArray() Any {
    ᛌfunctorArray_once.Do(func() {
        ᛧfunctorArray = Dict{"map": ꞋarrayMap(),}
    })
return ᛧfunctorArray
}


func Ꞌflap() Any {
    return func(dictFunctor Any) Any {
        var map1 Any = Apply(Ꞌmap(), dictFunctor)
        return func(ff Any) Any {
            return func(x Any) Any {
                return Apply(map1, func(f Any) Any {
                    return Apply(f, x)
                }, ff)
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Functor")

var ᛌarrayMap_once Once
var ᛧarrayMap Any

func ꞋarrayMap() Any { 
    ᛌarrayMap_once.Do(func() {
        ᛧarrayMap = Get(foreign, "arrayMap")
    })
    return ᛧarrayMap
}


