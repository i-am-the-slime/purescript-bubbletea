// Code generated by psgo. DO NOT EDIT.

package Data_EuclideanRing

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.CommutativeRing"
)

type _ = Any

func Ꞌdisj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌdisj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋEuclideanRing_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌmod() Any {
    return func(dict Any) Any {
        return dict.(Dict)["mod"]
    }
}
func Ꞌgcd() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(dictEuclideanRing Any) Any {
            var zero Any = Apply(Data_Semiring.Ꞌzero(), Apply(Apply(Apply(dictEuclideanRing.(Dict)["CommutativeRing0"], Undefined).(Dict)["Ring0"], Undefined).(Dict)["Semiring0"], Undefined))
            var mod1 Any = Apply(Ꞌmod(), dictEuclideanRing)
            return func(a Any) Any {
                return func(b Any) Any {
                    var ṩ6 Any = Apply(eq, b, zero)
                    if ṩ6 == true {
                        return a
                    }
                    return Apply(Ꞌgcd(), dictEq, dictEuclideanRing, b, Apply(mod1, a, b))
                }
            }
        }
    }
}

var ᛌeuclideanRingNumber_once Once
var ᛧeuclideanRingNumber Any

func ꞋeuclideanRingNumber() Any {
    ᛌeuclideanRingNumber_once.Do(func() {
        ᛧeuclideanRingNumber = Dict{"degree": func(v Any) Any {
            return 1
        }, "div": ꞋnumDiv(), "mod": func(v Any) Any {
            return func(v1 Any) Any {
                return 0.0
            }
        }, "CommutativeRing0": func(_ Any) Any {
            return Data_CommutativeRing.ꞋcommutativeRingNumber()
        },}
    })
return ᛧeuclideanRingNumber
}



var ᛌeuclideanRingInt_once Once
var ᛧeuclideanRingInt Any

func ꞋeuclideanRingInt() Any {
    ᛌeuclideanRingInt_once.Do(func() {
        ᛧeuclideanRingInt = Dict{"degree": ꞋintDegree(), "div": ꞋintDiv(), "mod": ꞋintMod(), "CommutativeRing0": func(_ Any) Any {
            return Data_CommutativeRing.ꞋcommutativeRingInt()
        },}
    })
return ᛧeuclideanRingInt
}


func Ꞌdiv() Any {
    return func(dict Any) Any {
        return dict.(Dict)["div"]
    }
}
func Ꞌlcm() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        var gcd1 Any = Apply(Ꞌgcd(), dictEq)
        return func(dictEuclideanRing Any) Any {
            var Semiring0 Any = Apply(Apply(Apply(dictEuclideanRing.(Dict)["CommutativeRing0"], Undefined).(Dict)["Ring0"], Undefined).(Dict)["Semiring0"], Undefined)
            var zero Any = Apply(Data_Semiring.Ꞌzero(), Semiring0)
            var div1 Any = Apply(Ꞌdiv(), dictEuclideanRing)
            var mul Any = Apply(Data_Semiring.Ꞌmul(), Semiring0)
            var gcd2 Any = Apply(gcd1, dictEuclideanRing)
            return func(a Any) Any {
                return func(b Any) Any {
                    var ṩ8 Any = Apply(Ꞌdisj(), Apply(eq, a, zero), Apply(eq, b, zero))
                    if ṩ8 == true {
                        return zero
                    }
                    return Apply(div1, Apply(mul, a, b), Apply(gcd2, a, b))
                }
            }
        }
    }
}
func Ꞌdegree() Any {
    return func(dict Any) Any {
        return dict.(Dict)["degree"]
    }
}


// Foreign values

var foreign = Foreign("Data.EuclideanRing")

var ᛌintDegree_once Once
var ᛧintDegree Any

func ꞋintDegree() Any { 
    ᛌintDegree_once.Do(func() {
        ᛧintDegree = Get(foreign, "intDegree")
    })
    return ᛧintDegree
}

var ᛌintDiv_once Once
var ᛧintDiv Any

func ꞋintDiv() Any { 
    ᛌintDiv_once.Do(func() {
        ᛧintDiv = Get(foreign, "intDiv")
    })
    return ᛧintDiv
}

var ᛌintMod_once Once
var ᛧintMod Any

func ꞋintMod() Any { 
    ᛌintMod_once.Do(func() {
        ᛧintMod = Get(foreign, "intMod")
    })
    return ᛧintMod
}

var ᛌnumDiv_once Once
var ᛧnumDiv Any

func ꞋnumDiv() Any { 
    ᛌnumDiv_once.Do(func() {
        ᛧnumDiv = Get(foreign, "numDiv")
    })
    return ᛧnumDiv
}


