// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Coproduct

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Control.Extend"
	"project.localhost/purescript-native/output/Control.Comonad"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌbimap() Any {
    return Apply(Data_Bifunctor.Ꞌbimap(), Data_Bifunctor.ꞋbifunctorEither())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋCoproduct() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowCoproduct() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    if Is(v, "Left") {
                        return Apply(Ꞌappend(), "(left ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), ")"))
                    }
                    if Is(v, "Right") {
                        return Apply(Ꞌappend(), "(right ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value0"]), ")"))
                    }
                    panic("Failed pattern match at Data.Functor.Coproduct (line 63, column 1 - line 65, column 60)")
                },}
        }
    }
}
func Ꞌright() Any {
    return func(ga Any) Any {
        return Apply(Data_Either.ꞋRight(), ga)
    }
}

var ᛌnewtypeCoproduct_once Once
var ᛧnewtypeCoproduct Any

func ꞋnewtypeCoproduct() Any {
    ᛌnewtypeCoproduct_once.Do(func() {
        ᛧnewtypeCoproduct = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeCoproduct
}


func Ꞌleft() Any {
    return func(fa Any) Any {
        return Apply(Data_Either.ꞋLeft(), fa)
    }
}
func ꞋfunctorCoproduct() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(dictFunctor1 Any) Any {
            var map1 Any = Apply(Data_Functor.Ꞌmap(), dictFunctor1)
            return Dict{"map": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(Ꞌbimap(), Apply(ˉmap, f), Apply(map1, f), v)
                    }
                },}
        }
    }
}
func Ꞌeq1Coproduct() Any {
    return func(dictEq1 Any) Any {
        var eq1 Any = Apply(Data_Eq.Ꞌeq1(), dictEq1)
        return func(dictEq11 Any) Any {
            var eq11 Any = Apply(Data_Eq.Ꞌeq1(), dictEq11)
            return Dict{"eq1": func(dictEq Any) Any {
                    var eq12 Any = Apply(eq1, dictEq)
                    var eq13 Any = Apply(eq11, dictEq)
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            if Is(v, "Left") && Is(v1, "Left") {
                                return Apply(eq12, v.(Dict)["value0"], v1.(Dict)["value0"])
                            }
                            if Is(v, "Right") && Is(v1, "Right") {
                                return Apply(eq13, v.(Dict)["value0"], v1.(Dict)["value0"])
                            }
                            return false
                        }
                    }
                },}
        }
    }
}
func ꞋeqCoproduct() Any {
    return func(dictEq1 Any) Any {
        var eq1Coproduct1 Any = Apply(Ꞌeq1Coproduct(), dictEq1)
        return func(dictEq11 Any) Any {
            var eq1 Any = Apply(Data_Eq.Ꞌeq1(), Apply(eq1Coproduct1, dictEq11))
            return func(dictEq Any) Any {
                return Dict{"eq": Apply(eq1, dictEq),}
            }
        }
    }
}
func Ꞌord1Coproduct() Any {
    return func(dictOrd1 Any) Any {
        var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd1)
        var eq1Coproduct1 Any = Apply(Ꞌeq1Coproduct(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var compare11 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd11)
            var eq1Coproduct2 Any = Apply(eq1Coproduct1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return Dict{"compare1": func(dictOrd Any) Any {
                    var compare12 Any = Apply(compare1, dictOrd)
                    var compare13 Any = Apply(compare11, dictOrd)
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            if Is(v, "Left") && Is(v1, "Left") {
                                return Apply(compare12, v.(Dict)["value0"], v1.(Dict)["value0"])
                            }
                            if Is(v, "Left") {
                                return Data_Ordering.ꞋLT()
                            }
                            if Is(v1, "Left") {
                                return Data_Ordering.ꞋGT()
                            }
                            if Is(v, "Right") && Is(v1, "Right") {
                                return Apply(compare13, v.(Dict)["value0"], v1.(Dict)["value0"])
                            }
                            panic("Failed pattern match at Data.Functor.Coproduct (line 57, column 5 - line 61, column 43)")
                        }
                    }
                }, "Eq10": func(_ Any) Any {
                    return eq1Coproduct2
                },}
        }
    }
}
func ꞋordCoproduct() Any {
    return func(dictOrd1 Any) Any {
        var ord1Coproduct1 Any = Apply(Ꞌord1Coproduct(), dictOrd1)
        var eqCoproduct1 Any = Apply(ꞋeqCoproduct(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), Apply(ord1Coproduct1, dictOrd11))
            var eqCoproduct2 Any = Apply(eqCoproduct1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return func(dictOrd Any) Any {
                var eqCoproduct3 Any = Apply(eqCoproduct2, Apply(dictOrd.(Dict)["Eq0"], Undefined))
                return Dict{"compare": Apply(compare1, dictOrd), "Eq0": func(_ Any) Any {
                        return eqCoproduct3
                    },}
            }
        }
    }
}
func Ꞌcoproduct() Any {
    return func(v Any) Any {
        return func(v1 Any) Any {
            return func(v2 Any) Any {
                if Is(v2, "Left") {
                    return Apply(v, v2.(Dict)["value0"])
                }
                if Is(v2, "Right") {
                    return Apply(v1, v2.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Functor.Coproduct (line 27, column 1 - line 27, column 78)")
            }
        }
    }
}
func ꞋextendCoproduct() Any {
    return func(dictExtend Any) Any {
        var extend Any = Apply(Control_Extend.Ꞌextend(), dictExtend)
        var functorCoproduct1 Any = Apply(ꞋfunctorCoproduct(), Apply(dictExtend.(Dict)["Functor0"], Undefined))
        return func(dictExtend1 Any) Any {
            var extend1 Any = Apply(Control_Extend.Ꞌextend(), dictExtend1)
            var functorCoproduct2 Any = Apply(functorCoproduct1, Apply(dictExtend1.(Dict)["Functor0"], Undefined))
            return Dict{"extend": func(f Any) Any {
                    return Apply(Ꞌcompose(), ꞋCoproduct(), Apply(Ꞌcoproduct(), Apply(Ꞌcompose(), Data_Either.ꞋLeft(), Apply(extend, Apply(Ꞌcompose(), f, Apply(Ꞌcompose(), ꞋCoproduct(), Data_Either.ꞋLeft())))), Apply(Ꞌcompose(), Data_Either.ꞋRight(), Apply(extend1, Apply(Ꞌcompose(), f, Apply(Ꞌcompose(), ꞋCoproduct(), Data_Either.ꞋRight()))))))
                }, "Functor0": func(_ Any) Any {
                    return functorCoproduct2
                },}
        }
    }
}
func ꞋcomonadCoproduct() Any {
    return func(dictComonad Any) Any {
        var extract Any = Apply(Control_Comonad.Ꞌextract(), dictComonad)
        var extendCoproduct1 Any = Apply(ꞋextendCoproduct(), Apply(dictComonad.(Dict)["Extend0"], Undefined))
        return func(dictComonad1 Any) Any {
            var extendCoproduct2 Any = Apply(extendCoproduct1, Apply(dictComonad1.(Dict)["Extend0"], Undefined))
            return Dict{"extract": Apply(Ꞌcoproduct(), extract, Apply(Control_Comonad.Ꞌextract(), dictComonad1)), "Extend0": func(_ Any) Any {
                    return extendCoproduct2
                },}
        }
    }
}
func ꞋbihoistCoproduct() Any {
    return func(natF Any) Any {
        return func(natG Any) Any {
            return func(v Any) Any {
                return Apply(Ꞌbimap(), natF, natG, v)
            }
        }
    }
}



