// Code generated by psgo. DO NOT EDIT.

package Data_Decidable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Void"
	"project.localhost/purescript-native/output/Data.Decide"
	"project.localhost/purescript-native/output/Data.Divisible"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋDecidable_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌlose() Any {
    return func(dict Any) Any {
        return dict.(Dict)["lose"]
    }
}
func Ꞌlost() Any {
    return func(dictDecidable Any) Any {
        return Apply(Ꞌlose(), dictDecidable, Ꞌidentity())
    }
}

var ᛌdecidablePredicate_once Once
var ᛧdecidablePredicate Any

func ꞋdecidablePredicate() Any {
    ᛌdecidablePredicate_once.Do(func() {
        ᛧdecidablePredicate = Dict{"lose": func(f Any) Any {
            return func(a Any) Any {
                return Apply(Data_Void.Ꞌabsurd(), Apply(f, a))
            }
        }, "Decide0": func(_ Any) Any {
            return Data_Decide.ꞋchoosePredicate()
        }, "Divisible1": func(_ Any) Any {
            return Data_Divisible.ꞋdivisiblePredicate()
        },}
    })
return ᛧdecidablePredicate
}


func ꞋdecidableOp() Any {
    return func(dictMonoid Any) Any {
        var chooseOp Any = Apply(Data_Decide.ꞋchooseOp(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        var divisibleOp Any = Apply(Data_Divisible.ꞋdivisibleOp(), dictMonoid)
        return Dict{"lose": func(f Any) Any {
                return func(a Any) Any {
                    return Apply(Data_Void.Ꞌabsurd(), Apply(f, a))
                }
            }, "Decide0": func(_ Any) Any {
                return chooseOp
            }, "Divisible1": func(_ Any) Any {
                return divisibleOp
            },}
    }
}

var ᛌdecidableEquivalence_once Once
var ᛧdecidableEquivalence Any

func ꞋdecidableEquivalence() Any {
    ᛌdecidableEquivalence_once.Do(func() {
        ᛧdecidableEquivalence = Dict{"lose": func(f Any) Any {
            return func(a Any) Any {
                return Apply(Data_Void.Ꞌabsurd(), Apply(f, a))
            }
        }, "Decide0": func(_ Any) Any {
            return Data_Decide.ꞋchooseEquivalence()
        }, "Divisible1": func(_ Any) Any {
            return Data_Divisible.ꞋdivisibleEquivalence()
        },}
    })
return ᛧdecidableEquivalence
}



var ᛌdecidableComparison_once Once
var ᛧdecidableComparison Any

func ꞋdecidableComparison() Any {
    ᛌdecidableComparison_once.Do(func() {
        ᛧdecidableComparison = Dict{"lose": func(f Any) Any {
            return func(a Any) Any {
                return func(v Any) Any {
                    return Apply(Data_Void.Ꞌabsurd(), Apply(f, a))
                }
            }
        }, "Decide0": func(_ Any) Any {
            return Data_Decide.ꞋchooseComparison()
        }, "Divisible1": func(_ Any) Any {
            return Data_Divisible.ꞋdivisibleComparison()
        },}
    })
return ᛧdecidableComparison
}





