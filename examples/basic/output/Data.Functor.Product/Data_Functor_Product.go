// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Product

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Applicative"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌbimap() Any {
    return Apply(Data_Bifunctor.Ꞌbimap(), Data_Bifunctor.ꞋbifunctorTuple())
}
func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func ꞋProduct() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowProduct() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(product ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value1"]), ")"))))
                },}
        }
    }
}
func Ꞌproduct() Any {
    return func(fa Any) Any {
        return func(ga Any) Any {
            return Apply(Data_Tuple.ꞋTuple(), fa, ga)
        }
    }
}

var ᛌnewtypeProduct_once Once
var ᛧnewtypeProduct Any

func ꞋnewtypeProduct() Any {
    ᛌnewtypeProduct_once.Do(func() {
        ᛧnewtypeProduct = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeProduct
}


func ꞋfunctorProduct() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(dictFunctor1 Any) Any {
            var map1 Any = Apply(Data_Functor.Ꞌmap(), dictFunctor1)
            return Dict{"map": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(Ꞌbimap(), Apply(ˉmap, f), Apply(map1, f), v)
                    }
                },}
        }
    }
}
func Ꞌeq1Product() Any {
    return func(dictEq1 Any) Any {
        var eq1 Any = Apply(Data_Eq.Ꞌeq1(), dictEq1)
        return func(dictEq11 Any) Any {
            var eq11 Any = Apply(Data_Eq.Ꞌeq1(), dictEq11)
            return Dict{"eq1": func(dictEq Any) Any {
                    var eq12 Any = Apply(eq1, dictEq)
                    var eq13 Any = Apply(eq11, dictEq)
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            return Apply(Ꞌconj(), Apply(eq12, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(eq13, v.(Dict)["value1"], v1.(Dict)["value1"]))
                        }
                    }
                },}
        }
    }
}
func ꞋeqProduct() Any {
    return func(dictEq1 Any) Any {
        var eq1Product1 Any = Apply(Ꞌeq1Product(), dictEq1)
        return func(dictEq11 Any) Any {
            var eq1 Any = Apply(Data_Eq.Ꞌeq1(), Apply(eq1Product1, dictEq11))
            return func(dictEq Any) Any {
                return Dict{"eq": Apply(eq1, dictEq),}
            }
        }
    }
}
func Ꞌord1Product() Any {
    return func(dictOrd1 Any) Any {
        var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd1)
        var eq1Product1 Any = Apply(Ꞌeq1Product(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var compare11 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd11)
            var eq1Product2 Any = Apply(eq1Product1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return Dict{"compare1": func(dictOrd Any) Any {
                    var compare12 Any = Apply(compare1, dictOrd)
                    var compare13 Any = Apply(compare11, dictOrd)
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            var v2 Any = Apply(compare12, v.(Dict)["value0"], v1.(Dict)["value0"])
                            if Is(v2, "EQ") {
                                return Apply(compare13, v.(Dict)["value1"], v1.(Dict)["value1"])
                            }
                            return v2
                        }
                    }
                }, "Eq10": func(_ Any) Any {
                    return eq1Product2
                },}
        }
    }
}
func ꞋordProduct() Any {
    return func(dictOrd1 Any) Any {
        var ord1Product1 Any = Apply(Ꞌord1Product(), dictOrd1)
        var eqProduct1 Any = Apply(ꞋeqProduct(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), Apply(ord1Product1, dictOrd11))
            var eqProduct2 Any = Apply(eqProduct1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return func(dictOrd Any) Any {
                var eqProduct3 Any = Apply(eqProduct2, Apply(dictOrd.(Dict)["Eq0"], Undefined))
                return Dict{"compare": Apply(compare1, dictOrd), "Eq0": func(_ Any) Any {
                        return eqProduct3
                    },}
            }
        }
    }
}
func ꞋbihoistProduct() Any {
    return func(natF Any) Any {
        return func(natG Any) Any {
            return func(v Any) Any {
                return Apply(Ꞌbimap(), natF, natG, v)
            }
        }
    }
}
func ꞋapplyProduct() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var functorProduct1 Any = Apply(ꞋfunctorProduct(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(dictApply1 Any) Any {
            var apply1 Any = Apply(Control_Apply.Ꞌapply(), dictApply1)
            var functorProduct2 Any = Apply(functorProduct1, Apply(dictApply1.(Dict)["Functor0"], Undefined))
            return Dict{"apply": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Ꞌproduct(), Apply(apply, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(apply1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorProduct2
                },}
        }
    }
}
func ꞋbindProduct() Any {
    return func(dictBind Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), dictBind)
        var applyProduct1 Any = Apply(ꞋapplyProduct(), Apply(dictBind.(Dict)["Apply0"], Undefined))
        return func(dictBind1 Any) Any {
            var bind1 Any = Apply(Control_Bind.Ꞌbind(), dictBind1)
            var applyProduct2 Any = Apply(applyProduct1, Apply(dictBind1.(Dict)["Apply0"], Undefined))
            return Dict{"bind": func(v Any) Any {
                    return func(f Any) Any {
                        return Apply(Ꞌproduct(), Apply(bind, v.(Dict)["value0"], Apply(Ꞌcompose(), Data_Tuple.Ꞌfst(), Apply(Ꞌcompose(), Ꞌunwrap(), f))), Apply(bind1, v.(Dict)["value1"], Apply(Ꞌcompose(), Data_Tuple.Ꞌsnd(), Apply(Ꞌcompose(), Ꞌunwrap(), f))))
                    }
                }, "Apply0": func(_ Any) Any {
                    return applyProduct2
                },}
        }
    }
}
func ꞋapplicativeProduct() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var applyProduct1 Any = Apply(ꞋapplyProduct(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return func(dictApplicative1 Any) Any {
            var pure1 Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative1)
            var applyProduct2 Any = Apply(applyProduct1, Apply(dictApplicative1.(Dict)["Apply0"], Undefined))
            return Dict{"pure": func(a Any) Any {
                    return Apply(Ꞌproduct(), Apply(pure, a), Apply(pure1, a))
                }, "Apply0": func(_ Any) Any {
                    return applyProduct2
                },}
        }
    }
}
func ꞋmonadProduct() Any {
    return func(dictMonad Any) Any {
        var applicativeProduct1 Any = Apply(ꞋapplicativeProduct(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        var bindProduct1 Any = Apply(ꞋbindProduct(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        return func(dictMonad1 Any) Any {
            var applicativeProduct2 Any = Apply(applicativeProduct1, Apply(dictMonad1.(Dict)["Applicative0"], Undefined))
            var bindProduct2 Any = Apply(bindProduct1, Apply(dictMonad1.(Dict)["Bind1"], Undefined))
            return Dict{"Applicative0": func(_ Any) Any {
                    return applicativeProduct2
                }, "Bind1": func(_ Any) Any {
                    return bindProduct2
                },}
        }
    }
}



