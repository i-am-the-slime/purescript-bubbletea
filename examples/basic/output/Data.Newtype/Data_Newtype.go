// Code generated by psgo. DO NOT EDIT.

package Data_Newtype

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Safe.Coerce"
)

type _ = Any

func Ꞌcoerce() Any {
    return Apply(Safe_Coerce.Ꞌcoerce(), Undefined)
}
func ꞋNewtype_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌwrap() Any {
    return func(_ Any) Any {
        return Ꞌcoerce()
    }
}
func Ꞌwrap1() Any {
    return Apply(Ꞌwrap(), Undefined)
}
func Ꞌunwrap() Any {
    return func(_ Any) Any {
        return Ꞌcoerce()
    }
}
func Ꞌunwrap1() Any {
    return Apply(Ꞌunwrap(), Undefined)
}
func ꞋunderF2() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(v Any) Any {
                        return Ꞌcoerce()
                    }
                }
            }
        }
    }
}
func ꞋunderF() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(v Any) Any {
                        return Ꞌcoerce()
                    }
                }
            }
        }
    }
}
func Ꞌunder2() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}
func Ꞌunder() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}
func Ꞌun() Any {
    return func(_ Any) Any {
        return func(v Any) Any {
            return Ꞌunwrap1()
        }
    }
}
func Ꞌtraverse() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}
func ꞋoverF2() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(v Any) Any {
                        return Ꞌcoerce()
                    }
                }
            }
        }
    }
}
func ꞋoverF() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(v Any) Any {
                        return Ꞌcoerce()
                    }
                }
            }
        }
    }
}
func Ꞌover2() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}
func Ꞌover() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}

var ᛌnewtypeMultiplicative_once Once
var ᛧnewtypeMultiplicative Any

func ꞋnewtypeMultiplicative() Any {
    ᛌnewtypeMultiplicative_once.Do(func() {
        ᛧnewtypeMultiplicative = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeMultiplicative
}



var ᛌnewtypeLast_once Once
var ᛧnewtypeLast Any

func ꞋnewtypeLast() Any {
    ᛌnewtypeLast_once.Do(func() {
        ᛧnewtypeLast = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeLast
}



var ᛌnewtypeFirst_once Once
var ᛧnewtypeFirst Any

func ꞋnewtypeFirst() Any {
    ᛌnewtypeFirst_once.Do(func() {
        ᛧnewtypeFirst = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeFirst
}



var ᛌnewtypeEndo_once Once
var ᛧnewtypeEndo Any

func ꞋnewtypeEndo() Any {
    ᛌnewtypeEndo_once.Do(func() {
        ᛧnewtypeEndo = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeEndo
}



var ᛌnewtypeDual_once Once
var ᛧnewtypeDual Any

func ꞋnewtypeDual() Any {
    ᛌnewtypeDual_once.Do(func() {
        ᛧnewtypeDual = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeDual
}



var ᛌnewtypeDisj_once Once
var ᛧnewtypeDisj Any

func ꞋnewtypeDisj() Any {
    ᛌnewtypeDisj_once.Do(func() {
        ᛧnewtypeDisj = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeDisj
}



var ᛌnewtypeConj_once Once
var ᛧnewtypeConj Any

func ꞋnewtypeConj() Any {
    ᛌnewtypeConj_once.Do(func() {
        ᛧnewtypeConj = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeConj
}



var ᛌnewtypeAdditive_once Once
var ᛧnewtypeAdditive Any

func ꞋnewtypeAdditive() Any {
    ᛌnewtypeAdditive_once.Do(func() {
        ᛧnewtypeAdditive = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeAdditive
}


func Ꞌmodify() Any {
    return func(_ Any) Any {
        return func(fn Any) Any {
            return func(t Any) Any {
                return Apply(Ꞌwrap1(), Apply(fn, Apply(Ꞌunwrap1(), t)))
            }
        }
    }
}
func Ꞌcollect() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(v Any) Any {
                return Ꞌcoerce()
            }
        }
    }
}
func ꞋalaF() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(_ Any) Any {
                    return func(v Any) Any {
                        return Ꞌcoerce()
                    }
                }
            }
        }
    }
}
func Ꞌala() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(_ Any) Any {
                return func(v Any) Any {
                    return func(f Any) Any {
                        return Apply(Ꞌcoerce(), Apply(f, Ꞌwrap1()))
                    }
                }
            }
        }
    }
}



