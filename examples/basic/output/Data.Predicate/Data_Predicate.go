// Code generated by psgo. DO NOT EDIT.

package Data_Predicate

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.BooleanAlgebra"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋPredicate() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌnewtypePredicate_once Once
var ᛧnewtypePredicate Any

func ꞋnewtypePredicate() Any {
    ᛌnewtypePredicate_once.Do(func() {
        ᛧnewtypePredicate = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypePredicate
}


func ꞋheytingAlgebraPredicate() Any {
    return Apply(Data_HeytingAlgebra.ꞋheytingAlgebraFunction(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}

var ᛌcontravariantPredicate_once Once
var ᛧcontravariantPredicate Any

func ꞋcontravariantPredicate() Any {
    ᛌcontravariantPredicate_once.Do(func() {
        ᛧcontravariantPredicate = Dict{"cmap": func(f Any) Any {
            return func(v Any) Any {
                return Apply(Ꞌcompose(), v, f)
            }
        },}
    })
return ᛧcontravariantPredicate
}


func ꞋbooleanAlgebraPredicate() Any {
    return Apply(Data_BooleanAlgebra.ꞋbooleanAlgebraFn(), Data_BooleanAlgebra.ꞋbooleanAlgebraBoolean())
}



