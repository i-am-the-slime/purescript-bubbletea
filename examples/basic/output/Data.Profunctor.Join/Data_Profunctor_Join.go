// Code generated by psgo. DO NOT EDIT.

package Data_Profunctor_Join

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Profunctor"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋJoin() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowJoin() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Join ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupJoin() Any {
    return func(dictSemigroupoid Any) Any {
        var compose Any = Apply(Control_Semigroupoid.Ꞌcompose(), dictSemigroupoid)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(compose, v, v1)
                }
            },}
    }
}
func ꞋordJoin() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeJoin_once Once
var ᛧnewtypeJoin Any

func ꞋnewtypeJoin() Any {
    ᛌnewtypeJoin_once.Do(func() {
        ᛧnewtypeJoin = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeJoin
}


func ꞋmonoidJoin() Any {
    return func(dictCategory Any) Any {
        var semigroupJoin1 Any = Apply(ꞋsemigroupJoin(), Apply(dictCategory.(Dict)["Semigroupoid0"], Undefined))
        return Dict{"mempty": Apply(Control_Category.Ꞌidentity(), dictCategory), "Semigroup0": func(_ Any) Any {
                return semigroupJoin1
            },}
    }
}
func ꞋinvariantJoin() Any {
    return func(dictProfunctor Any) Any {
        var dimap Any = Apply(Data_Profunctor.Ꞌdimap(), dictProfunctor)
        return Dict{"imap": func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(dimap, g, f, v)
                    }
                }
            },}
    }
}
func ꞋeqJoin() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}



