// Code generated by psgo. DO NOT EDIT.

package Data_Array_NonEmpty_Internal

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Unfoldable1"
	"project.localhost/purescript-native/output/Data.TraversableWithIndex"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Control.Monad"
	"project.localhost/purescript-native/output/Data.FunctorWithIndex"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.FoldableWithIndex"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.Semigroup.Foldable"
	"project.localhost/purescript-native/output/Data.Function.Uncurried"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Semigroup.Traversable"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Alt"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋNonEmptyArray() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌunfoldable1NonEmptyArray() Any {
    return Data_Unfoldable1.Ꞌunfoldable1Array()
}
func ꞋtraversableWithIndexNonEmptyArray() Any {
    return Data_TraversableWithIndex.ꞋtraversableWithIndexArray()
}
func ꞋtraversableNonEmptyArray() Any {
    return Data_Traversable.ꞋtraversableArray()
}
func ꞋshowNonEmptyArray() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), Apply(Data_Show.ꞋshowArray(), dictShow))
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(NonEmptyArray ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupNonEmptyArray() Any {
    return Data_Semigroup.ꞋsemigroupArray()
}
func ꞋordNonEmptyArray() Any {
    return func(dictOrd Any) Any {
        return Apply(Data_Ord.ꞋordArray(), dictOrd)
    }
}
func Ꞌord1NonEmptyArray() Any {
    return Data_Ord.Ꞌord1Array()
}
func ꞋmonadNonEmptyArray() Any {
    return Control_Monad.ꞋmonadArray()
}
func ꞋfunctorWithIndexNonEmptyArray() Any {
    return Data_FunctorWithIndex.ꞋfunctorWithIndexArray()
}
func ꞋfunctorNonEmptyArray() Any {
    return Data_Functor.ꞋfunctorArray()
}
func ꞋfoldableWithIndexNonEmptyArray() Any {
    return Data_FoldableWithIndex.ꞋfoldableWithIndexArray()
}
func ꞋfoldableNonEmptyArray() Any {
    return Data_Foldable.ꞋfoldableArray()
}

var ᛌfoldable1NonEmptyArray_once Once
var ᛧfoldable1NonEmptyArray Any

func Ꞌfoldable1NonEmptyArray() Any {
    ᛌfoldable1NonEmptyArray_once.Do(func() {
        ᛧfoldable1NonEmptyArray = Dict{"foldMap1": func(dictSemigroup Any) Any {
            return Apply(Data_Semigroup_Foldable.ꞋfoldMap1DefaultL(), Ꞌfoldable1NonEmptyArray(), ꞋfunctorNonEmptyArray(), dictSemigroup)
        }, "foldr1": Apply(Data_Function_Uncurried.ꞋrunFn2(), Ꞌfoldr1Impl()), "foldl1": Apply(Data_Function_Uncurried.ꞋrunFn2(), Ꞌfoldl1Impl()), "Foldable0": func(_ Any) Any {
            return ꞋfoldableNonEmptyArray()
        },}
    })
return ᛧfoldable1NonEmptyArray
}



var ᛌtraversable1NonEmptyArray_once Once
var ᛧtraversable1NonEmptyArray Any

func Ꞌtraversable1NonEmptyArray() Any {
    ᛌtraversable1NonEmptyArray_once.Do(func() {
        ᛧtraversable1NonEmptyArray = Dict{"traverse1": func(dictApply Any) Any {
            var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return Apply(Data_Function_Uncurried.ꞋrunFn3(), Ꞌtraverse1Impl(), apply, ˉmap, f)
            }
        }, "sequence1": func(dictApply Any) Any {
            return Apply(Data_Semigroup_Traversable.Ꞌsequence1Default(), Ꞌtraversable1NonEmptyArray(), dictApply)
        }, "Foldable10": func(_ Any) Any {
            return Ꞌfoldable1NonEmptyArray()
        }, "Traversable1": func(_ Any) Any {
            return ꞋtraversableNonEmptyArray()
        },}
    })
return ᛧtraversable1NonEmptyArray
}


func ꞋeqNonEmptyArray() Any {
    return func(dictEq Any) Any {
        return Apply(Data_Eq.ꞋeqArray(), dictEq)
    }
}
func Ꞌeq1NonEmptyArray() Any {
    return Data_Eq.Ꞌeq1Array()
}
func ꞋbindNonEmptyArray() Any {
    return Control_Bind.ꞋbindArray()
}
func ꞋapplyNonEmptyArray() Any {
    return Control_Apply.ꞋapplyArray()
}
func ꞋapplicativeNonEmptyArray() Any {
    return Control_Applicative.ꞋapplicativeArray()
}
func ꞋaltNonEmptyArray() Any {
    return Control_Alt.ꞋaltArray()
}


// Foreign values

var foreign = Foreign("Data.Array.NonEmpty.Internal")

var ᛌfoldr1Impl_once Once
var ᛧfoldr1Impl Any

func Ꞌfoldr1Impl() Any { 
    ᛌfoldr1Impl_once.Do(func() {
        ᛧfoldr1Impl = Get(foreign, "foldr1Impl")
    })
    return ᛧfoldr1Impl
}

var ᛌfoldl1Impl_once Once
var ᛧfoldl1Impl Any

func Ꞌfoldl1Impl() Any { 
    ᛌfoldl1Impl_once.Do(func() {
        ᛧfoldl1Impl = Get(foreign, "foldl1Impl")
    })
    return ᛧfoldl1Impl
}

var ᛌtraverse1Impl_once Once
var ᛧtraverse1Impl Any

func Ꞌtraverse1Impl() Any { 
    ᛌtraverse1Impl_once.Do(func() {
        ᛧtraverse1Impl = Get(foreign, "traverse1Impl")
    })
    return ᛧtraverse1Impl
}


