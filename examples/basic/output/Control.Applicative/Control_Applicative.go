// Code generated by psgo. DO NOT EDIT.

package Control_Applicative

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Type.Proxy"
)

type _ = Any

func ꞋApplicative_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌpure() Any {
    return func(dict Any) Any {
        return dict.(Dict)["pure"]
    }
}
func Ꞌunless() Any {
    return func(dictApplicative Any) Any {
        var pure1 Any = Apply(Ꞌpure(), dictApplicative)
        return func(v Any) Any {
            return func(v1 Any) Any {
                if v == false {
                    return v1
                }
                if v == true {
                    return Apply(pure1, Data_Unit.Ꞌunit())
                }
                panic("Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65)")
            }
        }
    }
}
func Ꞌwhen() Any {
    return func(dictApplicative Any) Any {
        var pure1 Any = Apply(Ꞌpure(), dictApplicative)
        return func(v Any) Any {
            return func(v1 Any) Any {
                if v == true {
                    return v1
                }
                if v == false {
                    return Apply(pure1, Data_Unit.Ꞌunit())
                }
                panic("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63)")
            }
        }
    }
}
func ꞋliftA1() Any {
    return func(dictApplicative Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        var pure1 Any = Apply(Ꞌpure(), dictApplicative)
        return func(f Any) Any {
            return func(a Any) Any {
                return Apply(apply, Apply(pure1, f), a)
            }
        }
    }
}

var ᛌapplicativeProxy_once Once
var ᛧapplicativeProxy Any

func ꞋapplicativeProxy() Any {
    ᛌapplicativeProxy_once.Do(func() {
        ᛧapplicativeProxy = Dict{"pure": func(v Any) Any {
            return Type_Proxy.ꞋProxy()
        }, "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyProxy()
        },}
    })
return ᛧapplicativeProxy
}



var ᛌapplicativeFn_once Once
var ᛧapplicativeFn Any

func ꞋapplicativeFn() Any {
    ᛌapplicativeFn_once.Do(func() {
        ᛧapplicativeFn = Dict{"pure": func(x Any) Any {
            return func(v Any) Any {
                return x
            }
        }, "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyFn()
        },}
    })
return ᛧapplicativeFn
}



var ᛌapplicativeArray_once Once
var ᛧapplicativeArray Any

func ꞋapplicativeArray() Any {
    ᛌapplicativeArray_once.Do(func() {
        ᛧapplicativeArray = Dict{"pure": func(x Any) Any {
            return []Any{x}
        }, "Apply0": func(_ Any) Any {
            return Control_Apply.ꞋapplyArray()
        },}
    })
return ᛧapplicativeArray
}





