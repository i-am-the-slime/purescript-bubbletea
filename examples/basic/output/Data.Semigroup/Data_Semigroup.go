// Code generated by psgo. DO NOT EDIT.

package Data_Semigroup

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Void"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋSemigroupRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋSemigroup_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌsemigroupVoid_once Once
var ᛧsemigroupVoid Any

func ꞋsemigroupVoid() Any {
    ᛌsemigroupVoid_once.Do(func() {
        ᛧsemigroupVoid = Dict{"append": func(v Any) Any {
            return Data_Void.Ꞌabsurd()
        },}
    })
return ᛧsemigroupVoid
}



var ᛌsemigroupUnit_once Once
var ᛧsemigroupUnit Any

func ꞋsemigroupUnit() Any {
    ᛌsemigroupUnit_once.Do(func() {
        ᛧsemigroupUnit = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        },}
    })
return ᛧsemigroupUnit
}



var ᛌsemigroupString_once Once
var ᛧsemigroupString Any

func ꞋsemigroupString() Any {
    ᛌsemigroupString_once.Do(func() {
        ᛧsemigroupString = Dict{"append": ꞋconcatString(),}
    })
return ᛧsemigroupString
}



var ᛌsemigroupRecordNil_once Once
var ᛧsemigroupRecordNil Any

func ꞋsemigroupRecordNil() Any {
    ᛌsemigroupRecordNil_once.Do(func() {
        ᛧsemigroupRecordNil = Dict{"appendRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        },}
    })
return ᛧsemigroupRecordNil
}



var ᛌsemigroupProxy_once Once
var ᛧsemigroupProxy Any

func ꞋsemigroupProxy() Any {
    ᛌsemigroupProxy_once.Do(func() {
        ᛧsemigroupProxy = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        },}
    })
return ᛧsemigroupProxy
}



var ᛌsemigroupArray_once Once
var ᛧsemigroupArray Any

func ꞋsemigroupArray() Any {
    ᛌsemigroupArray_once.Do(func() {
        ᛧsemigroupArray = Dict{"append": ꞋconcatArray(),}
    })
return ᛧsemigroupArray
}


func ꞋappendRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["appendRecord"]
    }
}
func ꞋsemigroupRecord() Any {
    return func(_ Any) Any {
        return func(dictSemigroupRecord Any) Any {
            return Dict{"append": Apply(ꞋappendRecord(), dictSemigroupRecord, Type_Proxy.ꞋProxy()),}
        }
    }
}
func Ꞌappend() Any {
    return func(dict Any) Any {
        return dict.(Dict)["append"]
    }
}
func ꞋsemigroupFn() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Ꞌappend(), dictSemigroup)
        return Dict{"append": func(f Any) Any {
                return func(g Any) Any {
                    return func(x Any) Any {
                        return Apply(append1, Apply(f, x), Apply(g, x))
                    }
                }
            },}
    }
}
func ꞋsemigroupRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(_ Any) Any {
            return func(dictSemigroupRecord Any) Any {
                var appendRecord1 Any = Apply(ꞋappendRecord(), dictSemigroupRecord)
                return func(dictSemigroup Any) Any {
                    var append1 Any = Apply(Ꞌappend(), dictSemigroup)
                    return Dict{"appendRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(appendRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(append1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        },}
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Semigroup")

var ᛌconcatString_once Once
var ᛧconcatString Any

func ꞋconcatString() Any { 
    ᛌconcatString_once.Do(func() {
        ᛧconcatString = Get(foreign, "concatString")
    })
    return ᛧconcatString
}

var ᛌconcatArray_once Once
var ᛧconcatArray Any

func ꞋconcatArray() Any { 
    ᛌconcatArray_once.Do(func() {
        ᛧconcatArray = Get(foreign, "concatArray")
    })
    return ᛧconcatArray
}


