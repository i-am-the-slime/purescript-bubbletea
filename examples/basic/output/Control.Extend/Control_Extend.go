// Code generated by psgo. DO NOT EDIT.

package Control_Extend

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Functor"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋExtend_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋextendFn() Any {
    return func(dictSemigroup Any) Any {
        var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"extend": func(f Any) Any {
                return func(g Any) Any {
                    return func(w Any) Any {
                        return Apply(f, func(wꞌ Any) Any {
                            return Apply(g, Apply(append, w, wꞌ))
                        })
                    }
                }
            }, "Functor0": func(_ Any) Any {
                return Data_Functor.ꞋfunctorFn()
            },}
    }
}

var ᛌextendArray_once Once
var ᛧextendArray Any

func ꞋextendArray() Any {
    ᛌextendArray_once.Do(func() {
        ᛧextendArray = Dict{"extend": ꞋarrayExtend(), "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorArray()
        },}
    })
return ᛧextendArray
}


func Ꞌextend() Any {
    return func(dict Any) Any {
        return dict.(Dict)["extend"]
    }
}
func ꞋextendFlipped() Any {
    return func(dictExtend Any) Any {
        var extend1 Any = Apply(Ꞌextend(), dictExtend)
        return func(w Any) Any {
            return func(f Any) Any {
                return Apply(extend1, f, w)
            }
        }
    }
}
func Ꞌduplicate() Any {
    return func(dictExtend Any) Any {
        return Apply(Ꞌextend(), dictExtend, Ꞌidentity())
    }
}
func ꞋcomposeCoKleisliFlipped() Any {
    return func(dictExtend Any) Any {
        var extend1 Any = Apply(Ꞌextend(), dictExtend)
        return func(f Any) Any {
            return func(g Any) Any {
                return func(w Any) Any {
                    return Apply(f, Apply(extend1, g, w))
                }
            }
        }
    }
}
func ꞋcomposeCoKleisli() Any {
    return func(dictExtend Any) Any {
        var extend1 Any = Apply(Ꞌextend(), dictExtend)
        return func(f Any) Any {
            return func(g Any) Any {
                return func(w Any) Any {
                    return Apply(g, Apply(extend1, f, w))
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Control.Extend")

var ᛌarrayExtend_once Once
var ᛧarrayExtend Any

func ꞋarrayExtend() Any { 
    ᛌarrayExtend_once.Do(func() {
        ᛧarrayExtend = Get(foreign, "arrayExtend")
    })
    return ᛧarrayExtend
}


