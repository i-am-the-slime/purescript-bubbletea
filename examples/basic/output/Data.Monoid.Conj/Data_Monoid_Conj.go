// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Conj

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋConj() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowConj() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Conj ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemiringConj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var conj Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra)
        var disj Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra)
        return Dict{"zero": Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra), "one": Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra), "add": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(conj, v, v1)
                }
            }, "mul": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(disj, v, v1)
                }
            },}
    }
}
func ꞋsemigroupConj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var conj Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(conj, v, v1)
                }
            },}
    }
}
func ꞋordConj() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func ꞋmonoidConj() Any {
    return func(dictHeytingAlgebra Any) Any {
        var semigroupConj1 Any = Apply(ꞋsemigroupConj(), dictHeytingAlgebra)
        return Dict{"mempty": Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra), "Semigroup0": func(_ Any) Any {
                return semigroupConj1
            },}
    }
}

var ᛌfunctorConj_once Once
var ᛧfunctorConj Any

func ꞋfunctorConj() Any {
    ᛌfunctorConj_once.Do(func() {
        ᛧfunctorConj = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorConj
}


func ꞋeqConj() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Conj_once Once
var ᛧeq1Conj Any

func Ꞌeq1Conj() Any {
    ᛌeq1Conj_once.Do(func() {
        ᛧeq1Conj = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqConj(), dictEq))
        },}
    })
return ᛧeq1Conj
}



var ᛌord1Conj_once Once
var ᛧord1Conj Any

func Ꞌord1Conj() Any {
    ᛌord1Conj_once.Do(func() {
        ᛧord1Conj = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordConj(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Conj()
        },}
    })
return ᛧord1Conj
}


func ꞋboundedConj() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyConj_once Once
var ᛧapplyConj Any

func ꞋapplyConj() Any {
    ᛌapplyConj_once.Do(func() {
        ᛧapplyConj = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorConj()
        },}
    })
return ᛧapplyConj
}



var ᛌbindConj_once Once
var ᛧbindConj Any

func ꞋbindConj() Any {
    ᛌbindConj_once.Do(func() {
        ᛧbindConj = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyConj()
        },}
    })
return ᛧbindConj
}



var ᛌapplicativeConj_once Once
var ᛧapplicativeConj Any

func ꞋapplicativeConj() Any {
    ᛌapplicativeConj_once.Do(func() {
        ᛧapplicativeConj = Dict{"pure": ꞋConj(), "Apply0": func(_ Any) Any {
            return ꞋapplyConj()
        },}
    })
return ᛧapplicativeConj
}



var ᛌmonadConj_once Once
var ᛧmonadConj Any

func ꞋmonadConj() Any {
    ᛌmonadConj_once.Do(func() {
        ᛧmonadConj = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeConj()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindConj()
        },}
    })
return ᛧmonadConj
}





