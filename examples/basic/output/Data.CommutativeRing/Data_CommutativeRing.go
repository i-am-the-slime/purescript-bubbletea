// Code generated by psgo. DO NOT EDIT.

package Data_CommutativeRing

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Ring"
)

type _ = Any

func ꞋringRecord() Any {
    return Apply(Data_Ring.ꞋringRecord(), Undefined)
}
func ꞋCommutativeRingRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋCommutativeRing_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌcommutativeRingUnit_once Once
var ᛧcommutativeRingUnit Any

func ꞋcommutativeRingUnit() Any {
    ᛌcommutativeRingUnit_once.Do(func() {
        ᛧcommutativeRingUnit = Dict{"Ring0": func(_ Any) Any {
            return Data_Ring.ꞋringUnit()
        },}
    })
return ᛧcommutativeRingUnit
}



var ᛌcommutativeRingRecordNil_once Once
var ᛧcommutativeRingRecordNil Any

func ꞋcommutativeRingRecordNil() Any {
    ᛌcommutativeRingRecordNil_once.Do(func() {
        ᛧcommutativeRingRecordNil = Dict{"RingRecord0": func(_ Any) Any {
            return Data_Ring.ꞋringRecordNil()
        },}
    })
return ᛧcommutativeRingRecordNil
}


func ꞋcommutativeRingRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var ringRecordCons Any = Apply(Data_Ring.ꞋringRecordCons(), dictIsSymbol, Undefined)
        return func(_ Any) Any {
            return func(dictCommutativeRingRecord Any) Any {
                var ringRecordCons1 Any = Apply(ringRecordCons, Apply(dictCommutativeRingRecord.(Dict)["RingRecord0"], Undefined))
                return func(dictCommutativeRing Any) Any {
                    var ringRecordCons2 Any = Apply(ringRecordCons1, Apply(dictCommutativeRing.(Dict)["Ring0"], Undefined))
                    return Dict{"RingRecord0": func(_ Any) Any {
                            return ringRecordCons2
                        },}
                }
            }
        }
    }
}
func ꞋcommutativeRingRecord() Any {
    return func(_ Any) Any {
        return func(dictCommutativeRingRecord Any) Any {
            var ringRecord1 Any = Apply(ꞋringRecord(), Apply(dictCommutativeRingRecord.(Dict)["RingRecord0"], Undefined))
            return Dict{"Ring0": func(_ Any) Any {
                    return ringRecord1
                },}
        }
    }
}

var ᛌcommutativeRingProxy_once Once
var ᛧcommutativeRingProxy Any

func ꞋcommutativeRingProxy() Any {
    ᛌcommutativeRingProxy_once.Do(func() {
        ᛧcommutativeRingProxy = Dict{"Ring0": func(_ Any) Any {
            return Data_Ring.ꞋringProxy()
        },}
    })
return ᛧcommutativeRingProxy
}



var ᛌcommutativeRingNumber_once Once
var ᛧcommutativeRingNumber Any

func ꞋcommutativeRingNumber() Any {
    ᛌcommutativeRingNumber_once.Do(func() {
        ᛧcommutativeRingNumber = Dict{"Ring0": func(_ Any) Any {
            return Data_Ring.ꞋringNumber()
        },}
    })
return ᛧcommutativeRingNumber
}



var ᛌcommutativeRingInt_once Once
var ᛧcommutativeRingInt Any

func ꞋcommutativeRingInt() Any {
    ᛌcommutativeRingInt_once.Do(func() {
        ᛧcommutativeRingInt = Dict{"Ring0": func(_ Any) Any {
            return Data_Ring.ꞋringInt()
        },}
    })
return ᛧcommutativeRingInt
}


func ꞋcommutativeRingFn() Any {
    return func(dictCommutativeRing Any) Any {
        var ringFn Any = Apply(Data_Ring.ꞋringFn(), Apply(dictCommutativeRing.(Dict)["Ring0"], Undefined))
        return Dict{"Ring0": func(_ Any) Any {
                return ringFn
            },}
    }
}



