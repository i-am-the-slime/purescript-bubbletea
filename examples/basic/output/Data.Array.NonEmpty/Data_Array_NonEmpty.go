// Code generated by psgo. DO NOT EDIT.

package Data_Array_NonEmpty

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Safe.Coerce"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Semigroup.Foldable"
	"project.localhost/purescript-native/output/Data.Array.NonEmpty.Internal"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Array"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Unsafe.Coerce"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Data.NonEmpty"
	"project.localhost/purescript-native/output/Data.Unfoldable1"
	"project.localhost/purescript-native/output/Data.Tuple"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌcoerce() Any {
    return Apply(Safe_Coerce.Ꞌcoerce(), Undefined)
}
func Ꞌmax() Any {
    return Apply(Data_Ord.Ꞌmax(), Data_Ord.ꞋordInt())
}
func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupArray())
}
func Ꞌintercalate1() Any {
    return Apply(Data_Semigroup_Foldable.Ꞌintercalate(), Data_Array_NonEmpty_Internal.Ꞌfoldable1NonEmptyArray())
}
func ꞋgreaterThan() Any {
    return Apply(Data_Ord.ꞋgreaterThan(), Data_Ord.ꞋordInt())
}
func ꞋfoldMap11() Any {
    return Apply(Data_Semigroup_Foldable.ꞋfoldMap1(), Data_Array_NonEmpty_Internal.Ꞌfoldable1NonEmptyArray())
}
func Ꞌfold11() Any {
    return Apply(Data_Semigroup_Foldable.Ꞌfold1(), Data_Array_NonEmpty_Internal.Ꞌfoldable1NonEmptyArray())
}
func ꞋfromJust() Any {
    return Apply(Data_Maybe.ꞋfromJust(), Undefined)
}
func ꞋunsafeIndex1() Any {
    return Apply(Data_Array.ꞋunsafeIndex(), Undefined)
}
func ꞋlessThan() Any {
    return Apply(Data_Ord.ꞋlessThan(), Data_Ord.ꞋordInt())
}
func Ꞌsub() Any {
    return Apply(Data_Ring.Ꞌsub(), Data_Ring.ꞋringInt())
}
func Ꞌadd() Any {
    return Apply(Data_Semiring.Ꞌadd(), Data_Semiring.ꞋsemiringInt())
}
func ꞋunsafeFromArrayF() Any {
    return Unsafe_Coerce.ꞋunsafeCoerce()
}
func ꞋunsafeFromArray() Any {
    return Data_Array_NonEmpty_Internal.ꞋNonEmptyArray()
}
func Ꞌtranspose() Any {
    return Apply(Ꞌcompose(), Ꞌcoerce(), Apply(Ꞌcompose(), Data_Array.Ꞌtranspose(), Ꞌcoerce()))
}
func ꞋtoArray() Any {
    return func(v Any) Any {
        return v
    }
}
func ꞋunionByꞌ() Any {
    return func(eq Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌcompose(), ꞋunsafeFromArray(), Apply(Data_Array.ꞋunionBy(), eq, Apply(ꞋtoArray(), xs)))
        }
    }
}
func Ꞌunionꞌ() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋunionByꞌ(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func ꞋunionBy() Any {
    return func(eq Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌcompose(), Apply(ꞋunionByꞌ(), eq, xs), ꞋtoArray())
        }
    }
}
func Ꞌunion() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋunionBy(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func Ꞌunzip() Any {
    return Apply(Ꞌcompose(), Apply(Data_Bifunctor.Ꞌbimap(), Data_Bifunctor.ꞋbifunctorTuple(), ꞋunsafeFromArray(), ꞋunsafeFromArray()), Apply(Ꞌcompose(), Data_Array.Ꞌunzip(), ꞋtoArray()))
}
func ꞋupdateAt() Any {
    return func(i Any) Any {
        return func(x Any) Any {
            return Apply(Ꞌcompose(), ꞋunsafeFromArrayF(), Apply(Ꞌcompose(), Apply(Data_Array.ꞋupdateAt(), i, x), ꞋtoArray()))
        }
    }
}
func Ꞌzip() Any {
    return func(xs Any) Any {
        return func(ys Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌzip(), Apply(ꞋtoArray(), xs), Apply(ꞋtoArray(), ys)))
        }
    }
}
func ꞋzipWith() Any {
    return func(f Any) Any {
        return func(xs Any) Any {
            return func(ys Any) Any {
                return Apply(ꞋunsafeFromArray(), Apply(Data_Array.ꞋzipWith(), f, Apply(ꞋtoArray(), xs), Apply(ꞋtoArray(), ys)))
            }
        }
    }
}
func ꞋzipWithA() Any {
    return func(dictApplicative Any) Any {
        var zipWithA1 Any = Apply(Data_Array.ꞋzipWithA(), dictApplicative)
        return func(f Any) Any {
            return func(xs Any) Any {
                return func(ys Any) Any {
                    return Apply(ꞋunsafeFromArrayF(), Apply(zipWithA1, f, Apply(ꞋtoArray(), xs), Apply(ꞋtoArray(), ys)))
                }
            }
        }
    }
}
func ꞋsplitAt() Any {
    return func(i Any) Any {
        return func(xs Any) Any {
            return Apply(Data_Array.ꞋsplitAt(), i, Apply(ꞋtoArray(), xs))
        }
    }
}
func Ꞌsome() Any {
    return func(dictAlternative Any) Any {
        var some1 Any = Apply(Data_Array.Ꞌsome(), dictAlternative)
        return func(dictLazy Any) Any {
            return Apply(Ꞌcompose(), ꞋunsafeFromArrayF(), Apply(some1, dictLazy))
        }
    }
}
func Ꞌsnocꞌ() Any {
    return func(xs Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌsnoc(), xs, x))
        }
    }
}
func Ꞌsnoc() Any {
    return func(xs Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌsnoc(), Apply(ꞋtoArray(), xs), x))
        }
    }
}
func Ꞌsingleton() Any {
    return Apply(Ꞌcompose(), ꞋunsafeFromArray(), Data_Array.Ꞌsingleton())
}
func Ꞌreplicate() Any {
    return func(i Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌreplicate(), Apply(Ꞌmax(), 1, i), x))
        }
    }
}
func Ꞌrange() Any {
    return func(x Any) Any {
        return func(y Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌrange(), x, y))
        }
    }
}
func ꞋprependArray() Any {
    return func(xs Any) Any {
        return func(ys Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Ꞌappend(), xs, Apply(ꞋtoArray(), ys)))
        }
    }
}
func ꞋmodifyAt() Any {
    return func(i Any) Any {
        return func(f Any) Any {
            return Apply(Ꞌcompose(), ꞋunsafeFromArrayF(), Apply(Ꞌcompose(), Apply(Data_Array.ꞋmodifyAt(), i, f), ꞋtoArray()))
        }
    }
}
func ꞋintersectByꞌ() Any {
    return func(eq Any) Any {
        return func(xs Any) Any {
            return Apply(Data_Array.ꞋintersectBy(), eq, Apply(ꞋtoArray(), xs))
        }
    }
}
func ꞋintersectBy() Any {
    return func(eq Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌcompose(), Apply(ꞋintersectByꞌ(), eq, xs), ꞋtoArray())
        }
    }
}
func Ꞌintersectꞌ() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋintersectByꞌ(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func Ꞌintersect() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋintersectBy(), Apply(Data_Eq.Ꞌeq(), dictEq))
    }
}
func Ꞌintercalate() Any {
    return func(dictSemigroup Any) Any {
        return Apply(Ꞌintercalate1(), dictSemigroup)
    }
}
func ꞋinsertAt() Any {
    return func(i Any) Any {
        return func(x Any) Any {
            return Apply(Ꞌcompose(), ꞋunsafeFromArrayF(), Apply(Ꞌcompose(), Apply(Data_Array.ꞋinsertAt(), i, x), ꞋtoArray()))
        }
    }
}
func ꞋfromFoldable1() Any {
    return func(dictFoldable1 Any) Any {
        return Apply(Ꞌcompose(), ꞋunsafeFromArray(), Apply(Data_Array.ꞋfromFoldable(), Apply(dictFoldable1.(Dict)["Foldable0"], Undefined)))
    }
}
func ꞋfromArray() Any {
    return func(xs Any) Any {
        if Apply(ꞋgreaterThan(), Apply(Data_Array.Ꞌlength(), xs), 0) == true {
            return Apply(Data_Maybe.ꞋJust(), Apply(ꞋunsafeFromArray(), xs))
        }
        return Data_Maybe.ꞋNothing()
    }
}
func ꞋfromFoldable() Any {
    return func(dictFoldable Any) Any {
        return Apply(Ꞌcompose(), ꞋfromArray(), Apply(Data_Array.ꞋfromFoldable(), dictFoldable))
    }
}
func Ꞌtransposeꞌ() Any {
    return Apply(Ꞌcompose(), ꞋfromArray(), Apply(Ꞌcompose(), Data_Array.Ꞌtranspose(), Ꞌcoerce()))
}
func Ꞌfoldr1() Any {
    return Apply(Data_Semigroup_Foldable.Ꞌfoldr1(), Data_Array_NonEmpty_Internal.Ꞌfoldable1NonEmptyArray())
}
func Ꞌfoldl1() Any {
    return Apply(Data_Semigroup_Foldable.Ꞌfoldl1(), Data_Array_NonEmpty_Internal.Ꞌfoldable1NonEmptyArray())
}
func ꞋfoldMap1() Any {
    return func(dictSemigroup Any) Any {
        return Apply(ꞋfoldMap11(), dictSemigroup)
    }
}
func Ꞌfold1() Any {
    return func(dictSemigroup Any) Any {
        return Apply(Ꞌfold11(), dictSemigroup)
    }
}
func Ꞌdifferenceꞌ() Any {
    return func(dictEq Any) Any {
        var difference1 Any = Apply(Data_Array.Ꞌdifference(), dictEq)
        return func(xs Any) Any {
            return Apply(difference1, Apply(ꞋtoArray(), xs))
        }
    }
}
func Ꞌconsꞌ() Any {
    return func(x Any) Any {
        return func(xs Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Data_Array.Ꞌcons(), x, xs))
        }
    }
}
func ꞋfromNonEmpty() Any {
    return func(v Any) Any {
        return Apply(Ꞌconsꞌ(), v.(Dict)["value0"], v.(Dict)["value1"])
    }
}
func ꞋconcatMap() Any {
    return Apply(Data_Function.Ꞌflip(), Apply(Control_Bind.Ꞌbind(), Data_Array_NonEmpty_Internal.ꞋbindNonEmptyArray()))
}
func Ꞌconcat() Any {
    return Apply(Ꞌcompose(), ꞋunsafeFromArray(), Apply(Ꞌcompose(), Data_Array.Ꞌconcat(), Apply(Ꞌcompose(), ꞋtoArray(), Apply(Data_Functor.Ꞌmap(), Data_Array_NonEmpty_Internal.ꞋfunctorNonEmptyArray(), ꞋtoArray()))))
}
func ꞋappendArray() Any {
    return func(xs Any) Any {
        return func(ys Any) Any {
            return Apply(ꞋunsafeFromArray(), Apply(Ꞌappend(), Apply(ꞋtoArray(), xs), ys))
        }
    }
}
func ꞋalterAt() Any {
    return func(i Any) Any {
        return func(f Any) Any {
            return Apply(Ꞌcompose(), Apply(Data_Array.ꞋalterAt(), i, f), ꞋtoArray())
        }
    }
}
func ꞋadaptMaybe() Any {
    return func(f Any) Any {
        return Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
            return Apply(Ꞌcompose(), ꞋfromJust(), Apply(Ꞌcompose(), f, ꞋtoArray()))
        })
    }
}
func Ꞌhead() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌhead())
}
func Ꞌinit() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌinit())
}
func Ꞌlast() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌlast())
}
func Ꞌtail() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌtail())
}
func Ꞌuncons() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌuncons())
}
func ꞋtoNonEmpty() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn(), Ꞌuncons(), func(v Any) Any {
        return Apply(Data_NonEmpty.ꞋNonEmpty(), v.(Dict)["head"], v.(Dict)["tail"])
    })
}
func Ꞌunsnoc() Any {
    return Apply(ꞋadaptMaybe(), Data_Array.Ꞌunsnoc())
}
func ꞋadaptAny() Any {
    return func(f Any) Any {
        return Apply(Ꞌcompose(), f, ꞋtoArray())
    }
}
func Ꞌall() Any {
    return func(p Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌall(), p))
    }
}
func Ꞌany() Any {
    return func(p Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌany(), p))
    }
}
func ꞋcatMaybes() Any {
    return Apply(ꞋadaptAny(), Data_Array.ꞋcatMaybes())
}
func Ꞌdelete() Any {
    return func(dictEq Any) Any {
        var delete1 Any = Apply(Data_Array.Ꞌdelete(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(delete1, x))
        }
    }
}
func ꞋdeleteAt() Any {
    return func(i Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋdeleteAt(), i))
    }
}
func ꞋdeleteBy() Any {
    return func(f Any) Any {
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋdeleteBy(), f, x))
        }
    }
}
func Ꞌdifference() Any {
    return func(dictEq Any) Any {
        var differenceꞌ1 Any = Apply(Ꞌdifferenceꞌ(), dictEq)
        return func(xs Any) Any {
            return Apply(ꞋadaptAny(), Apply(differenceꞌ1, xs))
        }
    }
}
func Ꞌdrop() Any {
    return func(i Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌdrop(), i))
    }
}
func ꞋdropEnd() Any {
    return func(i Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋdropEnd(), i))
    }
}
func ꞋdropWhile() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋdropWhile(), f))
    }
}
func Ꞌelem() Any {
    return func(dictEq Any) Any {
        var elem1 Any = Apply(Data_Array.Ꞌelem(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(elem1, x))
        }
    }
}
func ꞋelemIndex() Any {
    return func(dictEq Any) Any {
        var elemIndex1 Any = Apply(Data_Array.ꞋelemIndex(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(elemIndex1, x))
        }
    }
}
func ꞋelemLastIndex() Any {
    return func(dictEq Any) Any {
        var elemLastIndex1 Any = Apply(Data_Array.ꞋelemLastIndex(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(elemLastIndex1, x))
        }
    }
}
func Ꞌfilter() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌfilter(), f))
    }
}
func ꞋfilterA() Any {
    return func(dictApplicative Any) Any {
        var filterA1 Any = Apply(Data_Array.ꞋfilterA(), dictApplicative)
        return func(f Any) Any {
            return Apply(ꞋadaptAny(), Apply(filterA1, f))
        }
    }
}
func Ꞌfind() Any {
    return func(p Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌfind(), p))
    }
}
func ꞋfindIndex() Any {
    return func(p Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋfindIndex(), p))
    }
}
func ꞋfindLastIndex() Any {
    return func(x Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋfindLastIndex(), x))
    }
}
func ꞋfindMap() Any {
    return func(p Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋfindMap(), p))
    }
}
func ꞋfoldM() Any {
    return func(dictMonad Any) Any {
        var foldM1 Any = Apply(Data_Array.ꞋfoldM(), dictMonad)
        return func(f Any) Any {
            return func(acc Any) Any {
                return Apply(ꞋadaptAny(), Apply(foldM1, f, acc))
            }
        }
    }
}
func ꞋfoldRecM() Any {
    return func(dictMonadRec Any) Any {
        var foldRecM1 Any = Apply(Data_Array.ꞋfoldRecM(), dictMonadRec)
        return func(f Any) Any {
            return func(acc Any) Any {
                return Apply(ꞋadaptAny(), Apply(foldRecM1, f, acc))
            }
        }
    }
}
func Ꞌindex() Any {
    return Apply(ꞋadaptAny(), Data_Array.Ꞌindex())
}
func Ꞌlength() Any {
    return Apply(ꞋadaptAny(), Data_Array.Ꞌlength())
}
func ꞋmapMaybe() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋmapMaybe(), f))
    }
}
func ꞋnotElem() Any {
    return func(dictEq Any) Any {
        var notElem1 Any = Apply(Data_Array.ꞋnotElem(), dictEq)
        return func(x Any) Any {
            return Apply(ꞋadaptAny(), Apply(notElem1, x))
        }
    }
}
func Ꞌpartition() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌpartition(), f))
    }
}
func Ꞌslice() Any {
    return func(start Any) Any {
        return func(end Any) Any {
            return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌslice(), start, end))
        }
    }
}
func Ꞌspan() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌspan(), f))
    }
}
func Ꞌtake() Any {
    return func(i Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.Ꞌtake(), i))
    }
}
func ꞋtakeEnd() Any {
    return func(i Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋtakeEnd(), i))
    }
}
func ꞋtakeWhile() Any {
    return func(f Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋtakeWhile(), f))
    }
}
func ꞋtoUnfoldable() Any {
    return func(dictUnfoldable Any) Any {
        return Apply(ꞋadaptAny(), Apply(Data_Array.ꞋtoUnfoldable(), dictUnfoldable))
    }
}
func ꞋunsafeAdapt() Any {
    return func(f Any) Any {
        return Apply(Ꞌcompose(), ꞋunsafeFromArray(), Apply(ꞋadaptAny(), f))
    }
}
func Ꞌcons() Any {
    return func(x Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌcons(), x))
    }
}
func Ꞌgroup() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌgroup(), dictEq))
    }
}
func ꞋgroupAllBy() Any {
    return func(op Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋgroupAllBy(), op))
    }
}
func ꞋgroupAll() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋgroupAllBy(), Apply(Data_Ord.Ꞌcompare(), dictOrd))
    }
}
func ꞋgroupBy() Any {
    return func(op Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋgroupBy(), op))
    }
}
func Ꞌinsert() Any {
    return func(dictOrd Any) Any {
        var insert1 Any = Apply(Data_Array.Ꞌinsert(), dictOrd)
        return func(x Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(insert1, x))
        }
    }
}
func ꞋinsertBy() Any {
    return func(f Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋinsertBy(), f, x))
        }
    }
}
func Ꞌintersperse() Any {
    return func(x Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌintersperse(), x))
    }
}
func ꞋmapWithIndex() Any {
    return func(f Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋmapWithIndex(), f))
    }
}
func ꞋmodifyAtIndices() Any {
    return func(dictFoldable Any) Any {
        var modifyAtIndices1 Any = Apply(Data_Array.ꞋmodifyAtIndices(), dictFoldable)
        return func(is Any) Any {
            return func(f Any) Any {
                return Apply(ꞋunsafeAdapt(), Apply(modifyAtIndices1, is, f))
            }
        }
    }
}
func Ꞌnub() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌnub(), dictOrd))
    }
}
func ꞋnubBy() Any {
    return func(f Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋnubBy(), f))
    }
}
func ꞋnubByEq() Any {
    return func(f Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋnubByEq(), f))
    }
}
func ꞋnubEq() Any {
    return func(dictEq Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋnubEq(), dictEq))
    }
}
func Ꞌreverse() Any {
    return Apply(ꞋunsafeAdapt(), Data_Array.Ꞌreverse())
}
func Ꞌscanl() Any {
    return func(f Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌscanl(), f, x))
        }
    }
}
func Ꞌscanr() Any {
    return func(f Any) Any {
        return func(x Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌscanr(), f, x))
        }
    }
}
func Ꞌsort() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.Ꞌsort(), dictOrd))
    }
}
func ꞋsortBy() Any {
    return func(f Any) Any {
        return Apply(ꞋunsafeAdapt(), Apply(Data_Array.ꞋsortBy(), f))
    }
}
func ꞋsortWith() Any {
    return func(dictOrd Any) Any {
        var sortWith1 Any = Apply(Data_Array.ꞋsortWith(), dictOrd)
        return func(f Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(sortWith1, f))
        }
    }
}
func ꞋupdateAtIndices() Any {
    return func(dictFoldable Any) Any {
        var updateAtIndices1 Any = Apply(Data_Array.ꞋupdateAtIndices(), dictFoldable)
        return func(pairs Any) Any {
            return Apply(ꞋunsafeAdapt(), Apply(updateAtIndices1, pairs))
        }
    }
}
func ꞋunsafeIndex() Any {
    return func(_ Any) Any {
        return Apply(ꞋadaptAny(), ꞋunsafeIndex1())
    }
}
func ꞋunsafeIndex2() Any {
    return Apply(ꞋunsafeIndex(), Undefined)
}
func ꞋtoUnfoldable1() Any {
    return func(dictUnfoldable1 Any) Any {
        var unfoldr1 Any = Apply(Data_Unfoldable1.Ꞌunfoldr1(), dictUnfoldable1)
        return func(xs Any) Any {
            var len Any = Apply(Ꞌlength(), xs)
            var f Any = func(i Any) Any {
                return Apply(Data_Tuple.ꞋTuple(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
                    return ꞋunsafeIndex2()
                }, xs, i), Run(func() Any {
                    var ṩ13 Any = Apply(ꞋlessThan(), i, Apply(Ꞌsub(), len, 1))
                    if ṩ13 == true {
                        return Apply(Data_Maybe.ꞋJust(), Apply(Ꞌadd(), i, 1))
                    }
                    return Data_Maybe.ꞋNothing()
                }))
            }
            return Apply(unfoldr1, f, 0)
        }
    }
}



