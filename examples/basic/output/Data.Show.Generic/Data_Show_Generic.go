// Code generated by psgo. DO NOT EDIT.

package Data_Show_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Generic.Rep"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupArray())
}
func Ꞌappend1() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋGenericShowArgs_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋGenericShow_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌgenericShowArgsNoArguments_once Once
var ᛧgenericShowArgsNoArguments Any

func ꞋgenericShowArgsNoArguments() Any {
    ᛌgenericShowArgsNoArguments_once.Do(func() {
        ᛧgenericShowArgsNoArguments = Dict{"genericShowArgs": func(v Any) Any {
            return []Any{}
        },}
    })
return ᛧgenericShowArgsNoArguments
}


func ꞋgenericShowArgsArgument() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"genericShowArgs": func(v Any) Any {
                return []Any{Apply(show, v)}
            },}
    }
}
func ꞋgenericShowArgs() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericShowArgs"]
    }
}
func ꞋgenericShowArgsProduct() Any {
    return func(dictGenericShowArgs Any) Any {
        var genericShowArgs1 Any = Apply(ꞋgenericShowArgs(), dictGenericShowArgs)
        return func(dictGenericShowArgs1 Any) Any {
            var genericShowArgs2 Any = Apply(ꞋgenericShowArgs(), dictGenericShowArgs1)
            return Dict{"genericShowArgs": func(v Any) Any {
                    return Apply(Ꞌappend(), Apply(genericShowArgs1, v.(Dict)["value0"]), Apply(genericShowArgs2, v.(Dict)["value1"]))
                },}
        }
    }
}
func ꞋgenericShowConstructor() Any {
    return func(dictGenericShowArgs Any) Any {
        var genericShowArgs1 Any = Apply(ꞋgenericShowArgs(), dictGenericShowArgs)
        return func(dictIsSymbol Any) Any {
            var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
            return Dict{"genericShow'": func(v Any) Any {
                    var ctor Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                    var v1 Any = Apply(genericShowArgs1, v)
                    if Length(v1) == 0 {
                        return ctor
                    }
                    return Apply(Ꞌappend1(), "(", Apply(Ꞌappend1(), Apply(Ꞌintercalate(), " ", Apply(Ꞌappend(), []Any{ctor}, v1)), ")"))
                },}
        }
    }
}
func ꞋgenericShowꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericShow'"]
    }
}

var ᛌgenericShowNoConstructors_once Once
var ᛧgenericShowNoConstructors Any

func ꞋgenericShowNoConstructors() Any {
    ᛌgenericShowNoConstructors_once.Do(func() {
        ᛧgenericShowNoConstructors = Dict{"genericShow'": func(a Any) Any {
            return Apply(ꞋgenericShowꞌ(), ꞋgenericShowNoConstructors(), a)
        },}
    })
return ᛧgenericShowNoConstructors
}


func ꞋgenericShowSum() Any {
    return func(dictGenericShow Any) Any {
        var genericShowꞌ1 Any = Apply(ꞋgenericShowꞌ(), dictGenericShow)
        return func(dictGenericShow1 Any) Any {
            var genericShowꞌ2 Any = Apply(ꞋgenericShowꞌ(), dictGenericShow1)
            return Dict{"genericShow'": func(v Any) Any {
                    if Is(v, "Inl") {
                        return Apply(genericShowꞌ1, v.(Dict)["value0"])
                    }
                    if Is(v, "Inr") {
                        return Apply(genericShowꞌ2, v.(Dict)["value0"])
                    }
                    panic("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40)")
                },}
        }
    }
}
func ꞋgenericShow() Any {
    return func(dictGeneric Any) Any {
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericShow Any) Any {
            var genericShowꞌ1 Any = Apply(ꞋgenericShowꞌ(), dictGenericShow)
            return func(x Any) Any {
                return Apply(genericShowꞌ1, Apply(from, x))
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Show.Generic")

var ᛌintercalate_once Once
var ᛧintercalate Any

func Ꞌintercalate() Any { 
    ᛌintercalate_once.Do(func() {
        ᛧintercalate = Get(foreign, "intercalate")
    })
    return ᛧintercalate
}


