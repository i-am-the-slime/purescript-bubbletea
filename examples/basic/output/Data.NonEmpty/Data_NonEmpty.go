// Code generated by psgo. DO NOT EDIT.

package Data_NonEmpty

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Unfoldable"
	"project.localhost/purescript-native/output/Control.Plus"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Data.FunctorWithIndex"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.FoldableWithIndex"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.TraversableWithIndex"
	"project.localhost/purescript-native/output/Data.Semigroup.Foldable"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
)

type _ = Any

func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Tuple.ꞋfunctorTuple())
}
func Ꞌmap1() Any {
    return Apply(Data_Functor.Ꞌmap(), Data_Maybe.ꞋfunctorMaybe())
}
func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋNonEmpty() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"NonEmpty": true, "value0": value0, "value1": value1,}
        }
    }
}
func Ꞌunfoldable1NonEmpty() Any {
    return func(dictUnfoldable Any) Any {
        var unfoldr Any = Apply(Data_Unfoldable.Ꞌunfoldr(), dictUnfoldable)
        return Dict{"unfoldr1": func(f Any) Any {
                return func(b Any) Any {
                    return Apply(Data_Tuple.Ꞌuncurry(), ꞋNonEmpty(), Apply(Ꞌmap(), Apply(unfoldr, Apply(Ꞌmap1(), f)), Apply(f, b)))
                }
            },}
    }
}
func Ꞌtail() Any {
    return func(v Any) Any {
        return v.(Dict)["value1"]
    }
}
func Ꞌsingleton() Any {
    return func(dictPlus Any) Any {
        var empty Any = Apply(Control_Plus.Ꞌempty(), dictPlus)
        return func(a Any) Any {
            return Apply(ꞋNonEmpty(), a, empty)
        }
    }
}
func ꞋshowNonEmpty() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(NonEmpty ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value1"]), ")"))))
                },}
        }
    }
}
func ꞋsemigroupNonEmpty() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        return func(dictSemigroup Any) Any {
            var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
            return Dict{"append": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋNonEmpty(), v.(Dict)["value0"], Apply(append1, v.(Dict)["value1"], Apply(append1, Apply(pure, v1.(Dict)["value0"]), v1.(Dict)["value1"])))
                    }
                },}
        }
    }
}
func ꞋoneOf() Any {
    return func(dictAlternative Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), Apply(Apply(dictAlternative.(Dict)["Plus1"], Undefined).(Dict)["Alt0"], Undefined))
        var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictAlternative.(Dict)["Applicative0"], Undefined))
        return func(v Any) Any {
            return Apply(alt, Apply(pure, v.(Dict)["value0"]), v.(Dict)["value1"])
        }
    }
}
func Ꞌhead() Any {
    return func(v Any) Any {
        return v.(Dict)["value0"]
    }
}
func ꞋfunctorNonEmpty() Any {
    return func(dictFunctor Any) Any {
        var map2 Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"map": func(f Any) Any {
                return func(m Any) Any {
                    return Apply(ꞋNonEmpty(), Apply(f, m.(Dict)["value0"]), Apply(map2, f, m.(Dict)["value1"]))
                }
            },}
    }
}
func ꞋfunctorWithIndex() Any {
    return func(dictFunctorWithIndex Any) Any {
        var mapWithIndex Any = Apply(Data_FunctorWithIndex.ꞋmapWithIndex(), dictFunctorWithIndex)
        var functorNonEmpty1 Any = Apply(ꞋfunctorNonEmpty(), Apply(dictFunctorWithIndex.(Dict)["Functor0"], Undefined))
        return Dict{"mapWithIndex": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(ꞋNonEmpty(), Apply(f, Data_Maybe.ꞋNothing(), v.(Dict)["value0"]), Apply(mapWithIndex, Apply(Ꞌcompose(), f, Data_Maybe.ꞋJust()), v.(Dict)["value1"]))
                }
            }, "Functor0": func(_ Any) Any {
                return functorNonEmpty1
            },}
    }
}
func ꞋfromNonEmpty() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(f, v.(Dict)["value0"], v.(Dict)["value1"])
        }
    }
}
func ꞋfoldableNonEmpty() Any {
    return func(dictFoldable Any) Any {
        var foldMap Any = Apply(Data_Foldable.ꞋfoldMap(), dictFoldable)
        var foldl Any = Apply(Data_Foldable.Ꞌfoldl(), dictFoldable)
        var foldr Any = Apply(Data_Foldable.Ꞌfoldr(), dictFoldable)
        return Dict{"foldMap": func(dictMonoid Any) Any {
                var append1 Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
                var foldMap1 Any = Apply(foldMap, dictMonoid)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(append1, Apply(f, v.(Dict)["value0"]), Apply(foldMap1, f, v.(Dict)["value1"]))
                    }
                }
            }, "foldl": func(f Any) Any {
                return func(b Any) Any {
                    return func(v Any) Any {
                        return Apply(foldl, f, Apply(f, b, v.(Dict)["value0"]), v.(Dict)["value1"])
                    }
                }
            }, "foldr": func(f Any) Any {
                return func(b Any) Any {
                    return func(v Any) Any {
                        return Apply(f, v.(Dict)["value0"], Apply(foldr, f, b, v.(Dict)["value1"]))
                    }
                }
            },}
    }
}
func ꞋfoldableWithIndexNonEmpty() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex Any = Apply(Data_FoldableWithIndex.ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        var foldlWithIndex Any = Apply(Data_FoldableWithIndex.ꞋfoldlWithIndex(), dictFoldableWithIndex)
        var foldrWithIndex Any = Apply(Data_FoldableWithIndex.ꞋfoldrWithIndex(), dictFoldableWithIndex)
        var foldableNonEmpty1 Any = Apply(ꞋfoldableNonEmpty(), Apply(dictFoldableWithIndex.(Dict)["Foldable0"], Undefined))
        return Dict{"foldMapWithIndex": func(dictMonoid Any) Any {
                var append1 Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
                var foldMapWithIndex1 Any = Apply(foldMapWithIndex, dictMonoid)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(append1, Apply(f, Data_Maybe.ꞋNothing(), v.(Dict)["value0"]), Apply(foldMapWithIndex1, Apply(Ꞌcompose(), f, Data_Maybe.ꞋJust()), v.(Dict)["value1"]))
                    }
                }
            }, "foldlWithIndex": func(f Any) Any {
                return func(b Any) Any {
                    return func(v Any) Any {
                        return Apply(foldlWithIndex, Apply(Ꞌcompose(), f, Data_Maybe.ꞋJust()), Apply(f, Data_Maybe.ꞋNothing(), b, v.(Dict)["value0"]), v.(Dict)["value1"])
                    }
                }
            }, "foldrWithIndex": func(f Any) Any {
                return func(b Any) Any {
                    return func(v Any) Any {
                        return Apply(f, Data_Maybe.ꞋNothing(), v.(Dict)["value0"], Apply(foldrWithIndex, Apply(Ꞌcompose(), f, Data_Maybe.ꞋJust()), b, v.(Dict)["value1"]))
                    }
                }
            }, "Foldable0": func(_ Any) Any {
                return foldableNonEmpty1
            },}
    }
}
func ꞋtraversableNonEmpty() Any {
    return func(dictTraversable Any) Any {
        var sequence Any = Apply(Data_Traversable.Ꞌsequence(), dictTraversable)
        var traverse Any = Apply(Data_Traversable.Ꞌtraverse(), dictTraversable)
        var functorNonEmpty1 Any = Apply(ꞋfunctorNonEmpty(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var foldableNonEmpty1 Any = Apply(ꞋfoldableNonEmpty(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return Dict{"sequence": func(dictApplicative Any) Any {
                var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
                var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
                var map2 Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
                var sequence1 Any = Apply(sequence, dictApplicative)
                return func(v Any) Any {
                    return Apply(apply, Apply(map2, ꞋNonEmpty(), v.(Dict)["value0"]), Apply(sequence1, v.(Dict)["value1"]))
                }
            }, "traverse": func(dictApplicative Any) Any {
                var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
                var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
                var map2 Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
                var traverse1 Any = Apply(traverse, dictApplicative)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(apply, Apply(map2, ꞋNonEmpty(), Apply(f, v.(Dict)["value0"])), Apply(traverse1, f, v.(Dict)["value1"]))
                    }
                }
            }, "Functor0": func(_ Any) Any {
                return functorNonEmpty1
            }, "Foldable1": func(_ Any) Any {
                return foldableNonEmpty1
            },}
    }
}
func ꞋtraversableWithIndexNonEmpty() Any {
    return func(dictTraversableWithIndex Any) Any {
        var traverseWithIndex Any = Apply(Data_TraversableWithIndex.ꞋtraverseWithIndex(), dictTraversableWithIndex)
        var functorWithIndex1 Any = Apply(ꞋfunctorWithIndex(), Apply(dictTraversableWithIndex.(Dict)["FunctorWithIndex0"], Undefined))
        var foldableWithIndexNonEmpty1 Any = Apply(ꞋfoldableWithIndexNonEmpty(), Apply(dictTraversableWithIndex.(Dict)["FoldableWithIndex1"], Undefined))
        var traversableNonEmpty1 Any = Apply(ꞋtraversableNonEmpty(), Apply(dictTraversableWithIndex.(Dict)["Traversable2"], Undefined))
        return Dict{"traverseWithIndex": func(dictApplicative Any) Any {
                var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
                var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
                var map2 Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
                var traverseWithIndex1 Any = Apply(traverseWithIndex, dictApplicative)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(apply, Apply(map2, ꞋNonEmpty(), Apply(f, Data_Maybe.ꞋNothing(), v.(Dict)["value0"])), Apply(traverseWithIndex1, Apply(Ꞌcompose(), f, Data_Maybe.ꞋJust()), v.(Dict)["value1"]))
                    }
                }
            }, "FunctorWithIndex0": func(_ Any) Any {
                return functorWithIndex1
            }, "FoldableWithIndex1": func(_ Any) Any {
                return foldableWithIndexNonEmpty1
            }, "Traversable2": func(_ Any) Any {
                return traversableNonEmpty1
            },}
    }
}
func Ꞌfoldable1NonEmpty() Any {
    return func(dictFoldable Any) Any {
        var foldl Any = Apply(Data_Foldable.Ꞌfoldl(), dictFoldable)
        var foldr Any = Apply(Data_Foldable.Ꞌfoldr(), dictFoldable)
        var foldableNonEmpty1 Any = Apply(ꞋfoldableNonEmpty(), dictFoldable)
        return Dict{"foldMap1": func(dictSemigroup Any) Any {
                var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(foldl, func(s Any) Any {
                            return func(a1 Any) Any {
                                return Apply(append1, s, Apply(f, a1))
                            }
                        }, Apply(f, v.(Dict)["value0"]), v.(Dict)["value1"])
                    }
                }
            }, "foldr1": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(Data_Maybe.Ꞌmaybe(), v.(Dict)["value0"], Apply(f, v.(Dict)["value0"]), Apply(foldr, func(a1 Any) Any {
                        return Apply(Ꞌcompose(), Data_Maybe.ꞋJust(), Apply(Data_Maybe.Ꞌmaybe(), a1, Apply(f, a1)))
                    }, Data_Maybe.ꞋNothing(), v.(Dict)["value1"]))
                }
            }, "foldl1": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(foldl, f, v.(Dict)["value0"], v.(Dict)["value1"])
                }
            }, "Foldable0": func(_ Any) Any {
                return foldableNonEmpty1
            },}
    }
}
func Ꞌfoldl1() Any {
    return func(dictFoldable Any) Any {
        return Apply(Data_Semigroup_Foldable.Ꞌfoldl1(), Apply(Ꞌfoldable1NonEmpty(), dictFoldable))
    }
}
func ꞋeqNonEmpty() Any {
    return func(dictEq1 Any) Any {
        var eq1 Any = Apply(Data_Eq.Ꞌeq1(), dictEq1)
        return func(dictEq Any) Any {
            var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
            var eq11 Any = Apply(eq1, dictEq)
            return Dict{"eq": func(x Any) Any {
                    return func(y Any) Any {
                        return Apply(Ꞌconj(), Apply(eq, x.(Dict)["value0"], y.(Dict)["value0"]), Apply(eq11, x.(Dict)["value1"], y.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋordNonEmpty() Any {
    return func(dictOrd1 Any) Any {
        var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd1)
        var eqNonEmpty1 Any = Apply(ꞋeqNonEmpty(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd Any) Any {
            var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
            var compare11 Any = Apply(compare1, dictOrd)
            var eqNonEmpty2 Any = Apply(eqNonEmpty1, Apply(dictOrd.(Dict)["Eq0"], Undefined))
            return Dict{"compare": func(x Any) Any {
                    return func(y Any) Any {
                        var v Any = Apply(compare, x.(Dict)["value0"], y.(Dict)["value0"])
                        if Is(v, "LT") {
                            return Data_Ordering.ꞋLT()
                        }
                        if Is(v, "GT") {
                            return Data_Ordering.ꞋGT()
                        }
                        return Apply(compare11, x.(Dict)["value1"], y.(Dict)["value1"])
                    }
                }, "Eq0": func(_ Any) Any {
                    return eqNonEmpty2
                },}
        }
    }
}
func Ꞌeq1NonEmpty() Any {
    return func(dictEq1 Any) Any {
        var eqNonEmpty1 Any = Apply(ꞋeqNonEmpty(), dictEq1)
        return Dict{"eq1": func(dictEq Any) Any {
                return Apply(Data_Eq.Ꞌeq(), Apply(eqNonEmpty1, dictEq))
            },}
    }
}
func Ꞌord1NonEmpty() Any {
    return func(dictOrd1 Any) Any {
        var ordNonEmpty1 Any = Apply(ꞋordNonEmpty(), dictOrd1)
        var eq1NonEmpty1 Any = Apply(Ꞌeq1NonEmpty(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return Dict{"compare1": func(dictOrd Any) Any {
                return Apply(Data_Ord.Ꞌcompare(), Apply(ordNonEmpty1, dictOrd))
            }, "Eq10": func(_ Any) Any {
                return eq1NonEmpty1
            },}
    }
}



