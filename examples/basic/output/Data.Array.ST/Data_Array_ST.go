// Code generated by psgo. DO NOT EDIT.

package Data_Array_ST

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Control.Monad.ST.Internal"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Monad.ST.Uncurried"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Maybe"
)

type _ = Any

func Ꞌbind() Any {
    return Apply(Control_Bind.Ꞌbind(), Control_Monad_ST_Internal.ꞋbindST())
}
func Ꞌnegate() Any {
    return Apply(Data_Ring.Ꞌnegate(), Data_Ring.ꞋringInt())
}
func Ꞌpure() Any {
    return Apply(Control_Applicative.Ꞌpure(), Control_Monad_ST_Internal.ꞋapplicativeST())
}
func ꞋunshiftAll() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn2(), ꞋunshiftAllImpl())
}
func Ꞌunshift() Any {
    return func(a Any) Any {
        return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn2(), ꞋunshiftAllImpl(), []Any{a})
    }
}
func ꞋunsafeThaw() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋunsafeThawImpl())
}
func ꞋunsafeFreeze() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋunsafeFreezeImpl())
}
func ꞋtoAssocArray() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋtoAssocArrayImpl())
}
func Ꞌthaw() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋthawImpl())
}
func ꞋwithArray() Any {
    return func(f Any) Any {
        return func(xs Any) Any {
            return Apply(Ꞌbind(), Apply(Ꞌthaw(), xs), func(result Any) Any {
                return Apply(Ꞌbind(), Apply(f, result), func(_ Any) Any {
                    return Apply(ꞋunsafeFreeze(), result)
                })
            })
        }
    }
}
func Ꞌsplice() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn4(), ꞋspliceImpl())
}
func ꞋsortBy() Any {
    return func(comp Any) Any {
        return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn3(), ꞋsortByImpl(), comp, func(v Any) Any {
            if Is(v, "GT") {
                return 1
            }
            if Is(v, "EQ") {
                return 0
            }
            if Is(v, "LT") {
                return Apply(Ꞌnegate(), 1)
            }
            panic("Failed pattern match at Data.Array.ST (line 129, column 40 - line 132, column 11)")
        })
    }
}
func ꞋsortWith() Any {
    return func(dictOrd Any) Any {
        var comparing Any = Apply(Data_Ord.Ꞌcomparing(), dictOrd)
        return func(f Any) Any {
            return Apply(ꞋsortBy(), Apply(comparing, f))
        }
    }
}
func Ꞌsort() Any {
    return func(dictOrd Any) Any {
        return Apply(ꞋsortBy(), Apply(Data_Ord.Ꞌcompare(), dictOrd))
    }
}
func Ꞌshift() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn3(), ꞋshiftImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌrun() Any {
    return func(st Any) Any {
        return Apply(Control_Monad_ST_Internal.Ꞌrun(), Apply(Ꞌbind(), st, ꞋunsafeFreeze()))
    }
}
func ꞋpushAll() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn2(), ꞋpushAllImpl())
}
func Ꞌpush() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn2(), ꞋpushImpl())
}
func Ꞌpop() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn3(), ꞋpopImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌpoke() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn3(), ꞋpokeImpl())
}
func Ꞌpeek() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn4(), ꞋpeekImpl(), Data_Maybe.ꞋJust(), Data_Maybe.ꞋNothing())
}
func Ꞌmodify() Any {
    return func(i Any) Any {
        return func(f Any) Any {
            return func(xs Any) Any {
                return Apply(Ꞌbind(), Apply(Ꞌpeek(), i, xs), func(entry Any) Any {
                    if Is(entry, "Just") {
                        return Apply(Ꞌpoke(), i, Apply(f, entry.(Dict)["value0"]), xs)
                    }
                    if Is(entry, "Nothing") {
                        return Apply(Ꞌpure(), false)
                    }
                    panic("Failed pattern match at Data.Array.ST (line 234, column 3 - line 236, column 26)")
                })
            }
        }
    }
}
func Ꞌlength() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋlengthImpl())
}
func Ꞌfreeze() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋfreezeImpl())
}
func Ꞌclone() Any {
    return Apply(Control_Monad_ST_Uncurried.ꞋrunSTFn1(), ꞋcloneImpl())
}


// Foreign values

var foreign = Foreign("Data.Array.ST")

var ᛌunsafeFreezeImpl_once Once
var ᛧunsafeFreezeImpl Any

func ꞋunsafeFreezeImpl() Any { 
    ᛌunsafeFreezeImpl_once.Do(func() {
        ᛧunsafeFreezeImpl = Get(foreign, "unsafeFreezeImpl")
    })
    return ᛧunsafeFreezeImpl
}

var ᛌunsafeThawImpl_once Once
var ᛧunsafeThawImpl Any

func ꞋunsafeThawImpl() Any { 
    ᛌunsafeThawImpl_once.Do(func() {
        ᛧunsafeThawImpl = Get(foreign, "unsafeThawImpl")
    })
    return ᛧunsafeThawImpl
}

var ᛌnew_once Once
var ᛧnew Any

func Ꞌnew() Any { 
    ᛌnew_once.Do(func() {
        ᛧnew = Get(foreign, "new")
    })
    return ᛧnew
}

var ᛌthawImpl_once Once
var ᛧthawImpl Any

func ꞋthawImpl() Any { 
    ᛌthawImpl_once.Do(func() {
        ᛧthawImpl = Get(foreign, "thawImpl")
    })
    return ᛧthawImpl
}

var ᛌcloneImpl_once Once
var ᛧcloneImpl Any

func ꞋcloneImpl() Any { 
    ᛌcloneImpl_once.Do(func() {
        ᛧcloneImpl = Get(foreign, "cloneImpl")
    })
    return ᛧcloneImpl
}

var ᛌshiftImpl_once Once
var ᛧshiftImpl Any

func ꞋshiftImpl() Any { 
    ᛌshiftImpl_once.Do(func() {
        ᛧshiftImpl = Get(foreign, "shiftImpl")
    })
    return ᛧshiftImpl
}

var ᛌsortByImpl_once Once
var ᛧsortByImpl Any

func ꞋsortByImpl() Any { 
    ᛌsortByImpl_once.Do(func() {
        ᛧsortByImpl = Get(foreign, "sortByImpl")
    })
    return ᛧsortByImpl
}

var ᛌfreezeImpl_once Once
var ᛧfreezeImpl Any

func ꞋfreezeImpl() Any { 
    ᛌfreezeImpl_once.Do(func() {
        ᛧfreezeImpl = Get(foreign, "freezeImpl")
    })
    return ᛧfreezeImpl
}

var ᛌpeekImpl_once Once
var ᛧpeekImpl Any

func ꞋpeekImpl() Any { 
    ᛌpeekImpl_once.Do(func() {
        ᛧpeekImpl = Get(foreign, "peekImpl")
    })
    return ᛧpeekImpl
}

var ᛌpokeImpl_once Once
var ᛧpokeImpl Any

func ꞋpokeImpl() Any { 
    ᛌpokeImpl_once.Do(func() {
        ᛧpokeImpl = Get(foreign, "pokeImpl")
    })
    return ᛧpokeImpl
}

var ᛌlengthImpl_once Once
var ᛧlengthImpl Any

func ꞋlengthImpl() Any { 
    ᛌlengthImpl_once.Do(func() {
        ᛧlengthImpl = Get(foreign, "lengthImpl")
    })
    return ᛧlengthImpl
}

var ᛌpopImpl_once Once
var ᛧpopImpl Any

func ꞋpopImpl() Any { 
    ᛌpopImpl_once.Do(func() {
        ᛧpopImpl = Get(foreign, "popImpl")
    })
    return ᛧpopImpl
}

var ᛌpushImpl_once Once
var ᛧpushImpl Any

func ꞋpushImpl() Any { 
    ᛌpushImpl_once.Do(func() {
        ᛧpushImpl = Get(foreign, "pushImpl")
    })
    return ᛧpushImpl
}

var ᛌpushAllImpl_once Once
var ᛧpushAllImpl Any

func ꞋpushAllImpl() Any { 
    ᛌpushAllImpl_once.Do(func() {
        ᛧpushAllImpl = Get(foreign, "pushAllImpl")
    })
    return ᛧpushAllImpl
}

var ᛌunshiftAllImpl_once Once
var ᛧunshiftAllImpl Any

func ꞋunshiftAllImpl() Any { 
    ᛌunshiftAllImpl_once.Do(func() {
        ᛧunshiftAllImpl = Get(foreign, "unshiftAllImpl")
    })
    return ᛧunshiftAllImpl
}

var ᛌspliceImpl_once Once
var ᛧspliceImpl Any

func ꞋspliceImpl() Any { 
    ᛌspliceImpl_once.Do(func() {
        ᛧspliceImpl = Get(foreign, "spliceImpl")
    })
    return ᛧspliceImpl
}

var ᛌtoAssocArrayImpl_once Once
var ᛧtoAssocArrayImpl Any

func ꞋtoAssocArrayImpl() Any { 
    ᛌtoAssocArrayImpl_once.Do(func() {
        ᛧtoAssocArrayImpl = Get(foreign, "toAssocArrayImpl")
    })
    return ᛧtoAssocArrayImpl
}


