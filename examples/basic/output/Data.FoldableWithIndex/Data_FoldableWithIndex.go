// Code generated by psgo. DO NOT EDIT.

package Data_FoldableWithIndex

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Foldable"
	"project.localhost/purescript-native/output/Data.FunctorWithIndex"
	"project.localhost/purescript-native/output/Data.Newtype"
	"project.localhost/purescript-native/output/Data.Monoid.Endo"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Monoid.Dual"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Monoid.Disj"
	"project.localhost/purescript-native/output/Data.Monoid.Conj"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌfoldr() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableMultiplicative())
}
func Ꞌfoldl() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableMultiplicative())
}
func ꞋfoldMap() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableMultiplicative())
}
func Ꞌfoldr1() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableMaybe())
}
func Ꞌfoldl1() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableMaybe())
}
func ꞋfoldMap1() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableMaybe())
}
func Ꞌfoldr2() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableLast())
}
func Ꞌfoldl2() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableLast())
}
func ꞋfoldMap2() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableLast())
}
func Ꞌfoldr3() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableFirst())
}
func Ꞌfoldl3() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableFirst())
}
func ꞋfoldMap3() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableFirst())
}
func Ꞌfoldr4() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableDual())
}
func Ꞌfoldl4() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableDual())
}
func ꞋfoldMap4() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableDual())
}
func Ꞌfoldr5() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableDisj())
}
func Ꞌfoldl5() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableDisj())
}
func ꞋfoldMap5() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableDisj())
}
func Ꞌfoldr6() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableConj())
}
func Ꞌfoldl6() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableConj())
}
func ꞋfoldMap6() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableConj())
}
func Ꞌfoldr7() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableAdditive())
}
func Ꞌfoldl7() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableAdditive())
}
func ꞋfoldMap7() Any {
    return Apply(Data_Foldable.ꞋfoldMap(), Data_Foldable.ꞋfoldableAdditive())
}
func Ꞌfoldr8() Any {
    return Apply(Data_Foldable.Ꞌfoldr(), Data_Foldable.ꞋfoldableArray())
}
func ꞋmapWithIndex() Any {
    return Apply(Data_FunctorWithIndex.ꞋmapWithIndex(), Data_FunctorWithIndex.ꞋfunctorWithIndexArray())
}
func Ꞌfoldl8() Any {
    return Apply(Data_Foldable.Ꞌfoldl(), Data_Foldable.ꞋfoldableArray())
}
func Ꞌunwrap() Any {
    return Apply(Data_Newtype.Ꞌunwrap(), Undefined)
}
func ꞋmonoidEndo() Any {
    return Apply(Data_Monoid_Endo.ꞋmonoidEndo(), Control_Category.ꞋcategoryFn())
}
func ꞋmonoidDual() Any {
    return Apply(Data_Monoid_Dual.ꞋmonoidDual(), ꞋmonoidEndo())
}
func ꞋFoldableWithIndex_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋfoldrWithIndex() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldrWithIndex"]
    }
}
func ꞋtraverseWithIndex_() Any {
    return func(dictApplicative Any) Any {
        var applySecond Any = Apply(Control_Apply.ꞋapplySecond(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        return func(dictFoldableWithIndex Any) Any {
            var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
            return func(f Any) Any {
                return Apply(foldrWithIndex1, func(i Any) Any {
                    return Apply(Ꞌcompose(), applySecond, Apply(f, i))
                }, Apply(pure, Data_Unit.Ꞌunit()))
            }
        }
    }
}
func ꞋforWithIndex_() Any {
    return func(dictApplicative Any) Any {
        var traverseWithIndex_1 Any = Apply(ꞋtraverseWithIndex_(), dictApplicative)
        return func(dictFoldableWithIndex Any) Any {
            return Apply(Data_Function.Ꞌflip(), Apply(traverseWithIndex_1, dictFoldableWithIndex))
        }
    }
}
func ꞋfoldrDefault() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        return func(f Any) Any {
            return Apply(foldrWithIndex1, Apply(Data_Function.Ꞌconst(), f))
        }
    }
}
func ꞋfoldlWithIndex() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldlWithIndex"]
    }
}
func ꞋfoldlDefault() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        return func(f Any) Any {
            return Apply(foldlWithIndex1, Apply(Data_Function.Ꞌconst(), f))
        }
    }
}

var ᛌfoldableWithIndexTuple_once Once
var ᛧfoldableWithIndexTuple Any

func ꞋfoldableWithIndexTuple() Any {
    ᛌfoldableWithIndexTuple_once.Do(func() {
        ᛧfoldableWithIndexTuple = Dict{"foldrWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), v.(Dict)["value1"], z)
                }
            }
        }, "foldlWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), z, v.(Dict)["value1"])
                }
            }
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), v.(Dict)["value1"])
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableTuple()
        },}
    })
return ᛧfoldableWithIndexTuple
}



var ᛌfoldableWithIndexMultiplicative_once Once
var ᛧfoldableWithIndexMultiplicative Any

func ꞋfoldableWithIndexMultiplicative() Any {
    ᛌfoldableWithIndexMultiplicative_once.Do(func() {
        ᛧfoldableWithIndexMultiplicative = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableMultiplicative()
        },}
    })
return ᛧfoldableWithIndexMultiplicative
}



var ᛌfoldableWithIndexMaybe_once Once
var ᛧfoldableWithIndexMaybe Any

func ꞋfoldableWithIndexMaybe() Any {
    ᛌfoldableWithIndexMaybe_once.Do(func() {
        ᛧfoldableWithIndexMaybe = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr1(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl1(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap1(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableMaybe()
        },}
    })
return ᛧfoldableWithIndexMaybe
}



var ᛌfoldableWithIndexLast_once Once
var ᛧfoldableWithIndexLast Any

func ꞋfoldableWithIndexLast() Any {
    ᛌfoldableWithIndexLast_once.Do(func() {
        ᛧfoldableWithIndexLast = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr2(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl2(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap2(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableLast()
        },}
    })
return ᛧfoldableWithIndexLast
}



var ᛌfoldableWithIndexIdentity_once Once
var ᛧfoldableWithIndexIdentity Any

func ꞋfoldableWithIndexIdentity() Any {
    ᛌfoldableWithIndexIdentity_once.Do(func() {
        ᛧfoldableWithIndexIdentity = Dict{"foldrWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), v, z)
                }
            }
        }, "foldlWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), z, v)
                }
            }
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            return func(f Any) Any {
                return func(v Any) Any {
                    return Apply(f, Data_Unit.Ꞌunit(), v)
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableIdentity()
        },}
    })
return ᛧfoldableWithIndexIdentity
}



var ᛌfoldableWithIndexFirst_once Once
var ᛧfoldableWithIndexFirst Any

func ꞋfoldableWithIndexFirst() Any {
    ᛌfoldableWithIndexFirst_once.Do(func() {
        ᛧfoldableWithIndexFirst = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr3(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl3(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap3(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableFirst()
        },}
    })
return ᛧfoldableWithIndexFirst
}



var ᛌfoldableWithIndexEither_once Once
var ᛧfoldableWithIndexEither Any

func ꞋfoldableWithIndexEither() Any {
    ᛌfoldableWithIndexEither_once.Do(func() {
        ᛧfoldableWithIndexEither = Dict{"foldrWithIndex": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    if Is(v2, "Left") {
                        return v1
                    }
                    if Is(v2, "Right") {
                        return Apply(v, Data_Unit.Ꞌunit(), v2.(Dict)["value0"], v1)
                    }
                    panic("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42)")
                }
            }
        }, "foldlWithIndex": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    if Is(v2, "Left") {
                        return v1
                    }
                    if Is(v2, "Right") {
                        return Apply(v, Data_Unit.Ꞌunit(), v1, v2.(Dict)["value0"])
                    }
                    panic("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42)")
                }
            }
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v1, "Left") {
                        return mempty
                    }
                    if Is(v1, "Right") {
                        return Apply(v, Data_Unit.Ꞌunit(), v1.(Dict)["value0"])
                    }
                    panic("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42)")
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableEither()
        },}
    })
return ᛧfoldableWithIndexEither
}



var ᛌfoldableWithIndexDual_once Once
var ᛧfoldableWithIndexDual Any

func ꞋfoldableWithIndexDual() Any {
    ᛌfoldableWithIndexDual_once.Do(func() {
        ᛧfoldableWithIndexDual = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr4(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl4(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap4(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableDual()
        },}
    })
return ᛧfoldableWithIndexDual
}



var ᛌfoldableWithIndexDisj_once Once
var ᛧfoldableWithIndexDisj Any

func ꞋfoldableWithIndexDisj() Any {
    ᛌfoldableWithIndexDisj_once.Do(func() {
        ᛧfoldableWithIndexDisj = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr5(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl5(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap5(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableDisj()
        },}
    })
return ᛧfoldableWithIndexDisj
}



var ᛌfoldableWithIndexConst_once Once
var ᛧfoldableWithIndexConst Any

func ꞋfoldableWithIndexConst() Any {
    ᛌfoldableWithIndexConst_once.Do(func() {
        ᛧfoldableWithIndexConst = Dict{"foldrWithIndex": func(v Any) Any {
            return func(z Any) Any {
                return func(v1 Any) Any {
                    return z
                }
            }
        }, "foldlWithIndex": func(v Any) Any {
            return func(z Any) Any {
                return func(v1 Any) Any {
                    return z
                }
            }
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return mempty
                }
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableConst()
        },}
    })
return ᛧfoldableWithIndexConst
}



var ᛌfoldableWithIndexConj_once Once
var ᛧfoldableWithIndexConj Any

func ꞋfoldableWithIndexConj() Any {
    ᛌfoldableWithIndexConj_once.Do(func() {
        ᛧfoldableWithIndexConj = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr6(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl6(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap6(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableConj()
        },}
    })
return ᛧfoldableWithIndexConj
}



var ᛌfoldableWithIndexAdditive_once Once
var ᛧfoldableWithIndexAdditive Any

func ꞋfoldableWithIndexAdditive() Any {
    ᛌfoldableWithIndexAdditive_once.Do(func() {
        ᛧfoldableWithIndexAdditive = Dict{"foldrWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldr7(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldlWithIndex": func(f Any) Any {
            return Apply(Ꞌfoldl7(), Apply(f, Data_Unit.Ꞌunit()))
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            var foldMap8 Any = Apply(ꞋfoldMap7(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldMap8, Apply(f, Data_Unit.Ꞌunit()))
            }
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableAdditive()
        },}
    })
return ᛧfoldableWithIndexAdditive
}


func ꞋfoldWithIndexM() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        return func(dictMonad Any) Any {
            var bind Any = Apply(Control_Bind.Ꞌbind(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
            var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
            return func(f Any) Any {
                return func(a0 Any) Any {
                    return Apply(foldlWithIndex1, func(i Any) Any {
                        return func(ma Any) Any {
                            return func(b Any) Any {
                                return Apply(bind, ma, Apply(Data_Function.Ꞌflip(), Apply(f, i), b))
                            }
                        }
                    }, Apply(pure, a0))
                }
            }
        }
    }
}
func ꞋfoldMapWithIndexDefaultR() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        return func(dictMonoid Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldrWithIndex1, func(i Any) Any {
                    return func(x Any) Any {
                        return func(acc Any) Any {
                            return Apply(append, Apply(f, i, x), acc)
                        }
                    }
                }, mempty)
            }
        }
    }
}

var ᛌfoldableWithIndexArray_once Once
var ᛧfoldableWithIndexArray Any

func ꞋfoldableWithIndexArray() Any {
    ᛌfoldableWithIndexArray_once.Do(func() {
        ᛧfoldableWithIndexArray = Dict{"foldrWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return Apply(Ꞌcompose(), Apply(Ꞌfoldr8(), func(v Any) Any {
                    return func(y Any) Any {
                        return Apply(f, v.(Dict)["value0"], v.(Dict)["value1"], y)
                    }
                }, z), Apply(ꞋmapWithIndex(), Data_Tuple.ꞋTuple()))
            }
        }, "foldlWithIndex": func(f Any) Any {
            return func(z Any) Any {
                return Apply(Ꞌcompose(), Apply(Ꞌfoldl8(), func(y Any) Any {
                    return func(v Any) Any {
                        return Apply(f, v.(Dict)["value0"], y, v.(Dict)["value1"])
                    }
                }, z), Apply(ꞋmapWithIndex(), Data_Tuple.ꞋTuple()))
            }
        }, "foldMapWithIndex": func(dictMonoid Any) Any {
            return Apply(ꞋfoldMapWithIndexDefaultR(), ꞋfoldableWithIndexArray(), dictMonoid)
        }, "Foldable0": func(_ Any) Any {
            return Data_Foldable.ꞋfoldableArray()
        },}
    })
return ᛧfoldableWithIndexArray
}


func ꞋfoldMapWithIndexDefaultL() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        return func(dictMonoid Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
            var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
            return func(f Any) Any {
                return Apply(foldlWithIndex1, func(i Any) Any {
                    return func(acc Any) Any {
                        return func(x Any) Any {
                            return Apply(append, acc, Apply(f, i, x))
                        }
                    }
                }, mempty)
            }
        }
    }
}
func ꞋfoldMapWithIndex() Any {
    return func(dict Any) Any {
        return dict.(Dict)["foldMapWithIndex"]
    }
}
func ꞋfoldableWithIndexApp() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        var foldableApp Any = Apply(Data_Foldable.ꞋfoldableApp(), Apply(dictFoldableWithIndex.(Dict)["Foldable0"], Undefined))
        return Dict{"foldrWithIndex": func(f Any) Any {
                return func(z Any) Any {
                    return func(v Any) Any {
                        return Apply(foldrWithIndex1, f, z, v)
                    }
                }
            }, "foldlWithIndex": func(f Any) Any {
                return func(z Any) Any {
                    return func(v Any) Any {
                        return Apply(foldlWithIndex1, f, z, v)
                    }
                }
            }, "foldMapWithIndex": func(dictMonoid Any) Any {
                var foldMapWithIndex2 Any = Apply(foldMapWithIndex1, dictMonoid)
                return func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(foldMapWithIndex2, f, v)
                    }
                }
            }, "Foldable0": func(_ Any) Any {
                return foldableApp
            },}
    }
}
func ꞋfoldableWithIndexCompose() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        var foldableCompose Any = Apply(Data_Foldable.ꞋfoldableCompose(), Apply(dictFoldableWithIndex.(Dict)["Foldable0"], Undefined))
        return func(dictFoldableWithIndex1 Any) Any {
            var foldrWithIndex2 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex1)
            var foldlWithIndex2 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex1)
            var foldMapWithIndex2 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex1)
            var foldableCompose1 Any = Apply(foldableCompose, Apply(dictFoldableWithIndex1.(Dict)["Foldable0"], Undefined))
            return Dict{"foldrWithIndex": func(f Any) Any {
                    return func(i Any) Any {
                        return func(v Any) Any {
                            return Apply(foldrWithIndex1, func(a Any) Any {
                                return Apply(Data_Function.Ꞌflip(), Apply(foldrWithIndex2, Apply(Data_Tuple.Ꞌcurry(), f, a)))
                            }, i, v)
                        }
                    }
                }, "foldlWithIndex": func(f Any) Any {
                    return func(i Any) Any {
                        return func(v Any) Any {
                            return Apply(foldlWithIndex1, Apply(Ꞌcompose(), foldlWithIndex2, Apply(Data_Tuple.Ꞌcurry(), f)), i, v)
                        }
                    }
                }, "foldMapWithIndex": func(dictMonoid Any) Any {
                    var foldMapWithIndex3 Any = Apply(foldMapWithIndex1, dictMonoid)
                    var foldMapWithIndex4 Any = Apply(foldMapWithIndex2, dictMonoid)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(foldMapWithIndex3, Apply(Ꞌcompose(), foldMapWithIndex4, Apply(Data_Tuple.Ꞌcurry(), f)), v)
                        }
                    }
                }, "Foldable0": func(_ Any) Any {
                    return foldableCompose1
                },}
        }
    }
}
func ꞋfoldableWithIndexCoproduct() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        var foldableCoproduct Any = Apply(Data_Foldable.ꞋfoldableCoproduct(), Apply(dictFoldableWithIndex.(Dict)["Foldable0"], Undefined))
        return func(dictFoldableWithIndex1 Any) Any {
            var foldrWithIndex2 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex1)
            var foldlWithIndex2 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex1)
            var foldMapWithIndex2 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex1)
            var foldableCoproduct1 Any = Apply(foldableCoproduct, Apply(dictFoldableWithIndex1.(Dict)["Foldable0"], Undefined))
            return Dict{"foldrWithIndex": func(f Any) Any {
                    return func(z Any) Any {
                        return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(foldrWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), z), Apply(foldrWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), z))
                    }
                }, "foldlWithIndex": func(f Any) Any {
                    return func(z Any) Any {
                        return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(foldlWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), z), Apply(foldlWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), z))
                    }
                }, "foldMapWithIndex": func(dictMonoid Any) Any {
                    var foldMapWithIndex3 Any = Apply(foldMapWithIndex1, dictMonoid)
                    var foldMapWithIndex4 Any = Apply(foldMapWithIndex2, dictMonoid)
                    return func(f Any) Any {
                        return Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(foldMapWithIndex3, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft())), Apply(foldMapWithIndex4, Apply(Ꞌcompose(), f, Data_Either.ꞋRight())))
                    }
                }, "Foldable0": func(_ Any) Any {
                    return foldableCoproduct1
                },}
        }
    }
}
func ꞋfoldableWithIndexProduct() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldrWithIndex1 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex)
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        var foldableProduct Any = Apply(Data_Foldable.ꞋfoldableProduct(), Apply(dictFoldableWithIndex.(Dict)["Foldable0"], Undefined))
        return func(dictFoldableWithIndex1 Any) Any {
            var foldrWithIndex2 Any = Apply(ꞋfoldrWithIndex(), dictFoldableWithIndex1)
            var foldlWithIndex2 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex1)
            var foldMapWithIndex2 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex1)
            var foldableProduct1 Any = Apply(foldableProduct, Apply(dictFoldableWithIndex1.(Dict)["Foldable0"], Undefined))
            return Dict{"foldrWithIndex": func(f Any) Any {
                    return func(z Any) Any {
                        return func(v Any) Any {
                            return Apply(foldrWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), Apply(foldrWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), z, v.(Dict)["value1"]), v.(Dict)["value0"])
                        }
                    }
                }, "foldlWithIndex": func(f Any) Any {
                    return func(z Any) Any {
                        return func(v Any) Any {
                            return Apply(foldlWithIndex2, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), Apply(foldlWithIndex1, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), z, v.(Dict)["value0"]), v.(Dict)["value1"])
                        }
                    }
                }, "foldMapWithIndex": func(dictMonoid Any) Any {
                    var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
                    var foldMapWithIndex3 Any = Apply(foldMapWithIndex1, dictMonoid)
                    var foldMapWithIndex4 Any = Apply(foldMapWithIndex2, dictMonoid)
                    return func(f Any) Any {
                        return func(v Any) Any {
                            return Apply(append, Apply(foldMapWithIndex3, Apply(Ꞌcompose(), f, Data_Either.ꞋLeft()), v.(Dict)["value0"]), Apply(foldMapWithIndex4, Apply(Ꞌcompose(), f, Data_Either.ꞋRight()), v.(Dict)["value1"]))
                        }
                    }
                }, "Foldable0": func(_ Any) Any {
                    return foldableProduct1
                },}
        }
    }
}
func ꞋfoldlWithIndexDefault() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex, ꞋmonoidDual())
        return func(c Any) Any {
            return func(u Any) Any {
                return func(xs Any) Any {
                    return Apply(Ꞌunwrap(), Apply(Ꞌunwrap(), Apply(foldMapWithIndex1, func(i Any) Any {
                        return Apply(Ꞌcompose(), Data_Monoid_Dual.ꞋDual(), Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), Apply(Data_Function.Ꞌflip(), Apply(c, i))))
                    }, xs)), u)
                }
            }
        }
    }
}
func ꞋfoldrWithIndexDefault() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex, ꞋmonoidEndo())
        return func(c Any) Any {
            return func(u Any) Any {
                return func(xs Any) Any {
                    return Apply(Ꞌunwrap(), Apply(foldMapWithIndex1, func(i Any) Any {
                        return Apply(Ꞌcompose(), Data_Monoid_Endo.ꞋEndo(), Apply(c, i))
                    }, xs), u)
                }
            }
        }
    }
}
func ꞋsurroundMapWithIndex() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex, ꞋmonoidEndo())
        return func(dictSemigroup Any) Any {
            var append Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
            return func(d Any) Any {
                return func(t Any) Any {
                    return func(f Any) Any {
                        var joined Any = func(i Any) Any {
                            return func(a Any) Any {
                                return func(m Any) Any {
                                    return Apply(append, d, Apply(append, Apply(t, i, a), m))
                                }
                            }
                        }
                        return Apply(Ꞌunwrap(), Apply(foldMapWithIndex1, joined, f), d)
                    }
                }
            }
        }
    }
}
func ꞋfoldMapDefault() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        return func(dictMonoid Any) Any {
            var foldMapWithIndex2 Any = Apply(foldMapWithIndex1, dictMonoid)
            return func(f Any) Any {
                return Apply(foldMapWithIndex2, Apply(Data_Function.Ꞌconst(), f))
            }
        }
    }
}
func ꞋfindWithIndex() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        return func(p Any) Any {
            var ˉgo Any = func(v Any) Any {
                return func(v1 Any) Any {
                    return func(v2 Any) Any {
                        if Is(v1, "Nothing") && Apply(p, v, v2) == true {
                            return Apply(Data_Maybe.ꞋJust(), Dict{"index": v, "value": v2,})
                        }
                        return v1
                    }
                }
            }
            return Apply(foldlWithIndex1, ˉgo, Data_Maybe.ꞋNothing())
        }
    }
}
func ꞋfindMapWithIndex() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldlWithIndex1 Any = Apply(ꞋfoldlWithIndex(), dictFoldableWithIndex)
        return func(f Any) Any {
            var ˉgo Any = func(v Any) Any {
                return func(v1 Any) Any {
                    return func(v2 Any) Any {
                        if Is(v1, "Nothing") {
                            return Apply(f, v, v2)
                        }
                        return v1
                    }
                }
            }
            return Apply(foldlWithIndex1, ˉgo, Data_Maybe.ꞋNothing())
        }
    }
}
func ꞋanyWithIndex() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        return func(dictHeytingAlgebra Any) Any {
            var foldMapWithIndex2 Any = Apply(foldMapWithIndex1, Apply(Data_Monoid_Disj.ꞋmonoidDisj(), dictHeytingAlgebra))
            return func(t Any) Any {
                return Apply(Ꞌcompose(), Ꞌunwrap(), Apply(foldMapWithIndex2, func(i Any) Any {
                    return Apply(Ꞌcompose(), Data_Monoid_Disj.ꞋDisj(), Apply(t, i))
                }))
            }
        }
    }
}
func ꞋallWithIndex() Any {
    return func(dictFoldableWithIndex Any) Any {
        var foldMapWithIndex1 Any = Apply(ꞋfoldMapWithIndex(), dictFoldableWithIndex)
        return func(dictHeytingAlgebra Any) Any {
            var foldMapWithIndex2 Any = Apply(foldMapWithIndex1, Apply(Data_Monoid_Conj.ꞋmonoidConj(), dictHeytingAlgebra))
            return func(t Any) Any {
                return Apply(Ꞌcompose(), Ꞌunwrap(), Apply(foldMapWithIndex2, func(i Any) Any {
                    return Apply(Ꞌcompose(), Data_Monoid_Conj.ꞋConj(), Apply(t, i))
                }))
            }
        }
    }
}



