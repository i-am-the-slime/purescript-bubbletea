// Code generated by psgo. DO NOT EDIT.

package Data_Profunctor_Star

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Bind"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Functor.Invariant"
	"project.localhost/purescript-native/output/Data.Distributive"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Control.Plus"
)

type _ = Any

func ꞋcomposeFlipped() Any {
    return Apply(Control_Semigroupoid.ꞋcomposeFlipped(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋStar() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋsemigroupoidStar() Any {
    return func(dictBind Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), dictBind)
        return Dict{"compose": func(v Any) Any {
                return func(v1 Any) Any {
                    return func(x Any) Any {
                        return Apply(bind, Apply(v1, x), v)
                    }
                }
            },}
    }
}
func ꞋprofunctorStar() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"dimap": func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(ꞋcomposeFlipped(), f, Apply(ꞋcomposeFlipped(), v, Apply(ˉmap, g)))
                    }
                }
            },}
    }
}
func ꞋstrongStar() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        var profunctorStar1 Any = Apply(ꞋprofunctorStar(), dictFunctor)
        return Dict{"first": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(ˉmap, func(v2 Any) Any {
                        return Apply(Data_Tuple.ꞋTuple(), v2, v1.(Dict)["value1"])
                    }, Apply(v, v1.(Dict)["value0"]))
                }
            }, "second": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(ˉmap, Apply(Data_Tuple.ꞋTuple(), v1.(Dict)["value0"]), Apply(v, v1.(Dict)["value1"]))
                }
            }, "Profunctor0": func(_ Any) Any {
                return profunctorStar1
            },}
    }
}

var ᛌnewtypeStar_once Once
var ᛧnewtypeStar Any

func ꞋnewtypeStar() Any {
    ᛌnewtypeStar_once.Do(func() {
        ᛧnewtypeStar = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeStar
}


func ꞋinvariantStar() Any {
    return func(dictInvariant Any) Any {
        var imap Any = Apply(Data_Functor_Invariant.Ꞌimap(), dictInvariant)
        return Dict{"imap": func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(Ꞌcompose(), Apply(imap, f, g), v)
                    }
                }
            },}
    }
}
func ꞋhoistStar() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(Ꞌcompose(), f, v)
        }
    }
}
func ꞋfunctorStar() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"map": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(Ꞌcompose(), Apply(ˉmap, f), v)
                }
            },}
    }
}
func ꞋdistributiveStar() Any {
    return func(dictDistributive Any) Any {
        var collect Any = Apply(Data_Distributive.Ꞌcollect(), dictDistributive)
        var functorStar1 Any = Apply(ꞋfunctorStar(), Apply(dictDistributive.(Dict)["Functor0"], Undefined))
        return Dict{"distribute": func(dictFunctor Any) Any {
                var collect1 Any = Apply(collect, dictFunctor)
                return func(f Any) Any {
                    return func(a Any) Any {
                        return Apply(collect1, func(v Any) Any {
                            return Apply(v, a)
                        }, f)
                    }
                }
            }, "collect": func(dictFunctor Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
                return func(f Any) Any {
                    return Apply(Ꞌcompose(), Apply(Data_Distributive.Ꞌdistribute(), Apply(ꞋdistributiveStar(), dictDistributive), dictFunctor), Apply(ˉmap, f))
                }
            }, "Functor0": func(_ Any) Any {
                return functorStar1
            },}
    }
}
func ꞋclosedStar() Any {
    return func(dictDistributive Any) Any {
        var distribute Any = Apply(Data_Distributive.Ꞌdistribute(), dictDistributive, Data_Functor.ꞋfunctorFn())
        var profunctorStar1 Any = Apply(ꞋprofunctorStar(), Apply(dictDistributive.(Dict)["Functor0"], Undefined))
        return Dict{"closed": func(v Any) Any {
                return func(g Any) Any {
                    return Apply(distribute, Apply(Ꞌcompose(), v, g))
                }
            }, "Profunctor0": func(_ Any) Any {
                return profunctorStar1
            },}
    }
}
func ꞋchoiceStar() Any {
    return func(dictApplicative Any) Any {
        var Functor0 Any = Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Functor0)
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var profunctorStar1 Any = Apply(ꞋprofunctorStar(), Functor0)
        return Dict{"left": func(v Any) Any {
                return Apply(Data_Either.Ꞌeither(), Apply(Ꞌcompose(), Apply(ˉmap, Data_Either.ꞋLeft()), v), Apply(Ꞌcompose(), pure, Data_Either.ꞋRight()))
            }, "right": func(v Any) Any {
                return Apply(Data_Either.Ꞌeither(), Apply(Ꞌcompose(), pure, Data_Either.ꞋLeft()), Apply(Ꞌcompose(), Apply(ˉmap, Data_Either.ꞋRight()), v))
            }, "Profunctor0": func(_ Any) Any {
                return profunctorStar1
            },}
    }
}
func ꞋcategoryStar() Any {
    return func(dictMonad Any) Any {
        var semigroupoidStar1 Any = Apply(ꞋsemigroupoidStar(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        return Dict{"identity": Apply(Control_Applicative.Ꞌpure(), Apply(dictMonad.(Dict)["Applicative0"], Undefined)), "Semigroupoid0": func(_ Any) Any {
                return semigroupoidStar1
            },}
    }
}
func ꞋapplyStar() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var functorStar1 Any = Apply(ꞋfunctorStar(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return Dict{"apply": func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return Apply(apply, Apply(v, a), Apply(v1, a))
                    }
                }
            }, "Functor0": func(_ Any) Any {
                return functorStar1
            },}
    }
}
func ꞋbindStar() Any {
    return func(dictBind Any) Any {
        var bind Any = Apply(Control_Bind.Ꞌbind(), dictBind)
        var applyStar1 Any = Apply(ꞋapplyStar(), Apply(dictBind.(Dict)["Apply0"], Undefined))
        return Dict{"bind": func(v Any) Any {
                return func(f Any) Any {
                    return func(x Any) Any {
                        return Apply(bind, Apply(v, x), func(a Any) Any {
                            var v1 Any = Apply(f, a)
                            return Apply(v1, x)
                        })
                    }
                }
            }, "Apply0": func(_ Any) Any {
                return applyStar1
            },}
    }
}
func ꞋapplicativeStar() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var applyStar1 Any = Apply(ꞋapplyStar(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return Dict{"pure": func(a Any) Any {
                return func(v Any) Any {
                    return Apply(pure, a)
                }
            }, "Apply0": func(_ Any) Any {
                return applyStar1
            },}
    }
}
func ꞋmonadStar() Any {
    return func(dictMonad Any) Any {
        var applicativeStar1 Any = Apply(ꞋapplicativeStar(), Apply(dictMonad.(Dict)["Applicative0"], Undefined))
        var bindStar1 Any = Apply(ꞋbindStar(), Apply(dictMonad.(Dict)["Bind1"], Undefined))
        return Dict{"Applicative0": func(_ Any) Any {
                return applicativeStar1
            }, "Bind1": func(_ Any) Any {
                return bindStar1
            },}
    }
}
func ꞋaltStar() Any {
    return func(dictAlt Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), dictAlt)
        var functorStar1 Any = Apply(ꞋfunctorStar(), Apply(dictAlt.(Dict)["Functor0"], Undefined))
        return Dict{"alt": func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return Apply(alt, Apply(v, a), Apply(v1, a))
                    }
                }
            }, "Functor0": func(_ Any) Any {
                return functorStar1
            },}
    }
}
func ꞋplusStar() Any {
    return func(dictPlus Any) Any {
        var empty Any = Apply(Control_Plus.Ꞌempty(), dictPlus)
        var altStar1 Any = Apply(ꞋaltStar(), Apply(dictPlus.(Dict)["Alt0"], Undefined))
        return Dict{"empty": func(v Any) Any {
                return empty
            }, "Alt0": func(_ Any) Any {
                return altStar1
            },}
    }
}
func ꞋalternativeStar() Any {
    return func(dictAlternative Any) Any {
        var applicativeStar1 Any = Apply(ꞋapplicativeStar(), Apply(dictAlternative.(Dict)["Applicative0"], Undefined))
        var plusStar1 Any = Apply(ꞋplusStar(), Apply(dictAlternative.(Dict)["Plus1"], Undefined))
        return Dict{"Applicative0": func(_ Any) Any {
                return applicativeStar1
            }, "Plus1": func(_ Any) Any {
                return plusStar1
            },}
    }
}
func ꞋmonadPlusStar() Any {
    return func(dictMonadPlus Any) Any {
        var monadStar1 Any = Apply(ꞋmonadStar(), Apply(dictMonadPlus.(Dict)["Monad0"], Undefined))
        var alternativeStar1 Any = Apply(ꞋalternativeStar(), Apply(dictMonadPlus.(Dict)["Alternative1"], Undefined))
        return Dict{"Monad0": func(_ Any) Any {
                return monadStar1
            }, "Alternative1": func(_ Any) Any {
                return alternativeStar1
            },}
    }
}



