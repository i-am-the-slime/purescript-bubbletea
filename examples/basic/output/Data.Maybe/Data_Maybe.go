// Code generated by psgo. DO NOT EDIT.

package Data_Maybe

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.Functor.Invariant"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Bounded"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Semiring"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}

var ᛌNothing_once Once
var ᛧNothing Any

func ꞋNothing() Any {
    ᛌNothing_once.Do(func() {
        ᛧNothing = Dict{"Nothing": true,}
    })
return ᛧNothing
}


func ꞋJust() Any {
    return func(value0 Any) Any {
        return Dict{"Just": true, "value0": value0,}
    }
}
func ꞋshowMaybe() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                if Is(v, "Just") {
                    return Apply(Ꞌappend(), "(Just ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), ")"))
                }
                if Is(v, "Nothing") {
                    return "Nothing"
                }
                panic("Failed pattern match at Data.Maybe (line 223, column 1 - line 225, column 28)")
            },}
    }
}
func ꞋsemigroupMaybe() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v, "Nothing") {
                        return v1
                    }
                    if Is(v1, "Nothing") {
                        return v
                    }
                    if Is(v, "Just") && Is(v1, "Just") {
                        return Apply(ꞋJust(), Apply(append1, v.(Dict)["value0"], v1.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Maybe (line 182, column 1 - line 185, column 43)")
                }
            },}
    }
}
func Ꞌoptional() Any {
    return func(dictAlt Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), dictAlt)
        var map1 Any = Apply(Data_Functor.Ꞌmap(), Apply(dictAlt.(Dict)["Functor0"], Undefined))
        return func(dictApplicative Any) Any {
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(a Any) Any {
                return Apply(alt, Apply(map1, ꞋJust(), a), Apply(pure, ꞋNothing()))
            }
        }
    }
}
func ꞋmonoidMaybe() Any {
    return func(dictSemigroup Any) Any {
        var semigroupMaybe1 Any = Apply(ꞋsemigroupMaybe(), dictSemigroup)
        return Dict{"mempty": ꞋNothing(), "Semigroup0": func(_ Any) Any {
                return semigroupMaybe1
            },}
    }
}
func Ꞌmaybeꞌ() Any {
    return func(v Any) Any {
        return func(v1 Any) Any {
            return func(v2 Any) Any {
                if Is(v2, "Nothing") {
                    return Apply(v, Data_Unit.Ꞌunit())
                }
                if Is(v2, "Just") {
                    return Apply(v1, v2.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Maybe (line 250, column 1 - line 250, column 62)")
            }
        }
    }
}
func Ꞌmaybe() Any {
    return func(v Any) Any {
        return func(v1 Any) Any {
            return func(v2 Any) Any {
                if Is(v2, "Nothing") {
                    return v
                }
                if Is(v2, "Just") {
                    return Apply(v1, v2.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51)")
            }
        }
    }
}
func ꞋisNothing() Any {
    return Apply(Ꞌmaybe(), true, Apply(Data_Function.Ꞌconst(), false))
}
func ꞋisJust() Any {
    return Apply(Ꞌmaybe(), false, Apply(Data_Function.Ꞌconst(), true))
}

var ᛌgenericMaybe_once Once
var ᛧgenericMaybe Any

func ꞋgenericMaybe() Any {
    ᛌgenericMaybe_once.Do(func() {
        ᛧgenericMaybe = Dict{"to": func(x Any) Any {
            if Is(x, "Inl") {
                return ꞋNothing()
            }
            if Is(x, "Inr") {
                return Apply(ꞋJust(), x.(Dict)["value0"])
            }
            panic("Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52)")
        }, "from": func(x Any) Any {
            if Is(x, "Nothing") {
                return Apply(Data_Generic_Rep.ꞋInl(), Data_Generic_Rep.ꞋNoArguments())
            }
            if Is(x, "Just") {
                return Apply(Data_Generic_Rep.ꞋInr(), x.(Dict)["value0"])
            }
            panic("Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52)")
        },}
    })
return ᛧgenericMaybe
}



var ᛌfunctorMaybe_once Once
var ᛧfunctorMaybe Any

func ꞋfunctorMaybe() Any {
    ᛌfunctorMaybe_once.Do(func() {
        ᛧfunctorMaybe = Dict{"map": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v1, "Just") {
                    return Apply(ꞋJust(), Apply(v, v1.(Dict)["value0"]))
                }
                return ꞋNothing()
            }
        },}
    })
return ᛧfunctorMaybe
}


func Ꞌmap() Any {
    return Apply(Data_Functor.Ꞌmap(), ꞋfunctorMaybe())
}

var ᛌinvariantMaybe_once Once
var ᛧinvariantMaybe Any

func ꞋinvariantMaybe() Any {
    ᛌinvariantMaybe_once.Do(func() {
        ᛧinvariantMaybe = Dict{"imap": Apply(Data_Functor_Invariant.ꞋimapF(), ꞋfunctorMaybe()),}
    })
return ᛧinvariantMaybe
}


func ꞋfromMaybeꞌ() Any {
    return func(a Any) Any {
        return Apply(Ꞌmaybeꞌ(), a, Ꞌidentity())
    }
}
func ꞋfromMaybe() Any {
    return func(a Any) Any {
        return Apply(Ꞌmaybe(), a, Ꞌidentity())
    }
}
func ꞋfromJust() Any {
    return func(_ Any) Any {
        return func(v Any) Any {
            if Is(v, "Just") {
                return v.(Dict)["value0"]
            }
            panic("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46)")
        }
    }
}

var ᛌextendMaybe_once Once
var ᛧextendMaybe Any

func ꞋextendMaybe() Any {
    ᛌextendMaybe_once.Do(func() {
        ᛧextendMaybe = Dict{"extend": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v1, "Nothing") {
                    return ꞋNothing()
                }
                return Apply(ꞋJust(), Apply(v, v1))
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorMaybe()
        },}
    })
return ᛧextendMaybe
}


func ꞋeqMaybe() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return Dict{"eq": func(x Any) Any {
                return func(y Any) Any {
                    if Is(x, "Nothing") && Is(y, "Nothing") {
                        return true
                    }
                    if Is(x, "Just") && Is(y, "Just") {
                        return Apply(eq, x.(Dict)["value0"], y.(Dict)["value0"])
                    }
                    return false
                }
            },}
    }
}
func ꞋordMaybe() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        var eqMaybe1 Any = Apply(ꞋeqMaybe(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare": func(x Any) Any {
                return func(y Any) Any {
                    if Is(x, "Nothing") && Is(y, "Nothing") {
                        return Data_Ordering.ꞋEQ()
                    }
                    if Is(x, "Nothing") {
                        return Data_Ordering.ꞋLT()
                    }
                    if Is(y, "Nothing") {
                        return Data_Ordering.ꞋGT()
                    }
                    if Is(x, "Just") && Is(y, "Just") {
                        return Apply(compare, x.(Dict)["value0"], y.(Dict)["value0"])
                    }
                    panic("Failed pattern match at Data.Maybe (line 0, column 0 - line 0, column 0)")
                }
            }, "Eq0": func(_ Any) Any {
                return eqMaybe1
            },}
    }
}

var ᛌeq1Maybe_once Once
var ᛧeq1Maybe Any

func Ꞌeq1Maybe() Any {
    ᛌeq1Maybe_once.Do(func() {
        ᛧeq1Maybe = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqMaybe(), dictEq))
        },}
    })
return ᛧeq1Maybe
}



var ᛌord1Maybe_once Once
var ᛧord1Maybe Any

func Ꞌord1Maybe() Any {
    ᛌord1Maybe_once.Do(func() {
        ᛧord1Maybe = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordMaybe(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Maybe()
        },}
    })
return ᛧord1Maybe
}


func ꞋboundedMaybe() Any {
    return func(dictBounded Any) Any {
        var ordMaybe1 Any = Apply(ꞋordMaybe(), Apply(dictBounded.(Dict)["Ord0"], Undefined))
        return Dict{"top": Apply(ꞋJust(), Apply(Data_Bounded.Ꞌtop(), dictBounded)), "bottom": ꞋNothing(), "Ord0": func(_ Any) Any {
                return ordMaybe1
            },}
    }
}

var ᛌapplyMaybe_once Once
var ᛧapplyMaybe Any

func ꞋapplyMaybe() Any {
    ᛌapplyMaybe_once.Do(func() {
        ᛧapplyMaybe = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "Just") {
                    return Apply(Ꞌmap(), v.(Dict)["value0"], v1)
                }
                if Is(v, "Nothing") {
                    return ꞋNothing()
                }
                panic("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30)")
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorMaybe()
        },}
    })
return ᛧapplyMaybe
}


func Ꞌapply() Any {
    return Apply(Control_Apply.Ꞌapply(), ꞋapplyMaybe())
}

var ᛌbindMaybe_once Once
var ᛧbindMaybe Any

func ꞋbindMaybe() Any {
    ᛌbindMaybe_once.Do(func() {
        ᛧbindMaybe = Dict{"bind": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "Just") {
                    return Apply(v1, v.(Dict)["value0"])
                }
                if Is(v, "Nothing") {
                    return ꞋNothing()
                }
                panic("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28)")
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyMaybe()
        },}
    })
return ᛧbindMaybe
}


func ꞋsemiringMaybe() Any {
    return func(dictSemiring Any) Any {
        var add Any = Apply(Data_Semiring.Ꞌadd(), dictSemiring)
        var mul Any = Apply(Data_Semiring.Ꞌmul(), dictSemiring)
        return Dict{"zero": ꞋNothing(), "one": Apply(ꞋJust(), Apply(Data_Semiring.Ꞌone(), dictSemiring)), "add": func(v Any) Any {
                return func(v1 Any) Any {
                    if Is(v, "Nothing") {
                        return v1
                    }
                    if Is(v1, "Nothing") {
                        return v
                    }
                    if Is(v, "Just") && Is(v1, "Just") {
                        return Apply(ꞋJust(), Apply(add, v.(Dict)["value0"], v1.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Maybe (line 190, column 1 - line 198, column 28)")
                }
            }, "mul": func(x Any) Any {
                return func(y Any) Any {
                    return Apply(Ꞌapply(), Apply(Ꞌmap(), mul, x), y)
                }
            },}
    }
}

var ᛌapplicativeMaybe_once Once
var ᛧapplicativeMaybe Any

func ꞋapplicativeMaybe() Any {
    ᛌapplicativeMaybe_once.Do(func() {
        ᛧapplicativeMaybe = Dict{"pure": ꞋJust(), "Apply0": func(_ Any) Any {
            return ꞋapplyMaybe()
        },}
    })
return ᛧapplicativeMaybe
}



var ᛌmonadMaybe_once Once
var ᛧmonadMaybe Any

func ꞋmonadMaybe() Any {
    ᛌmonadMaybe_once.Do(func() {
        ᛧmonadMaybe = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeMaybe()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindMaybe()
        },}
    })
return ᛧmonadMaybe
}



var ᛌaltMaybe_once Once
var ᛧaltMaybe Any

func ꞋaltMaybe() Any {
    ᛌaltMaybe_once.Do(func() {
        ᛧaltMaybe = Dict{"alt": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "Nothing") {
                    return v1
                }
                return v
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorMaybe()
        },}
    })
return ᛧaltMaybe
}



var ᛌplusMaybe_once Once
var ᛧplusMaybe Any

func ꞋplusMaybe() Any {
    ᛌplusMaybe_once.Do(func() {
        ᛧplusMaybe = Dict{"empty": ꞋNothing(), "Alt0": func(_ Any) Any {
            return ꞋaltMaybe()
        },}
    })
return ᛧplusMaybe
}



var ᛌalternativeMaybe_once Once
var ᛧalternativeMaybe Any

func ꞋalternativeMaybe() Any {
    ᛌalternativeMaybe_once.Do(func() {
        ᛧalternativeMaybe = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeMaybe()
        }, "Plus1": func(_ Any) Any {
            return ꞋplusMaybe()
        },}
    })
return ᛧalternativeMaybe
}





