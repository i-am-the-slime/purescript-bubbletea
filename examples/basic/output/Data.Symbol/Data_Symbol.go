// Code generated by psgo. DO NOT EDIT.

package Data_Symbol

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Type.Proxy"
)

type _ = Any

func ꞋIsSymbol_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋreifySymbol() Any {
    return func(s Any) Any {
        return func(f Any) Any {
            return Apply(ꞋunsafeCoerce(), func(dictIsSymbol Any) Any {
                return Apply(f, dictIsSymbol)
            }, Dict{"reflectSymbol": func(v Any) Any {
                    return s
                },}, Type_Proxy.ꞋProxy())
        }
    }
}
func ꞋreflectSymbol() Any {
    return func(dict Any) Any {
        return dict.(Dict)["reflectSymbol"]
    }
}


// Foreign values

var foreign = Foreign("Data.Symbol")

var ᛌunsafeCoerce_once Once
var ᛧunsafeCoerce Any

func ꞋunsafeCoerce() Any { 
    ᛌunsafeCoerce_once.Do(func() {
        ᛧunsafeCoerce = Get(foreign, "unsafeCoerce")
    })
    return ᛧunsafeCoerce
}


