// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Multiplicative

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋMultiplicative() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowMultiplicative() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Multiplicative ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupMultiplicative() Any {
    return func(dictSemiring Any) Any {
        var mul Any = Apply(Data_Semiring.Ꞌmul(), dictSemiring)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(mul, v, v1)
                }
            },}
    }
}
func ꞋordMultiplicative() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func ꞋmonoidMultiplicative() Any {
    return func(dictSemiring Any) Any {
        var semigroupMultiplicative1 Any = Apply(ꞋsemigroupMultiplicative(), dictSemiring)
        return Dict{"mempty": Apply(Data_Semiring.Ꞌone(), dictSemiring), "Semigroup0": func(_ Any) Any {
                return semigroupMultiplicative1
            },}
    }
}

var ᛌfunctorMultiplicative_once Once
var ᛧfunctorMultiplicative Any

func ꞋfunctorMultiplicative() Any {
    ᛌfunctorMultiplicative_once.Do(func() {
        ᛧfunctorMultiplicative = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorMultiplicative
}


func ꞋeqMultiplicative() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Multiplicative_once Once
var ᛧeq1Multiplicative Any

func Ꞌeq1Multiplicative() Any {
    ᛌeq1Multiplicative_once.Do(func() {
        ᛧeq1Multiplicative = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqMultiplicative(), dictEq))
        },}
    })
return ᛧeq1Multiplicative
}



var ᛌord1Multiplicative_once Once
var ᛧord1Multiplicative Any

func Ꞌord1Multiplicative() Any {
    ᛌord1Multiplicative_once.Do(func() {
        ᛧord1Multiplicative = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordMultiplicative(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Multiplicative()
        },}
    })
return ᛧord1Multiplicative
}


func ꞋboundedMultiplicative() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyMultiplicative_once Once
var ᛧapplyMultiplicative Any

func ꞋapplyMultiplicative() Any {
    ᛌapplyMultiplicative_once.Do(func() {
        ᛧapplyMultiplicative = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorMultiplicative()
        },}
    })
return ᛧapplyMultiplicative
}



var ᛌbindMultiplicative_once Once
var ᛧbindMultiplicative Any

func ꞋbindMultiplicative() Any {
    ᛌbindMultiplicative_once.Do(func() {
        ᛧbindMultiplicative = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyMultiplicative()
        },}
    })
return ᛧbindMultiplicative
}



var ᛌapplicativeMultiplicative_once Once
var ᛧapplicativeMultiplicative Any

func ꞋapplicativeMultiplicative() Any {
    ᛌapplicativeMultiplicative_once.Do(func() {
        ᛧapplicativeMultiplicative = Dict{"pure": ꞋMultiplicative(), "Apply0": func(_ Any) Any {
            return ꞋapplyMultiplicative()
        },}
    })
return ᛧapplicativeMultiplicative
}



var ᛌmonadMultiplicative_once Once
var ᛧmonadMultiplicative Any

func ꞋmonadMultiplicative() Any {
    ᛌmonadMultiplicative_once.Do(func() {
        ᛧmonadMultiplicative = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeMultiplicative()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindMultiplicative()
        },}
    })
return ᛧmonadMultiplicative
}





