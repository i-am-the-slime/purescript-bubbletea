// Code generated by psgo. DO NOT EDIT.

package Data_Ordering

import . "github.com/purescript-native/go-runtime"

import (
)

type _ = Any


var ᛌLT_once Once
var ᛧLT Any

func ꞋLT() Any {
    ᛌLT_once.Do(func() {
        ᛧLT = Dict{"LT": true,}
    })
return ᛧLT
}



var ᛌGT_once Once
var ᛧGT Any

func ꞋGT() Any {
    ᛌGT_once.Do(func() {
        ᛧGT = Dict{"GT": true,}
    })
return ᛧGT
}



var ᛌEQ_once Once
var ᛧEQ Any

func ꞋEQ() Any {
    ᛌEQ_once.Do(func() {
        ᛧEQ = Dict{"EQ": true,}
    })
return ᛧEQ
}



var ᛌshowOrdering_once Once
var ᛧshowOrdering Any

func ꞋshowOrdering() Any {
    ᛌshowOrdering_once.Do(func() {
        ᛧshowOrdering = Dict{"show": func(v Any) Any {
            if Is(v, "LT") {
                return "LT"
            }
            if Is(v, "GT") {
                return "GT"
            }
            if Is(v, "EQ") {
                return "EQ"
            }
            panic("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17)")
        },}
    })
return ᛧshowOrdering
}



var ᛌsemigroupOrdering_once Once
var ᛧsemigroupOrdering Any

func ꞋsemigroupOrdering() Any {
    ᛌsemigroupOrdering_once.Do(func() {
        ᛧsemigroupOrdering = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "LT") {
                    return ꞋLT()
                }
                if Is(v, "GT") {
                    return ꞋGT()
                }
                if Is(v, "EQ") {
                    return v1
                }
                panic("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18)")
            }
        },}
    })
return ᛧsemigroupOrdering
}


func Ꞌinvert() Any {
    return func(v Any) Any {
        if Is(v, "GT") {
            return ꞋLT()
        }
        if Is(v, "EQ") {
            return ꞋEQ()
        }
        if Is(v, "LT") {
            return ꞋGT()
        }
        panic("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31)")
    }
}

var ᛌeqOrdering_once Once
var ᛧeqOrdering Any

func ꞋeqOrdering() Any {
    ᛌeqOrdering_once.Do(func() {
        ᛧeqOrdering = Dict{"eq": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "LT") && Is(v1, "LT") {
                    return true
                }
                if Is(v, "GT") && Is(v1, "GT") {
                    return true
                }
                if Is(v, "EQ") && Is(v1, "EQ") {
                    return true
                }
                return false
            }
        },}
    })
return ᛧeqOrdering
}





