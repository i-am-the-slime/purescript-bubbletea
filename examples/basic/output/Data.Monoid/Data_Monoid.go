// Code generated by psgo. DO NOT EDIT.

package Data_Monoid

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.EuclideanRing"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
	"project.localhost/purescript-native/output/Data.Boolean"
)

type _ = Any

func ꞋsemigroupRecord() Any {
    return Apply(Data_Semigroup.ꞋsemigroupRecord(), Undefined)
}
func ꞋlessThanOrEq() Any {
    return Apply(Data_Ord.ꞋlessThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌeq() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Eq.ꞋeqInt())
}
func Ꞌmod() Any {
    return Apply(Data_EuclideanRing.Ꞌmod(), Data_EuclideanRing.ꞋeuclideanRingInt())
}
func Ꞌdiv() Any {
    return Apply(Data_EuclideanRing.Ꞌdiv(), Data_EuclideanRing.ꞋeuclideanRingInt())
}
func ꞋMonoidRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋMonoid_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌmonoidUnit_once Once
var ᛧmonoidUnit Any

func ꞋmonoidUnit() Any {
    ᛌmonoidUnit_once.Do(func() {
        ᛧmonoidUnit = Dict{"mempty": Data_Unit.Ꞌunit(), "Semigroup0": func(_ Any) Any {
            return Data_Semigroup.ꞋsemigroupUnit()
        },}
    })
return ᛧmonoidUnit
}



var ᛌmonoidString_once Once
var ᛧmonoidString Any

func ꞋmonoidString() Any {
    ᛌmonoidString_once.Do(func() {
        ᛧmonoidString = Dict{"mempty": "", "Semigroup0": func(_ Any) Any {
            return Data_Semigroup.ꞋsemigroupString()
        },}
    })
return ᛧmonoidString
}



var ᛌmonoidRecordNil_once Once
var ᛧmonoidRecordNil Any

func ꞋmonoidRecordNil() Any {
    ᛌmonoidRecordNil_once.Do(func() {
        ᛧmonoidRecordNil = Dict{"memptyRecord": func(v Any) Any {
            return Dict{}
        }, "SemigroupRecord0": func(_ Any) Any {
            return Data_Semigroup.ꞋsemigroupRecordNil()
        },}
    })
return ᛧmonoidRecordNil
}



var ᛌmonoidOrdering_once Once
var ᛧmonoidOrdering Any

func ꞋmonoidOrdering() Any {
    ᛌmonoidOrdering_once.Do(func() {
        ᛧmonoidOrdering = Dict{"mempty": Data_Ordering.ꞋEQ(), "Semigroup0": func(_ Any) Any {
            return Data_Ordering.ꞋsemigroupOrdering()
        },}
    })
return ᛧmonoidOrdering
}



var ᛌmonoidArray_once Once
var ᛧmonoidArray Any

func ꞋmonoidArray() Any {
    ᛌmonoidArray_once.Do(func() {
        ᛧmonoidArray = Dict{"mempty": []Any{}, "Semigroup0": func(_ Any) Any {
            return Data_Semigroup.ꞋsemigroupArray()
        },}
    })
return ᛧmonoidArray
}


func ꞋmemptyRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["memptyRecord"]
    }
}
func ꞋmonoidRecord() Any {
    return func(_ Any) Any {
        return func(dictMonoidRecord Any) Any {
            var semigroupRecord1 Any = Apply(ꞋsemigroupRecord(), Apply(dictMonoidRecord.(Dict)["SemigroupRecord0"], Undefined))
            return Dict{"mempty": Apply(ꞋmemptyRecord(), dictMonoidRecord, Type_Proxy.ꞋProxy()), "Semigroup0": func(_ Any) Any {
                    return semigroupRecord1
                },}
        }
    }
}
func Ꞌmempty() Any {
    return func(dict Any) Any {
        return dict.(Dict)["mempty"]
    }
}
func ꞋmonoidFn() Any {
    return func(dictMonoid Any) Any {
        var mempty1 Any = Apply(Ꞌmempty(), dictMonoid)
        var semigroupFn Any = Apply(Data_Semigroup.ꞋsemigroupFn(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"mempty": func(v Any) Any {
                return mempty1
            }, "Semigroup0": func(_ Any) Any {
                return semigroupFn
            },}
    }
}
func ꞋmonoidRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        var semigroupRecordCons Any = Apply(Data_Semigroup.ꞋsemigroupRecordCons(), dictIsSymbol, Undefined)
        return func(dictMonoid Any) Any {
            var mempty1 Any = Apply(Ꞌmempty(), dictMonoid)
            var Semigroup0 Any = Apply(dictMonoid.(Dict)["Semigroup0"], Undefined)
            return func(_ Any) Any {
                return func(dictMonoidRecord Any) Any {
                    var memptyRecord1 Any = Apply(ꞋmemptyRecord(), dictMonoidRecord)
                    var semigroupRecordCons1 Any = Apply(semigroupRecordCons, Apply(dictMonoidRecord.(Dict)["SemigroupRecord0"], Undefined), Semigroup0)
                    return Dict{"memptyRecord": func(v Any) Any {
                            var tail Any = Apply(memptyRecord1, Type_Proxy.ꞋProxy())
                            var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                            var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                            return Apply(insert, mempty1, tail)
                        }, "SemigroupRecord0": func(_ Any) Any {
                            return semigroupRecordCons1
                        },}
                }
            }
        }
    }
}
func Ꞌpower() Any {
    return func(dictMonoid Any) Any {
        var mempty1 Any = Apply(Ꞌmempty(), dictMonoid)
        var append Any = Apply(Data_Semigroup.Ꞌappend(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return func(x Any) Any {
            var ˉgo Any
            ˉgo = func(p Any) Any {
                if Apply(ꞋlessThanOrEq(), p, 0) == true {
                    return mempty1
                }
                if Apply(Ꞌeq(), p, 1) == true {
                    return x
                }
                if Apply(Ꞌeq(), Apply(Ꞌmod(), p, 2), 0) == true {
                    var xꞌ Any = Apply(ˉgo, Apply(Ꞌdiv(), p, 2))
                    return Apply(append, xꞌ, xꞌ)
                }
                if Data_Boolean.Ꞌotherwise() == true {
                    var xꞌ Any = Apply(ˉgo, Apply(Ꞌdiv(), p, 2))
                    return Apply(append, xꞌ, Apply(append, xꞌ, x))
                }
                panic("Failed pattern match at Data.Monoid (line 88, column 3 - line 88, column 17)")
            }
            return ˉgo
        }
    }
}
func Ꞌguard() Any {
    return func(dictMonoid Any) Any {
        var mempty1 Any = Apply(Ꞌmempty(), dictMonoid)
        return func(v Any) Any {
            return func(v1 Any) Any {
                if v == true {
                    return v1
                }
                if v == false {
                    return mempty1
                }
                panic("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49)")
            }
        }
    }
}



