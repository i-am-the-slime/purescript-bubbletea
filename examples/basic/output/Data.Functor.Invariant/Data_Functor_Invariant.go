// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Invariant

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Functor"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋInvariant_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌinvariantMultiplicative_once Once
var ᛧinvariantMultiplicative Any

func ꞋinvariantMultiplicative() Any {
    ᛌinvariantMultiplicative_once.Do(func() {
        ᛧinvariantMultiplicative = Dict{"imap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧinvariantMultiplicative
}



var ᛌinvariantEndo_once Once
var ᛧinvariantEndo Any

func ꞋinvariantEndo() Any {
    ᛌinvariantEndo_once.Do(func() {
        ᛧinvariantEndo = Dict{"imap": func(ab Any) Any {
            return func(ba Any) Any {
                return func(v Any) Any {
                    return Apply(Ꞌcompose(), ab, Apply(Ꞌcompose(), v, ba))
                }
            }
        },}
    })
return ᛧinvariantEndo
}



var ᛌinvariantDual_once Once
var ᛧinvariantDual Any

func ꞋinvariantDual() Any {
    ᛌinvariantDual_once.Do(func() {
        ᛧinvariantDual = Dict{"imap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧinvariantDual
}



var ᛌinvariantDisj_once Once
var ᛧinvariantDisj Any

func ꞋinvariantDisj() Any {
    ᛌinvariantDisj_once.Do(func() {
        ᛧinvariantDisj = Dict{"imap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧinvariantDisj
}



var ᛌinvariantConj_once Once
var ᛧinvariantConj Any

func ꞋinvariantConj() Any {
    ᛌinvariantConj_once.Do(func() {
        ᛧinvariantConj = Dict{"imap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧinvariantConj
}



var ᛌinvariantAdditive_once Once
var ᛧinvariantAdditive Any

func ꞋinvariantAdditive() Any {
    ᛌinvariantAdditive_once.Do(func() {
        ᛧinvariantAdditive = Dict{"imap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧinvariantAdditive
}


func ꞋimapF() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(f Any) Any {
            return func(v Any) Any {
                return Apply(ˉmap, f)
            }
        }
    }
}

var ᛌinvariantArray_once Once
var ᛧinvariantArray Any

func ꞋinvariantArray() Any {
    ᛌinvariantArray_once.Do(func() {
        ᛧinvariantArray = Dict{"imap": Apply(ꞋimapF(), Data_Functor.ꞋfunctorArray()),}
    })
return ᛧinvariantArray
}



var ᛌinvariantFn_once Once
var ᛧinvariantFn Any

func ꞋinvariantFn() Any {
    ᛌinvariantFn_once.Do(func() {
        ᛧinvariantFn = Dict{"imap": Apply(ꞋimapF(), Data_Functor.ꞋfunctorFn()),}
    })
return ᛧinvariantFn
}


func Ꞌimap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["imap"]
    }
}
func ꞋinvariantAlternate() Any {
    return func(dictInvariant Any) Any {
        var imap1 Any = Apply(Ꞌimap(), dictInvariant)
        return Dict{"imap": func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(imap1, f, g, v)
                    }
                }
            },}
    }
}



