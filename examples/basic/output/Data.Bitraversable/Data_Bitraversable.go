// Code generated by psgo. DO NOT EDIT.

package Data_Bitraversable

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Data.Bifoldable"
	"project.localhost/purescript-native/output/Data.Traversable"
	"project.localhost/purescript-native/output/Data.Functor.Joker"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Const"
	"project.localhost/purescript-native/output/Data.Functor.Clown"
	"project.localhost/purescript-native/output/Data.Functor.Flip"
	"project.localhost/purescript-native/output/Data.Functor.Product2"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋBitraversable_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌbitraverse() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bitraverse"]
    }
}
func Ꞌlfor() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            var bitraverse2 Any = Apply(bitraverse1, dictApplicative)
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(t Any) Any {
                return func(f Any) Any {
                    return Apply(bitraverse2, f, pure, t)
                }
            }
        }
    }
}
func Ꞌltraverse() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            var bitraverse2 Any = Apply(bitraverse1, dictApplicative)
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(f Any) Any {
                return Apply(bitraverse2, f, pure)
            }
        }
    }
}
func Ꞌrfor() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            var bitraverse2 Any = Apply(bitraverse1, dictApplicative)
            var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
            return func(t Any) Any {
                return func(f Any) Any {
                    return Apply(bitraverse2, pure, f, t)
                }
            }
        }
    }
}
func Ꞌrtraverse() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            return Apply(bitraverse1, dictApplicative, Apply(Control_Applicative.Ꞌpure(), dictApplicative))
        }
    }
}

var ᛌbitraversableTuple_once Once
var ᛧbitraversableTuple Any

func ꞋbitraversableTuple() Any {
    ᛌbitraversableTuple_once.Do(func() {
        ᛧbitraversableTuple = Dict{"bitraverse": func(dictApplicative Any) Any {
            var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
            var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(apply, Apply(ˉmap, Data_Tuple.ꞋTuple(), Apply(f, v.(Dict)["value0"])), Apply(g, v.(Dict)["value1"]))
                    }
                }
            }
        }, "bisequence": func(dictApplicative Any) Any {
            var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
            var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(apply, Apply(ˉmap, Data_Tuple.ꞋTuple(), v.(Dict)["value0"]), v.(Dict)["value1"])
            }
        }, "Bifunctor0": func(_ Any) Any {
            return Data_Bifunctor.ꞋbifunctorTuple()
        }, "Bifoldable1": func(_ Any) Any {
            return Data_Bifoldable.ꞋbifoldableTuple()
        },}
    })
return ᛧbitraversableTuple
}


func ꞋbitraversableJoker() Any {
    return func(dictTraversable Any) Any {
        var traverse Any = Apply(Data_Traversable.Ꞌtraverse(), dictTraversable)
        var sequence Any = Apply(Data_Traversable.Ꞌsequence(), dictTraversable)
        var bifunctorJoker Any = Apply(Data_Functor_Joker.ꞋbifunctorJoker(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var bifoldableJoker Any = Apply(Data_Bifoldable.ꞋbifoldableJoker(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return Dict{"bitraverse": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var traverse1 Any = Apply(traverse, dictApplicative)
                return func(v Any) Any {
                    return func(r Any) Any {
                        return func(v1 Any) Any {
                            return Apply(ˉmap, Data_Functor_Joker.ꞋJoker(), Apply(traverse1, r, v1))
                        }
                    }
                }
            }, "bisequence": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var sequence1 Any = Apply(sequence, dictApplicative)
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Functor_Joker.ꞋJoker(), Apply(sequence1, v))
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorJoker
            }, "Bifoldable1": func(_ Any) Any {
                return bifoldableJoker
            },}
    }
}

var ᛌbitraversableEither_once Once
var ᛧbitraversableEither Any

func ꞋbitraversableEither() Any {
    ᛌbitraversableEither_once.Do(func() {
        ᛧbitraversableEither = Dict{"bitraverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(v2 Any) Any {
                        if Is(v2, "Left") {
                            return Apply(ˉmap, Data_Either.ꞋLeft(), Apply(v, v2.(Dict)["value0"]))
                        }
                        if Is(v2, "Right") {
                            return Apply(ˉmap, Data_Either.ꞋRight(), Apply(v1, v2.(Dict)["value0"]))
                        }
                        panic("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37)")
                    }
                }
            }
        }, "bisequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                if Is(v, "Left") {
                    return Apply(ˉmap, Data_Either.ꞋLeft(), v.(Dict)["value0"])
                }
                if Is(v, "Right") {
                    return Apply(ˉmap, Data_Either.ꞋRight(), v.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37)")
            }
        }, "Bifunctor0": func(_ Any) Any {
            return Data_Bifunctor.ꞋbifunctorEither()
        }, "Bifoldable1": func(_ Any) Any {
            return Data_Bifoldable.ꞋbifoldableEither()
        },}
    })
return ᛧbitraversableEither
}



var ᛌbitraversableConst_once Once
var ᛧbitraversableConst Any

func ꞋbitraversableConst() Any {
    ᛌbitraversableConst_once.Do(func() {
        ᛧbitraversableConst = Dict{"bitraverse": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ˉmap, Data_Const.ꞋConst(), Apply(f, v1))
                    }
                }
            }
        }, "bisequence": func(dictApplicative Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return func(v Any) Any {
                return Apply(ˉmap, Data_Const.ꞋConst(), v)
            }
        }, "Bifunctor0": func(_ Any) Any {
            return Data_Bifunctor.ꞋbifunctorConst()
        }, "Bifoldable1": func(_ Any) Any {
            return Data_Bifoldable.ꞋbifoldableConst()
        },}
    })
return ᛧbitraversableConst
}


func ꞋbitraversableClown() Any {
    return func(dictTraversable Any) Any {
        var traverse Any = Apply(Data_Traversable.Ꞌtraverse(), dictTraversable)
        var sequence Any = Apply(Data_Traversable.Ꞌsequence(), dictTraversable)
        var bifunctorClown Any = Apply(Data_Functor_Clown.ꞋbifunctorClown(), Apply(dictTraversable.(Dict)["Functor0"], Undefined))
        var bifoldableClown Any = Apply(Data_Bifoldable.ꞋbifoldableClown(), Apply(dictTraversable.(Dict)["Foldable1"], Undefined))
        return Dict{"bitraverse": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var traverse1 Any = Apply(traverse, dictApplicative)
                return func(l Any) Any {
                    return func(v Any) Any {
                        return func(v1 Any) Any {
                            return Apply(ˉmap, Data_Functor_Clown.ꞋClown(), Apply(traverse1, l, v1))
                        }
                    }
                }
            }, "bisequence": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var sequence1 Any = Apply(sequence, dictApplicative)
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Functor_Clown.ꞋClown(), Apply(sequence1, v))
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorClown
            }, "Bifoldable1": func(_ Any) Any {
                return bifoldableClown
            },}
    }
}
func ꞋbisequenceDefault() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            return Apply(bitraverse1, dictApplicative, Ꞌidentity(), Ꞌidentity())
        }
    }
}
func Ꞌbisequence() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bisequence"]
    }
}
func ꞋbitraversableFlip() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        var bisequence1 Any = Apply(Ꞌbisequence(), dictBitraversable)
        var bifunctorFlip Any = Apply(Data_Functor_Flip.ꞋbifunctorFlip(), Apply(dictBitraversable.(Dict)["Bifunctor0"], Undefined))
        var bifoldableFlip Any = Apply(Data_Bifoldable.ꞋbifoldableFlip(), Apply(dictBitraversable.(Dict)["Bifoldable1"], Undefined))
        return Dict{"bitraverse": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var bitraverse2 Any = Apply(bitraverse1, dictApplicative)
                return func(r Any) Any {
                    return func(l Any) Any {
                        return func(v Any) Any {
                            return Apply(ˉmap, Data_Functor_Flip.ꞋFlip(), Apply(bitraverse2, l, r, v))
                        }
                    }
                }
            }, "bisequence": func(dictApplicative Any) Any {
                var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
                var bisequence2 Any = Apply(bisequence1, dictApplicative)
                return func(v Any) Any {
                    return Apply(ˉmap, Data_Functor_Flip.ꞋFlip(), Apply(bisequence2, v))
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorFlip
            }, "Bifoldable1": func(_ Any) Any {
                return bifoldableFlip
            },}
    }
}
func ꞋbitraversableProduct2() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        var bisequence1 Any = Apply(Ꞌbisequence(), dictBitraversable)
        var bifunctorProduct2 Any = Apply(Data_Functor_Product2.ꞋbifunctorProduct2(), Apply(dictBitraversable.(Dict)["Bifunctor0"], Undefined))
        var bifoldableProduct2 Any = Apply(Data_Bifoldable.ꞋbifoldableProduct2(), Apply(dictBitraversable.(Dict)["Bifoldable1"], Undefined))
        return func(dictBitraversable1 Any) Any {
            var bitraverse2 Any = Apply(Ꞌbitraverse(), dictBitraversable1)
            var bisequence2 Any = Apply(Ꞌbisequence(), dictBitraversable1)
            var bifunctorProduct21 Any = Apply(bifunctorProduct2, Apply(dictBitraversable1.(Dict)["Bifunctor0"], Undefined))
            var bifoldableProduct21 Any = Apply(bifoldableProduct2, Apply(dictBitraversable1.(Dict)["Bifoldable1"], Undefined))
            return Dict{"bitraverse": func(dictApplicative Any) Any {
                    var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
                    var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
                    var bitraverse3 Any = Apply(bitraverse1, dictApplicative)
                    var bitraverse4 Any = Apply(bitraverse2, dictApplicative)
                    return func(l Any) Any {
                        return func(r Any) Any {
                            return func(v Any) Any {
                                return Apply(apply, Apply(ˉmap, Data_Functor_Product2.ꞋProduct2(), Apply(bitraverse3, l, r, v.(Dict)["value0"])), Apply(bitraverse4, l, r, v.(Dict)["value1"]))
                            }
                        }
                    }
                }, "bisequence": func(dictApplicative Any) Any {
                    var Apply0 Any = Apply(dictApplicative.(Dict)["Apply0"], Undefined)
                    var apply Any = Apply(Control_Apply.Ꞌapply(), Apply0)
                    var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(Apply0.(Dict)["Functor0"], Undefined))
                    var bisequence3 Any = Apply(bisequence1, dictApplicative)
                    var bisequence4 Any = Apply(bisequence2, dictApplicative)
                    return func(v Any) Any {
                        return Apply(apply, Apply(ˉmap, Data_Functor_Product2.ꞋProduct2(), Apply(bisequence3, v.(Dict)["value0"])), Apply(bisequence4, v.(Dict)["value1"]))
                    }
                }, "Bifunctor0": func(_ Any) Any {
                    return bifunctorProduct21
                }, "Bifoldable1": func(_ Any) Any {
                    return bifoldableProduct21
                },}
        }
    }
}
func ꞋbitraverseDefault() Any {
    return func(dictBitraversable Any) Any {
        var bisequence1 Any = Apply(Ꞌbisequence(), dictBitraversable)
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), Apply(dictBitraversable.(Dict)["Bifunctor0"], Undefined))
        return func(dictApplicative Any) Any {
            var bisequence2 Any = Apply(bisequence1, dictApplicative)
            return func(f Any) Any {
                return func(g Any) Any {
                    return func(t Any) Any {
                        return Apply(bisequence2, Apply(bimap, f, g, t))
                    }
                }
            }
        }
    }
}
func Ꞌbifor() Any {
    return func(dictBitraversable Any) Any {
        var bitraverse1 Any = Apply(Ꞌbitraverse(), dictBitraversable)
        return func(dictApplicative Any) Any {
            var bitraverse2 Any = Apply(bitraverse1, dictApplicative)
            return func(t Any) Any {
                return func(f Any) Any {
                    return func(g Any) Any {
                        return Apply(bitraverse2, f, g, t)
                    }
                }
            }
        }
    }
}



