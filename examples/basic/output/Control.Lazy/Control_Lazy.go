// Code generated by psgo. DO NOT EDIT.

package Control_Lazy

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Unit"
)

type _ = Any

func ꞋLazy_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌlazyUnit_once Once
var ᛧlazyUnit Any

func ꞋlazyUnit() Any {
    ᛌlazyUnit_once.Do(func() {
        ᛧlazyUnit = Dict{"defer": func(v Any) Any {
            return Data_Unit.Ꞌunit()
        },}
    })
return ᛧlazyUnit
}



var ᛌlazyFn_once Once
var ᛧlazyFn Any

func ꞋlazyFn() Any {
    ᛌlazyFn_once.Do(func() {
        ᛧlazyFn = Dict{"defer": func(f Any) Any {
            return func(x Any) Any {
                return Apply(f, Data_Unit.Ꞌunit(), x)
            }
        },}
    })
return ᛧlazyFn
}


func Ꞌdefer() Any {
    return func(dict Any) Any {
        return dict.(Dict)["defer"]
    }
}
func Ꞌfix() Any {
    return func(dictLazy Any) Any {
        var defer1 Any = Apply(Ꞌdefer(), dictLazy)
        return func(f Any) Any {
            var ˉgo Any
            ˉgo = Apply(defer1, func(v Any) Any {
                return Apply(f, ˉgo)
            })
            return ˉgo
        }
    }
}



