// Code generated by psgo. DO NOT EDIT.

package Data_Decide

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Divide"
	"project.localhost/purescript-native/output/Data.Ordering"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋDecide_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌchoosePredicate_once Once
var ᛧchoosePredicate Any

func ꞋchoosePredicate() Any {
    ᛌchoosePredicate_once.Do(func() {
        ᛧchoosePredicate = Dict{"choose": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(Ꞌcompose(), Apply(Data_Either.Ꞌeither(), v, v1), f)
                }
            }
        }, "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdividePredicate()
        },}
    })
return ᛧchoosePredicate
}


func ꞋchooseOp() Any {
    return func(dictSemigroup Any) Any {
        var divideOp Any = Apply(Data_Divide.ꞋdivideOp(), dictSemigroup)
        return Dict{"choose": func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Ꞌcompose(), Apply(Data_Either.Ꞌeither(), v, v1), f)
                    }
                }
            }, "Divide0": func(_ Any) Any {
                return divideOp
            },}
    }
}

var ᛌchooseEquivalence_once Once
var ᛧchooseEquivalence Any

func ꞋchooseEquivalence() Any {
    ᛌchooseEquivalence_once.Do(func() {
        ᛧchooseEquivalence = Dict{"choose": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return func(b Any) Any {
                            var v2 Any = Apply(f, a)
                            if Is(v2, "Left") {
                                var v3 Any = Apply(f, b)
                                if Is(v3, "Left") {
                                    return Apply(v, v2.(Dict)["value0"], v3.(Dict)["value0"])
                                }
                                if Is(v3, "Right") {
                                    return false
                                }
                                panic("Failed pattern match at Data.Decide (line 27, column 15 - line 29, column 23)")
                            }
                            if Is(v2, "Right") {
                                var v3 Any = Apply(f, b)
                                if Is(v3, "Left") {
                                    return false
                                }
                                if Is(v3, "Right") {
                                    return Apply(v1, v2.(Dict)["value0"], v3.(Dict)["value0"])
                                }
                                panic("Failed pattern match at Data.Decide (line 30, column 16 - line 32, column 23)")
                            }
                            panic("Failed pattern match at Data.Decide (line 26, column 66 - line 32, column 23)")
                        }
                    }
                }
            }
        }, "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdivideEquivalence()
        },}
    })
return ᛧchooseEquivalence
}



var ᛌchooseComparison_once Once
var ᛧchooseComparison Any

func ꞋchooseComparison() Any {
    ᛌchooseComparison_once.Do(func() {
        ᛧchooseComparison = Dict{"choose": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return func(a Any) Any {
                        return func(b Any) Any {
                            var v2 Any = Apply(f, a)
                            if Is(v2, "Left") {
                                var v3 Any = Apply(f, b)
                                if Is(v3, "Left") {
                                    return Apply(v, v2.(Dict)["value0"], v3.(Dict)["value0"])
                                }
                                if Is(v3, "Right") {
                                    return Data_Ordering.ꞋLT()
                                }
                                panic("Failed pattern match at Data.Decide (line 18, column 15 - line 20, column 20)")
                            }
                            if Is(v2, "Right") {
                                var v3 Any = Apply(f, b)
                                if Is(v3, "Left") {
                                    return Data_Ordering.ꞋGT()
                                }
                                if Is(v3, "Right") {
                                    return Apply(v1, v2.(Dict)["value0"], v3.(Dict)["value0"])
                                }
                                panic("Failed pattern match at Data.Decide (line 21, column 16 - line 23, column 23)")
                            }
                            panic("Failed pattern match at Data.Decide (line 17, column 63 - line 23, column 23)")
                        }
                    }
                }
            }
        }, "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdivideComparison()
        },}
    })
return ᛧchooseComparison
}


func Ꞌchoose() Any {
    return func(dict Any) Any {
        return dict.(Dict)["choose"]
    }
}
func Ꞌchosen() Any {
    return func(dictDecide Any) Any {
        return Apply(Ꞌchoose(), dictDecide, Ꞌidentity())
    }
}



