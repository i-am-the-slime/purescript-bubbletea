// Code generated by psgo. DO NOT EDIT.

package Data_Semiring_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.Semiring"
)

type _ = Any

func ꞋGenericSemiring_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋgenericZeroꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericZero'"]
    }
}
func ꞋgenericZero() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericSemiring Any) Any {
            return Apply(to, Apply(ꞋgenericZeroꞌ(), dictGenericSemiring))
        }
    }
}

var ᛌgenericSemiringNoArguments_once Once
var ᛧgenericSemiringNoArguments Any

func ꞋgenericSemiringNoArguments() Any {
    ᛌgenericSemiringNoArguments_once.Do(func() {
        ᛧgenericSemiringNoArguments = Dict{"genericAdd'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        }, "genericZero'": Data_Generic_Rep.ꞋNoArguments(), "genericMul'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        }, "genericOne'": Data_Generic_Rep.ꞋNoArguments(),}
    })
return ᛧgenericSemiringNoArguments
}


func ꞋgenericSemiringArgument() Any {
    return func(dictSemiring Any) Any {
        var add Any = Apply(Data_Semiring.Ꞌadd(), dictSemiring)
        var mul Any = Apply(Data_Semiring.Ꞌmul(), dictSemiring)
        return Dict{"genericAdd'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(add, v, v1)
                }
            }, "genericZero'": Apply(Data_Semiring.Ꞌzero(), dictSemiring), "genericMul'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(mul, v, v1)
                }
            }, "genericOne'": Apply(Data_Semiring.Ꞌone(), dictSemiring),}
    }
}
func ꞋgenericOneꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericOne'"]
    }
}
func ꞋgenericOne() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericSemiring Any) Any {
            return Apply(to, Apply(ꞋgenericOneꞌ(), dictGenericSemiring))
        }
    }
}
func ꞋgenericMulꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericMul'"]
    }
}
func ꞋgenericMul() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericSemiring Any) Any {
            var genericMulꞌ1 Any = Apply(ꞋgenericMulꞌ(), dictGenericSemiring)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericMulꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}
func ꞋgenericAddꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericAdd'"]
    }
}
func ꞋgenericSemiringConstructor() Any {
    return func(dictGenericSemiring Any) Any {
        var genericAddꞌ1 Any = Apply(ꞋgenericAddꞌ(), dictGenericSemiring)
        var genericMulꞌ1 Any = Apply(ꞋgenericMulꞌ(), dictGenericSemiring)
        return Dict{"genericAdd'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericAddꞌ1, v, v1)
                }
            }, "genericZero'": Apply(ꞋgenericZeroꞌ(), dictGenericSemiring), "genericMul'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericMulꞌ1, v, v1)
                }
            }, "genericOne'": Apply(ꞋgenericOneꞌ(), dictGenericSemiring),}
    }
}
func ꞋgenericSemiringProduct() Any {
    return func(dictGenericSemiring Any) Any {
        var genericAddꞌ1 Any = Apply(ꞋgenericAddꞌ(), dictGenericSemiring)
        var genericZeroꞌ1 Any = Apply(ꞋgenericZeroꞌ(), dictGenericSemiring)
        var genericMulꞌ1 Any = Apply(ꞋgenericMulꞌ(), dictGenericSemiring)
        var genericOneꞌ1 Any = Apply(ꞋgenericOneꞌ(), dictGenericSemiring)
        return func(dictGenericSemiring1 Any) Any {
            var genericAddꞌ2 Any = Apply(ꞋgenericAddꞌ(), dictGenericSemiring1)
            var genericMulꞌ2 Any = Apply(ꞋgenericMulꞌ(), dictGenericSemiring1)
            return Dict{"genericAdd'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericAddꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericAddꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "genericZero'": Apply(Data_Generic_Rep.ꞋProduct(), genericZeroꞌ1, Apply(ꞋgenericZeroꞌ(), dictGenericSemiring1)), "genericMul'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericMulꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericMulꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "genericOne'": Apply(Data_Generic_Rep.ꞋProduct(), genericOneꞌ1, Apply(ꞋgenericOneꞌ(), dictGenericSemiring1)),}
        }
    }
}
func ꞋgenericAdd() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericSemiring Any) Any {
            var genericAddꞌ1 Any = Apply(ꞋgenericAddꞌ(), dictGenericSemiring)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericAddꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}



