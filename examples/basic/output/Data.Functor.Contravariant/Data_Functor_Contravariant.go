// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Contravariant

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Void"
)

type _ = Any

func ꞋContravariant_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌcontravariantConst_once Once
var ᛧcontravariantConst Any

func ꞋcontravariantConst() Any {
    ᛌcontravariantConst_once.Do(func() {
        ᛧcontravariantConst = Dict{"cmap": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        },}
    })
return ᛧcontravariantConst
}


func Ꞌcmap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["cmap"]
    }
}
func ꞋcmapFlipped() Any {
    return func(dictContravariant Any) Any {
        var cmap1 Any = Apply(Ꞌcmap(), dictContravariant)
        return func(x Any) Any {
            return func(f Any) Any {
                return Apply(cmap1, f, x)
            }
        }
    }
}
func Ꞌcoerce() Any {
    return func(dictContravariant Any) Any {
        var cmap1 Any = Apply(Ꞌcmap(), dictContravariant)
        return func(dictFunctor Any) Any {
            var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
            return func(a Any) Any {
                return Apply(ˉmap, Data_Void.Ꞌabsurd(), Apply(cmap1, Data_Void.Ꞌabsurd(), a))
            }
        }
    }
}
func ꞋimapC() Any {
    return func(dictContravariant Any) Any {
        var cmap1 Any = Apply(Ꞌcmap(), dictContravariant)
        return func(v Any) Any {
            return func(f Any) Any {
                return Apply(cmap1, f)
            }
        }
    }
}



