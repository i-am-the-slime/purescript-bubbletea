// Code generated by psgo. DO NOT EDIT.

package Control_Apply

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋApply_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌapplyProxy_once Once
var ᛧapplyProxy Any

func ꞋapplyProxy() Any {
    ᛌapplyProxy_once.Do(func() {
        ᛧapplyProxy = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorProxy()
        },}
    })
return ᛧapplyProxy
}



var ᛌapplyFn_once Once
var ᛧapplyFn Any

func ꞋapplyFn() Any {
    ᛌapplyFn_once.Do(func() {
        ᛧapplyFn = Dict{"apply": func(f Any) Any {
            return func(g Any) Any {
                return func(x Any) Any {
                    return Apply(f, x, Apply(g, x))
                }
            }
        }, "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorFn()
        },}
    })
return ᛧapplyFn
}



var ᛌapplyArray_once Once
var ᛧapplyArray Any

func ꞋapplyArray() Any {
    ᛌapplyArray_once.Do(func() {
        ᛧapplyArray = Dict{"apply": ꞋarrayApply(), "Functor0": func(_ Any) Any {
            return Data_Functor.ꞋfunctorArray()
        },}
    })
return ᛧapplyArray
}


func Ꞌapply() Any {
    return func(dict Any) Any {
        return dict.(Dict)["apply"]
    }
}
func ꞋapplyFirst() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(apply1, Apply(ˉmap, Data_Function.Ꞌconst(), a), b)
            }
        }
    }
}
func ꞋapplySecond() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(apply1, Apply(ˉmap, Apply(Data_Function.Ꞌconst(), Ꞌidentity()), a), b)
            }
        }
    }
}
func Ꞌlift2() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return Apply(apply1, Apply(ˉmap, f, a), b)
                }
            }
        }
    }
}
func Ꞌlift3() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return func(c Any) Any {
                        return Apply(apply1, Apply(apply1, Apply(ˉmap, f, a), b), c)
                    }
                }
            }
        }
    }
}
func Ꞌlift4() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return func(c Any) Any {
                        return func(d Any) Any {
                            return Apply(apply1, Apply(apply1, Apply(apply1, Apply(ˉmap, f, a), b), c), d)
                        }
                    }
                }
            }
        }
    }
}
func Ꞌlift5() Any {
    return func(dictApply Any) Any {
        var apply1 Any = Apply(Ꞌapply(), dictApply)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return func(f Any) Any {
            return func(a Any) Any {
                return func(b Any) Any {
                    return func(c Any) Any {
                        return func(d Any) Any {
                            return func(e Any) Any {
                                return Apply(apply1, Apply(apply1, Apply(apply1, Apply(apply1, Apply(ˉmap, f, a), b), c), d), e)
                            }
                        }
                    }
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Control.Apply")

var ᛌarrayApply_once Once
var ᛧarrayApply Any

func ꞋarrayApply() Any { 
    ᛌarrayApply_once.Do(func() {
        ᛧarrayApply = Get(foreign, "arrayApply")
    })
    return ᛧarrayApply
}


