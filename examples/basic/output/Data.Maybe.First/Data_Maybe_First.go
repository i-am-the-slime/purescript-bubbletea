// Code generated by psgo. DO NOT EDIT.

package Data_Maybe_First

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Monoid"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋFirst() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowFirst() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), Apply(Data_Maybe.ꞋshowMaybe(), dictShow))
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "First (", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌsemigroupFirst_once Once
var ᛧsemigroupFirst Any

func ꞋsemigroupFirst() Any {
    ᛌsemigroupFirst_once.Do(func() {
        ᛧsemigroupFirst = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "Just") {
                    return v
                }
                return v1
            }
        },}
    })
return ᛧsemigroupFirst
}


func ꞋordFirst() Any {
    return func(dictOrd Any) Any {
        return Apply(Data_Maybe.ꞋordMaybe(), dictOrd)
    }
}
func Ꞌord1First() Any {
    return Data_Maybe.Ꞌord1Maybe()
}

var ᛌnewtypeFirst_once Once
var ᛧnewtypeFirst Any

func ꞋnewtypeFirst() Any {
    ᛌnewtypeFirst_once.Do(func() {
        ᛧnewtypeFirst = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeFirst
}



var ᛌmonoidFirst_once Once
var ᛧmonoidFirst Any

func ꞋmonoidFirst() Any {
    ᛌmonoidFirst_once.Do(func() {
        ᛧmonoidFirst = Dict{"mempty": Data_Maybe.ꞋNothing(), "Semigroup0": func(_ Any) Any {
            return ꞋsemigroupFirst()
        },}
    })
return ᛧmonoidFirst
}


func ꞋmonadFirst() Any {
    return Data_Maybe.ꞋmonadMaybe()
}
func ꞋinvariantFirst() Any {
    return Data_Maybe.ꞋinvariantMaybe()
}
func ꞋfunctorFirst() Any {
    return Data_Maybe.ꞋfunctorMaybe()
}
func ꞋextendFirst() Any {
    return Data_Maybe.ꞋextendMaybe()
}
func ꞋeqFirst() Any {
    return func(dictEq Any) Any {
        return Apply(Data_Maybe.ꞋeqMaybe(), dictEq)
    }
}
func Ꞌeq1First() Any {
    return Data_Maybe.Ꞌeq1Maybe()
}
func ꞋboundedFirst() Any {
    return func(dictBounded Any) Any {
        return Apply(Data_Maybe.ꞋboundedMaybe(), dictBounded)
    }
}
func ꞋbindFirst() Any {
    return Data_Maybe.ꞋbindMaybe()
}
func ꞋapplyFirst() Any {
    return Data_Maybe.ꞋapplyMaybe()
}
func ꞋapplicativeFirst() Any {
    return Data_Maybe.ꞋapplicativeMaybe()
}

var ᛌaltFirst_once Once
var ᛧaltFirst Any

func ꞋaltFirst() Any {
    ᛌaltFirst_once.Do(func() {
        ᛧaltFirst = Dict{"alt": Apply(Data_Semigroup.Ꞌappend(), ꞋsemigroupFirst()), "Functor0": func(_ Any) Any {
            return ꞋfunctorFirst()
        },}
    })
return ᛧaltFirst
}



var ᛌplusFirst_once Once
var ᛧplusFirst Any

func ꞋplusFirst() Any {
    ᛌplusFirst_once.Do(func() {
        ᛧplusFirst = Dict{"empty": Apply(Data_Monoid.Ꞌmempty(), ꞋmonoidFirst()), "Alt0": func(_ Any) Any {
            return ꞋaltFirst()
        },}
    })
return ᛧplusFirst
}



var ᛌalternativeFirst_once Once
var ᛧalternativeFirst Any

func ꞋalternativeFirst() Any {
    ᛌalternativeFirst_once.Do(func() {
        ᛧalternativeFirst = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeFirst()
        }, "Plus1": func(_ Any) Any {
            return ꞋplusFirst()
        },}
    })
return ᛧalternativeFirst
}





