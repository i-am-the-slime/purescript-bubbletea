// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Compose

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Functor.App"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Control.Plus"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋCompose() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowCompose() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Compose ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌnewtypeCompose_once Once
var ᛧnewtypeCompose Any

func ꞋnewtypeCompose() Any {
    ᛌnewtypeCompose_once.Do(func() {
        ᛧnewtypeCompose = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeCompose
}


func ꞋfunctorCompose() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(dictFunctor1 Any) Any {
            var map1 Any = Apply(Data_Functor.Ꞌmap(), dictFunctor1)
            return Dict{"map": func(f Any) Any {
                    return func(v Any) Any {
                        return Apply(ˉmap, Apply(map1, f), v)
                    }
                },}
        }
    }
}
func ꞋeqCompose() Any {
    return func(dictEq1 Any) Any {
        var eq1 Any = Apply(Data_Eq.Ꞌeq1(), dictEq1)
        return func(dictEq11 Any) Any {
            var eqApp Any = Apply(Data_Functor_App.ꞋeqApp(), dictEq11)
            return func(dictEq Any) Any {
                var eq11 Any = Apply(eq1, Apply(eqApp, dictEq))
                return Dict{"eq": func(v Any) Any {
                        return func(v1 Any) Any {
                            return Apply(eq11, Apply(Data_Functor_App.ꞋhoistLiftApp(), v), Apply(Data_Functor_App.ꞋhoistLiftApp(), v1))
                        }
                    },}
            }
        }
    }
}
func ꞋordCompose() Any {
    return func(dictOrd1 Any) Any {
        var compare1 Any = Apply(Data_Ord.Ꞌcompare1(), dictOrd1)
        var eqCompose1 Any = Apply(ꞋeqCompose(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var ordApp Any = Apply(Data_Functor_App.ꞋordApp(), dictOrd11)
            var eqCompose2 Any = Apply(eqCompose1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return func(dictOrd Any) Any {
                var compare11 Any = Apply(compare1, Apply(ordApp, dictOrd))
                var eqCompose3 Any = Apply(eqCompose2, Apply(dictOrd.(Dict)["Eq0"], Undefined))
                return Dict{"compare": func(v Any) Any {
                        return func(v1 Any) Any {
                            return Apply(compare11, Apply(Data_Functor_App.ꞋhoistLiftApp(), v), Apply(Data_Functor_App.ꞋhoistLiftApp(), v1))
                        }
                    }, "Eq0": func(_ Any) Any {
                        return eqCompose3
                    },}
            }
        }
    }
}
func Ꞌeq1Compose() Any {
    return func(dictEq1 Any) Any {
        var eqCompose1 Any = Apply(ꞋeqCompose(), dictEq1)
        return func(dictEq11 Any) Any {
            var eqCompose2 Any = Apply(eqCompose1, dictEq11)
            return Dict{"eq1": func(dictEq Any) Any {
                    return Apply(Data_Eq.Ꞌeq(), Apply(eqCompose2, dictEq))
                },}
        }
    }
}
func Ꞌord1Compose() Any {
    return func(dictOrd1 Any) Any {
        var ordCompose1 Any = Apply(ꞋordCompose(), dictOrd1)
        var eq1Compose1 Any = Apply(Ꞌeq1Compose(), Apply(dictOrd1.(Dict)["Eq10"], Undefined))
        return func(dictOrd11 Any) Any {
            var ordCompose2 Any = Apply(ordCompose1, dictOrd11)
            var eq1Compose2 Any = Apply(eq1Compose1, Apply(dictOrd11.(Dict)["Eq10"], Undefined))
            return Dict{"compare1": func(dictOrd Any) Any {
                    return Apply(Data_Ord.Ꞌcompare(), Apply(ordCompose2, dictOrd))
                }, "Eq10": func(_ Any) Any {
                    return eq1Compose2
                },}
        }
    }
}
func ꞋbihoistCompose() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return func(natF Any) Any {
            return func(natG Any) Any {
                return func(v Any) Any {
                    return Apply(natF, Apply(ˉmap, natG, v))
                }
            }
        }
    }
}
func ꞋapplyCompose() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var Functor0 Any = Apply(dictApply.(Dict)["Functor0"], Undefined)
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), Functor0)
        var functorCompose1 Any = Apply(ꞋfunctorCompose(), Functor0)
        return func(dictApply1 Any) Any {
            var apply1 Any = Apply(Control_Apply.Ꞌapply(), dictApply1)
            var functorCompose2 Any = Apply(functorCompose1, Apply(dictApply1.(Dict)["Functor0"], Undefined))
            return Dict{"apply": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(apply, Apply(ˉmap, apply1, v), v1)
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorCompose2
                },}
        }
    }
}
func ꞋapplicativeCompose() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var applyCompose1 Any = Apply(ꞋapplyCompose(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return func(dictApplicative1 Any) Any {
            var applyCompose2 Any = Apply(applyCompose1, Apply(dictApplicative1.(Dict)["Apply0"], Undefined))
            return Dict{"pure": Apply(Ꞌcompose(), ꞋCompose(), Apply(Ꞌcompose(), pure, Apply(Control_Applicative.Ꞌpure(), dictApplicative1))), "Apply0": func(_ Any) Any {
                    return applyCompose2
                },}
        }
    }
}
func ꞋaltCompose() Any {
    return func(dictAlt Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), dictAlt)
        var functorCompose1 Any = Apply(ꞋfunctorCompose(), Apply(dictAlt.(Dict)["Functor0"], Undefined))
        return func(dictFunctor Any) Any {
            var functorCompose2 Any = Apply(functorCompose1, dictFunctor)
            return Dict{"alt": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(alt, v, v1)
                    }
                }, "Functor0": func(_ Any) Any {
                    return functorCompose2
                },}
        }
    }
}
func ꞋplusCompose() Any {
    return func(dictPlus Any) Any {
        var empty Any = Apply(Control_Plus.Ꞌempty(), dictPlus)
        var altCompose1 Any = Apply(ꞋaltCompose(), Apply(dictPlus.(Dict)["Alt0"], Undefined))
        return func(dictFunctor Any) Any {
            var altCompose2 Any = Apply(altCompose1, dictFunctor)
            return Dict{"empty": empty, "Alt0": func(_ Any) Any {
                    return altCompose2
                },}
        }
    }
}
func ꞋalternativeCompose() Any {
    return func(dictAlternative Any) Any {
        var applicativeCompose1 Any = Apply(ꞋapplicativeCompose(), Apply(dictAlternative.(Dict)["Applicative0"], Undefined))
        var plusCompose1 Any = Apply(ꞋplusCompose(), Apply(dictAlternative.(Dict)["Plus1"], Undefined))
        return func(dictApplicative Any) Any {
            var applicativeCompose2 Any = Apply(applicativeCompose1, dictApplicative)
            var plusCompose2 Any = Apply(plusCompose1, Apply(Apply(dictApplicative.(Dict)["Apply0"], Undefined).(Dict)["Functor0"], Undefined))
            return Dict{"Applicative0": func(_ Any) Any {
                    return applicativeCompose2
                }, "Plus1": func(_ Any) Any {
                    return plusCompose2
                },}
        }
    }
}



