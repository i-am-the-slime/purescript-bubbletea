// Code generated by psgo. DO NOT EDIT.

package Data_Show

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Void"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋShowRecordFields_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋShow_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌshowVoid_once Once
var ᛧshowVoid Any

func ꞋshowVoid() Any {
    ᛌshowVoid_once.Do(func() {
        ᛧshowVoid = Dict{"show": Data_Void.Ꞌabsurd(),}
    })
return ᛧshowVoid
}



var ᛌshowUnit_once Once
var ᛧshowUnit Any

func ꞋshowUnit() Any {
    ᛌshowUnit_once.Do(func() {
        ᛧshowUnit = Dict{"show": func(v Any) Any {
            return "unit"
        },}
    })
return ᛧshowUnit
}



var ᛌshowString_once Once
var ᛧshowString Any

func ꞋshowString() Any {
    ᛌshowString_once.Do(func() {
        ᛧshowString = Dict{"show": ꞋshowStringImpl(),}
    })
return ᛧshowString
}



var ᛌshowRecordFieldsNil_once Once
var ᛧshowRecordFieldsNil Any

func ꞋshowRecordFieldsNil() Any {
    ᛌshowRecordFieldsNil_once.Do(func() {
        ᛧshowRecordFieldsNil = Dict{"showRecordFields": func(v Any) Any {
            return func(v1 Any) Any {
                return ""
            }
        },}
    })
return ᛧshowRecordFieldsNil
}


func ꞋshowRecordFields() Any {
    return func(dict Any) Any {
        return dict.(Dict)["showRecordFields"]
    }
}
func ꞋshowRecord() Any {
    return func(_ Any) Any {
        return func(_ Any) Any {
            return func(dictShowRecordFields Any) Any {
                var showRecordFields1 Any = Apply(ꞋshowRecordFields(), dictShowRecordFields)
                return Dict{"show": func(record Any) Any {
                        return Apply(Ꞌappend(), "{", Apply(Ꞌappend(), Apply(showRecordFields1, Type_Proxy.ꞋProxy(), record), "}"))
                    },}
            }
        }
    }
}

var ᛌshowProxy_once Once
var ᛧshowProxy Any

func ꞋshowProxy() Any {
    ᛌshowProxy_once.Do(func() {
        ᛧshowProxy = Dict{"show": func(v Any) Any {
            return "Proxy"
        },}
    })
return ᛧshowProxy
}



var ᛌshowNumber_once Once
var ᛧshowNumber Any

func ꞋshowNumber() Any {
    ᛌshowNumber_once.Do(func() {
        ᛧshowNumber = Dict{"show": ꞋshowNumberImpl(),}
    })
return ᛧshowNumber
}



var ᛌshowInt_once Once
var ᛧshowInt Any

func ꞋshowInt() Any {
    ᛌshowInt_once.Do(func() {
        ᛧshowInt = Dict{"show": ꞋshowIntImpl(),}
    })
return ᛧshowInt
}



var ᛌshowChar_once Once
var ᛧshowChar Any

func ꞋshowChar() Any {
    ᛌshowChar_once.Do(func() {
        ᛧshowChar = Dict{"show": ꞋshowCharImpl(),}
    })
return ᛧshowChar
}



var ᛌshowBoolean_once Once
var ᛧshowBoolean Any

func ꞋshowBoolean() Any {
    ᛌshowBoolean_once.Do(func() {
        ᛧshowBoolean = Dict{"show": func(v Any) Any {
            if v == true {
                return "true"
            }
            if v == false {
                return "false"
            }
            panic("Failed pattern match at Data.Show (line 29, column 1 - line 31, column 23)")
        },}
    })
return ᛧshowBoolean
}


func Ꞌshow() Any {
    return func(dict Any) Any {
        return dict.(Dict)["show"]
    }
}
func ꞋshowArray() Any {
    return func(dictShow Any) Any {
        return Dict{"show": Apply(ꞋshowArrayImpl(), Apply(Ꞌshow(), dictShow)),}
    }
}
func ꞋshowRecordFieldsCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(dictShowRecordFields Any) Any {
            var showRecordFields1 Any = Apply(ꞋshowRecordFields(), dictShowRecordFields)
            return func(dictShow Any) Any {
                var show1 Any = Apply(Ꞌshow(), dictShow)
                return Dict{"showRecordFields": func(v Any) Any {
                        return func(record Any) Any {
                            var tail Any = Apply(showRecordFields1, Type_Proxy.ꞋProxy(), record)
                            var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                            var focus Any = Apply(Record_Unsafe.ꞋunsafeGet(), key, record)
                            return Apply(Ꞌappend(), " ", Apply(Ꞌappend(), key, Apply(Ꞌappend(), ": ", Apply(Ꞌappend(), Apply(show1, focus), Apply(Ꞌappend(), ",", tail)))))
                        }
                    },}
            }
        }
    }
}
func ꞋshowRecordFieldsConsNil() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(dictShow Any) Any {
            var show1 Any = Apply(Ꞌshow(), dictShow)
            return Dict{"showRecordFields": func(v Any) Any {
                    return func(record Any) Any {
                        var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                        var focus Any = Apply(Record_Unsafe.ꞋunsafeGet(), key, record)
                        return Apply(Ꞌappend(), " ", Apply(Ꞌappend(), key, Apply(Ꞌappend(), ": ", Apply(Ꞌappend(), Apply(show1, focus), " "))))
                    }
                },}
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Show")

var ᛌshowIntImpl_once Once
var ᛧshowIntImpl Any

func ꞋshowIntImpl() Any { 
    ᛌshowIntImpl_once.Do(func() {
        ᛧshowIntImpl = Get(foreign, "showIntImpl")
    })
    return ᛧshowIntImpl
}

var ᛌshowNumberImpl_once Once
var ᛧshowNumberImpl Any

func ꞋshowNumberImpl() Any { 
    ᛌshowNumberImpl_once.Do(func() {
        ᛧshowNumberImpl = Get(foreign, "showNumberImpl")
    })
    return ᛧshowNumberImpl
}

var ᛌshowCharImpl_once Once
var ᛧshowCharImpl Any

func ꞋshowCharImpl() Any { 
    ᛌshowCharImpl_once.Do(func() {
        ᛧshowCharImpl = Get(foreign, "showCharImpl")
    })
    return ᛧshowCharImpl
}

var ᛌshowStringImpl_once Once
var ᛧshowStringImpl Any

func ꞋshowStringImpl() Any { 
    ᛌshowStringImpl_once.Do(func() {
        ᛧshowStringImpl = Get(foreign, "showStringImpl")
    })
    return ᛧshowStringImpl
}

var ᛌshowArrayImpl_once Once
var ᛧshowArrayImpl Any

func ꞋshowArrayImpl() Any { 
    ᛌshowArrayImpl_once.Do(func() {
        ᛧshowArrayImpl = Get(foreign, "showArrayImpl")
    })
    return ᛧshowArrayImpl
}


