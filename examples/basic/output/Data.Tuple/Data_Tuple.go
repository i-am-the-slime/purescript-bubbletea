// Code generated by psgo. DO NOT EDIT.

package Data_Tuple

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.Functor.Invariant"
	"project.localhost/purescript-native/output/Control.Lazy"
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Bounded"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func ꞋTuple() Any {
    return func(value0 Any) Any {
        return func(value1 Any) Any {
            return Dict{"Tuple": true, "value0": value0, "value1": value1,}
        }
    }
}
func Ꞌuncurry() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(f, v.(Dict)["value0"], v.(Dict)["value1"])
        }
    }
}
func Ꞌswap() Any {
    return func(v Any) Any {
        return Apply(ꞋTuple(), v.(Dict)["value1"], v.(Dict)["value0"])
    }
}
func Ꞌsnd() Any {
    return func(v Any) Any {
        return v.(Dict)["value1"]
    }
}
func ꞋshowTuple() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return func(dictShow1 Any) Any {
            var show1 Any = Apply(Data_Show.Ꞌshow(), dictShow1)
            return Dict{"show": func(v Any) Any {
                    return Apply(Ꞌappend(), "(Tuple ", Apply(Ꞌappend(), Apply(show, v.(Dict)["value0"]), Apply(Ꞌappend(), " ", Apply(Ꞌappend(), Apply(show1, v.(Dict)["value1"]), ")"))))
                },}
        }
    }
}
func ꞋsemiringTuple() Any {
    return func(dictSemiring Any) Any {
        var add Any = Apply(Data_Semiring.Ꞌadd(), dictSemiring)
        var one Any = Apply(Data_Semiring.Ꞌone(), dictSemiring)
        var mul Any = Apply(Data_Semiring.Ꞌmul(), dictSemiring)
        var zero Any = Apply(Data_Semiring.Ꞌzero(), dictSemiring)
        return func(dictSemiring1 Any) Any {
            var add1 Any = Apply(Data_Semiring.Ꞌadd(), dictSemiring1)
            var mul1 Any = Apply(Data_Semiring.Ꞌmul(), dictSemiring1)
            return Dict{"add": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(add, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(add1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "one": Apply(ꞋTuple(), one, Apply(Data_Semiring.Ꞌone(), dictSemiring1)), "mul": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(mul, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(mul1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "zero": Apply(ꞋTuple(), zero, Apply(Data_Semiring.Ꞌzero(), dictSemiring1)),}
        }
    }
}

var ᛌsemigroupoidTuple_once Once
var ᛧsemigroupoidTuple Any

func ꞋsemigroupoidTuple() Any {
    ᛌsemigroupoidTuple_once.Do(func() {
        ᛧsemigroupoidTuple = Dict{"compose": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(ꞋTuple(), v1.(Dict)["value0"], v.(Dict)["value1"])
            }
        },}
    })
return ᛧsemigroupoidTuple
}


func ꞋsemigroupTuple() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return func(dictSemigroup1 Any) Any {
            var append2 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup1)
            return Dict{"append": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(append1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(append2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋringTuple() Any {
    return func(dictRing Any) Any {
        var sub Any = Apply(Data_Ring.Ꞌsub(), dictRing)
        var semiringTuple1 Any = Apply(ꞋsemiringTuple(), Apply(dictRing.(Dict)["Semiring0"], Undefined))
        return func(dictRing1 Any) Any {
            var sub1 Any = Apply(Data_Ring.Ꞌsub(), dictRing1)
            var semiringTuple2 Any = Apply(semiringTuple1, Apply(dictRing1.(Dict)["Semiring0"], Undefined))
            return Dict{"sub": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(sub, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(sub1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "Semiring0": func(_ Any) Any {
                    return semiringTuple2
                },}
        }
    }
}
func ꞋmonoidTuple() Any {
    return func(dictMonoid Any) Any {
        var mempty Any = Apply(Data_Monoid.Ꞌmempty(), dictMonoid)
        var semigroupTuple1 Any = Apply(ꞋsemigroupTuple(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return func(dictMonoid1 Any) Any {
            var semigroupTuple2 Any = Apply(semigroupTuple1, Apply(dictMonoid1.(Dict)["Semigroup0"], Undefined))
            return Dict{"mempty": Apply(ꞋTuple(), mempty, Apply(Data_Monoid.Ꞌmempty(), dictMonoid1)), "Semigroup0": func(_ Any) Any {
                    return semigroupTuple2
                },}
        }
    }
}
func ꞋheytingAlgebraTuple() Any {
    return func(dictHeytingAlgebra Any) Any {
        var tt Any = Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra)
        var ff Any = Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra)
        var implies Any = Apply(Data_HeytingAlgebra.Ꞌimplies(), dictHeytingAlgebra)
        var conj1 Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra)
        var disj Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra)
        var not Any = Apply(Data_HeytingAlgebra.Ꞌnot(), dictHeytingAlgebra)
        return func(dictHeytingAlgebra1 Any) Any {
            var implies1 Any = Apply(Data_HeytingAlgebra.Ꞌimplies(), dictHeytingAlgebra1)
            var conj2 Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra1)
            var disj1 Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra1)
            var not1 Any = Apply(Data_HeytingAlgebra.Ꞌnot(), dictHeytingAlgebra1)
            return Dict{"tt": Apply(ꞋTuple(), tt, Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra1)), "ff": Apply(ꞋTuple(), ff, Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra1)), "implies": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(implies, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(implies1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "conj": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(conj1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(conj2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "disj": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ꞋTuple(), Apply(disj, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(disj1, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "not": func(v Any) Any {
                    return Apply(ꞋTuple(), Apply(not, v.(Dict)["value0"]), Apply(not1, v.(Dict)["value1"]))
                },}
        }
    }
}

var ᛌgenericTuple_once Once
var ᛧgenericTuple Any

func ꞋgenericTuple() Any {
    ᛌgenericTuple_once.Do(func() {
        ᛧgenericTuple = Dict{"to": func(x Any) Any {
            return Apply(ꞋTuple(), x.(Dict)["value0"], x.(Dict)["value1"])
        }, "from": func(x Any) Any {
            return Apply(Data_Generic_Rep.ꞋProduct(), x.(Dict)["value0"], x.(Dict)["value1"])
        },}
    })
return ᛧgenericTuple
}



var ᛌfunctorTuple_once Once
var ᛧfunctorTuple Any

func ꞋfunctorTuple() Any {
    ᛌfunctorTuple_once.Do(func() {
        ᛧfunctorTuple = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(ꞋTuple(), m.(Dict)["value0"], Apply(f, m.(Dict)["value1"]))
            }
        },}
    })
return ᛧfunctorTuple
}



var ᛌinvariantTuple_once Once
var ᛧinvariantTuple Any

func ꞋinvariantTuple() Any {
    ᛌinvariantTuple_once.Do(func() {
        ᛧinvariantTuple = Dict{"imap": Apply(Data_Functor_Invariant.ꞋimapF(), ꞋfunctorTuple()),}
    })
return ᛧinvariantTuple
}


func Ꞌfst() Any {
    return func(v Any) Any {
        return v.(Dict)["value0"]
    }
}
func ꞋlazyTuple() Any {
    return func(dictLazy Any) Any {
        var ˉdefer Any = Apply(Control_Lazy.Ꞌdefer(), dictLazy)
        return func(dictLazy1 Any) Any {
            var defer1 Any = Apply(Control_Lazy.Ꞌdefer(), dictLazy1)
            return Dict{"defer": func(f Any) Any {
                    return Apply(ꞋTuple(), Apply(ˉdefer, func(v Any) Any {
                        return Apply(Ꞌfst(), Apply(f, Data_Unit.Ꞌunit()))
                    }), Apply(defer1, func(v Any) Any {
                        return Apply(Ꞌsnd(), Apply(f, Data_Unit.Ꞌunit()))
                    }))
                },}
        }
    }
}

var ᛌextendTuple_once Once
var ᛧextendTuple Any

func ꞋextendTuple() Any {
    ᛌextendTuple_once.Do(func() {
        ᛧextendTuple = Dict{"extend": func(f Any) Any {
            return func(v Any) Any {
                return Apply(ꞋTuple(), v.(Dict)["value0"], Apply(f, v))
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorTuple()
        },}
    })
return ᛧextendTuple
}


func ꞋeqTuple() Any {
    return func(dictEq Any) Any {
        var eq Any = Apply(Data_Eq.Ꞌeq(), dictEq)
        return func(dictEq1 Any) Any {
            var eq1 Any = Apply(Data_Eq.Ꞌeq(), dictEq1)
            return Dict{"eq": func(x Any) Any {
                    return func(y Any) Any {
                        return Apply(Ꞌconj(), Apply(eq, x.(Dict)["value0"], y.(Dict)["value0"]), Apply(eq1, x.(Dict)["value1"], y.(Dict)["value1"]))
                    }
                },}
        }
    }
}
func ꞋordTuple() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        var eqTuple1 Any = Apply(ꞋeqTuple(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return func(dictOrd1 Any) Any {
            var compare1 Any = Apply(Data_Ord.Ꞌcompare(), dictOrd1)
            var eqTuple2 Any = Apply(eqTuple1, Apply(dictOrd1.(Dict)["Eq0"], Undefined))
            return Dict{"compare": func(x Any) Any {
                    return func(y Any) Any {
                        var v Any = Apply(compare, x.(Dict)["value0"], y.(Dict)["value0"])
                        if Is(v, "LT") {
                            return Data_Ordering.ꞋLT()
                        }
                        if Is(v, "GT") {
                            return Data_Ordering.ꞋGT()
                        }
                        return Apply(compare1, x.(Dict)["value1"], y.(Dict)["value1"])
                    }
                }, "Eq0": func(_ Any) Any {
                    return eqTuple2
                },}
        }
    }
}
func Ꞌeq1Tuple() Any {
    return func(dictEq Any) Any {
        var eqTuple1 Any = Apply(ꞋeqTuple(), dictEq)
        return Dict{"eq1": func(dictEq1 Any) Any {
                return Apply(Data_Eq.Ꞌeq(), Apply(eqTuple1, dictEq1))
            },}
    }
}
func Ꞌord1Tuple() Any {
    return func(dictOrd Any) Any {
        var ordTuple1 Any = Apply(ꞋordTuple(), dictOrd)
        var eq1Tuple1 Any = Apply(Ꞌeq1Tuple(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare1": func(dictOrd1 Any) Any {
                return Apply(Data_Ord.Ꞌcompare(), Apply(ordTuple1, dictOrd1))
            }, "Eq10": func(_ Any) Any {
                return eq1Tuple1
            },}
    }
}
func Ꞌcurry() Any {
    return func(f Any) Any {
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(f, Apply(ꞋTuple(), a, b))
            }
        }
    }
}

var ᛌcomonadTuple_once Once
var ᛧcomonadTuple Any

func ꞋcomonadTuple() Any {
    ᛌcomonadTuple_once.Do(func() {
        ᛧcomonadTuple = Dict{"extract": Ꞌsnd(), "Extend0": func(_ Any) Any {
            return ꞋextendTuple()
        },}
    })
return ᛧcomonadTuple
}


func ꞋcommutativeRingTuple() Any {
    return func(dictCommutativeRing Any) Any {
        var ringTuple1 Any = Apply(ꞋringTuple(), Apply(dictCommutativeRing.(Dict)["Ring0"], Undefined))
        return func(dictCommutativeRing1 Any) Any {
            var ringTuple2 Any = Apply(ringTuple1, Apply(dictCommutativeRing1.(Dict)["Ring0"], Undefined))
            return Dict{"Ring0": func(_ Any) Any {
                    return ringTuple2
                },}
        }
    }
}
func ꞋboundedTuple() Any {
    return func(dictBounded Any) Any {
        var top Any = Apply(Data_Bounded.Ꞌtop(), dictBounded)
        var bottom Any = Apply(Data_Bounded.Ꞌbottom(), dictBounded)
        var ordTuple1 Any = Apply(ꞋordTuple(), Apply(dictBounded.(Dict)["Ord0"], Undefined))
        return func(dictBounded1 Any) Any {
            var ordTuple2 Any = Apply(ordTuple1, Apply(dictBounded1.(Dict)["Ord0"], Undefined))
            return Dict{"top": Apply(ꞋTuple(), top, Apply(Data_Bounded.Ꞌtop(), dictBounded1)), "bottom": Apply(ꞋTuple(), bottom, Apply(Data_Bounded.Ꞌbottom(), dictBounded1)), "Ord0": func(_ Any) Any {
                    return ordTuple2
                },}
        }
    }
}
func ꞋbooleanAlgebraTuple() Any {
    return func(dictBooleanAlgebra Any) Any {
        var heytingAlgebraTuple1 Any = Apply(ꞋheytingAlgebraTuple(), Apply(dictBooleanAlgebra.(Dict)["HeytingAlgebra0"], Undefined))
        return func(dictBooleanAlgebra1 Any) Any {
            var heytingAlgebraTuple2 Any = Apply(heytingAlgebraTuple1, Apply(dictBooleanAlgebra1.(Dict)["HeytingAlgebra0"], Undefined))
            return Dict{"HeytingAlgebra0": func(_ Any) Any {
                    return heytingAlgebraTuple2
                },}
        }
    }
}
func ꞋapplyTuple() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        return Dict{"apply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(ꞋTuple(), Apply(append1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(v.(Dict)["value1"], v1.(Dict)["value1"]))
                }
            }, "Functor0": func(_ Any) Any {
                return ꞋfunctorTuple()
            },}
    }
}
func ꞋbindTuple() Any {
    return func(dictSemigroup Any) Any {
        var append1 Any = Apply(Data_Semigroup.Ꞌappend(), dictSemigroup)
        var applyTuple1 Any = Apply(ꞋapplyTuple(), dictSemigroup)
        return Dict{"bind": func(v Any) Any {
                return func(f Any) Any {
                    var v1 Any = Apply(f, v.(Dict)["value1"])
                    return Apply(ꞋTuple(), Apply(append1, v.(Dict)["value0"], v1.(Dict)["value0"]), v1.(Dict)["value1"])
                }
            }, "Apply0": func(_ Any) Any {
                return applyTuple1
            },}
    }
}
func ꞋapplicativeTuple() Any {
    return func(dictMonoid Any) Any {
        var applyTuple1 Any = Apply(ꞋapplyTuple(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"pure": Apply(ꞋTuple(), Apply(Data_Monoid.Ꞌmempty(), dictMonoid)), "Apply0": func(_ Any) Any {
                return applyTuple1
            },}
    }
}
func ꞋmonadTuple() Any {
    return func(dictMonoid Any) Any {
        var applicativeTuple1 Any = Apply(ꞋapplicativeTuple(), dictMonoid)
        var bindTuple1 Any = Apply(ꞋbindTuple(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"Applicative0": func(_ Any) Any {
                return applicativeTuple1
            }, "Bind1": func(_ Any) Any {
                return bindTuple1
            },}
    }
}



