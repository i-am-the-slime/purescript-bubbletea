// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Alternate

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Alt"
	"project.localhost/purescript-native/output/Control.Plus"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋAlternate() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowAlternate() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Alternate ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupAlternate() Any {
    return func(dictAlt Any) Any {
        var alt Any = Apply(Control_Alt.Ꞌalt(), dictAlt)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(alt, v, v1)
                }
            },}
    }
}
func ꞋplusAlternate() Any {
    return func(dictPlus Any) Any {
        return dictPlus
    }
}
func ꞋordAlternate() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func Ꞌord1Alternate() Any {
    return func(dictOrd1 Any) Any {
        return dictOrd1
    }
}

var ᛌnewtypeAlternate_once Once
var ᛧnewtypeAlternate Any

func ꞋnewtypeAlternate() Any {
    ᛌnewtypeAlternate_once.Do(func() {
        ᛧnewtypeAlternate = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeAlternate
}


func ꞋmonoidAlternate() Any {
    return func(dictPlus Any) Any {
        var semigroupAlternate1 Any = Apply(ꞋsemigroupAlternate(), Apply(dictPlus.(Dict)["Alt0"], Undefined))
        return Dict{"mempty": Apply(Control_Plus.Ꞌempty(), dictPlus), "Semigroup0": func(_ Any) Any {
                return semigroupAlternate1
            },}
    }
}
func ꞋmonadAlternate() Any {
    return func(dictMonad Any) Any {
        return dictMonad
    }
}
func ꞋfunctorAlternate() Any {
    return func(dictFunctor Any) Any {
        return dictFunctor
    }
}
func ꞋextendAlternate() Any {
    return func(dictExtend Any) Any {
        return dictExtend
    }
}
func ꞋeqAlternate() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func Ꞌeq1Alternate() Any {
    return func(dictEq1 Any) Any {
        return dictEq1
    }
}
func ꞋcomonadAlternate() Any {
    return func(dictComonad Any) Any {
        return dictComonad
    }
}
func ꞋboundedAlternate() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}
func ꞋbindAlternate() Any {
    return func(dictBind Any) Any {
        return dictBind
    }
}
func ꞋapplyAlternate() Any {
    return func(dictApply Any) Any {
        return dictApply
    }
}
func ꞋapplicativeAlternate() Any {
    return func(dictApplicative Any) Any {
        return dictApplicative
    }
}
func ꞋalternativeAlternate() Any {
    return func(dictAlternative Any) Any {
        return dictAlternative
    }
}
func ꞋaltAlternate() Any {
    return func(dictAlt Any) Any {
        return dictAlt
    }
}



