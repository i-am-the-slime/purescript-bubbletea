// Code generated by psgo. DO NOT EDIT.

package Control_Alternative

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Applicative"
	"project.localhost/purescript-native/output/Control.Plus"
	"project.localhost/purescript-native/output/Data.Unit"
)

type _ = Any

func ꞋAlternative_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌguard() Any {
    return func(dictAlternative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), Apply(dictAlternative.(Dict)["Applicative0"], Undefined))
        var empty Any = Apply(Control_Plus.Ꞌempty(), Apply(dictAlternative.(Dict)["Plus1"], Undefined))
        return func(v Any) Any {
            if v == true {
                return Apply(pure, Data_Unit.Ꞌunit())
            }
            if v == false {
                return empty
            }
            panic("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54)")
        }
    }
}

var ᛌalternativeArray_once Once
var ᛧalternativeArray Any

func ꞋalternativeArray() Any {
    ᛌalternativeArray_once.Do(func() {
        ᛧalternativeArray = Dict{"Applicative0": func(_ Any) Any {
            return Control_Applicative.ꞋapplicativeArray()
        }, "Plus1": func(_ Any) Any {
            return Control_Plus.ꞋplusArray()
        },}
    })
return ᛧalternativeArray
}





