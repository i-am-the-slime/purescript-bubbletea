// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Flip

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Data.Profunctor"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Control.Biapply"
	"project.localhost/purescript-native/output/Control.Biapplicative"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋFlip() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowFlip() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Flip ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupoidFlip() Any {
    return func(dictSemigroupoid Any) Any {
        var compose Any = Apply(Control_Semigroupoid.Ꞌcompose(), dictSemigroupoid)
        return Dict{"compose": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(compose, v1, v)
                }
            },}
    }
}
func ꞋordFlip() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeFlip_once Once
var ᛧnewtypeFlip Any

func ꞋnewtypeFlip() Any {
    ᛌnewtypeFlip_once.Do(func() {
        ᛧnewtypeFlip = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeFlip
}


func ꞋfunctorFlip() Any {
    return func(dictBifunctor Any) Any {
        var lmap Any = Apply(Data_Bifunctor.Ꞌlmap(), dictBifunctor)
        return Dict{"map": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(lmap, f, v)
                }
            },}
    }
}
func ꞋeqFlip() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋcontravariantFlip() Any {
    return func(dictProfunctor Any) Any {
        var lcmap Any = Apply(Data_Profunctor.Ꞌlcmap(), dictProfunctor)
        return Dict{"cmap": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(lcmap, f, v)
                }
            },}
    }
}
func ꞋcategoryFlip() Any {
    return func(dictCategory Any) Any {
        var semigroupoidFlip1 Any = Apply(ꞋsemigroupoidFlip(), Apply(dictCategory.(Dict)["Semigroupoid0"], Undefined))
        return Dict{"identity": Apply(Control_Category.Ꞌidentity(), dictCategory), "Semigroupoid0": func(_ Any) Any {
                return semigroupoidFlip1
            },}
    }
}
func ꞋbifunctorFlip() Any {
    return func(dictBifunctor Any) Any {
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), dictBifunctor)
        return Dict{"bimap": func(f Any) Any {
                return func(g Any) Any {
                    return func(v Any) Any {
                        return Apply(bimap, g, f, v)
                    }
                }
            },}
    }
}
func ꞋbiapplyFlip() Any {
    return func(dictBiapply Any) Any {
        var biapply Any = Apply(Control_Biapply.Ꞌbiapply(), dictBiapply)
        var bifunctorFlip1 Any = Apply(ꞋbifunctorFlip(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return Dict{"biapply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(biapply, v, v1)
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorFlip1
            },}
    }
}
func ꞋbiapplicativeFlip() Any {
    return func(dictBiapplicative Any) Any {
        var bipure Any = Apply(Control_Biapplicative.Ꞌbipure(), dictBiapplicative)
        var biapplyFlip1 Any = Apply(ꞋbiapplyFlip(), Apply(dictBiapplicative.(Dict)["Biapply0"], Undefined))
        return Dict{"bipure": func(a Any) Any {
                return func(b Any) Any {
                    return Apply(bipure, b, a)
                }
            }, "Biapply0": func(_ Any) Any {
                return biapplyFlip1
            },}
    }
}



