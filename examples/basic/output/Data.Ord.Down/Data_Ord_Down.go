// Code generated by psgo. DO NOT EDIT.

package Data_Ord_Down

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Bounded"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋDown() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowDown() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Down ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}

var ᛌnewtypeDown_once Once
var ᛧnewtypeDown Any

func ꞋnewtypeDown() Any {
    ᛌnewtypeDown_once.Do(func() {
        ᛧnewtypeDown = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeDown
}


func ꞋeqDown() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋordDown() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        var eqDown1 Any = Apply(ꞋeqDown(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(Data_Ordering.Ꞌinvert(), Apply(compare, v, v1))
                }
            }, "Eq0": func(_ Any) Any {
                return eqDown1
            },}
    }
}
func ꞋboundedDown() Any {
    return func(dictBounded Any) Any {
        var ordDown1 Any = Apply(ꞋordDown(), Apply(dictBounded.(Dict)["Ord0"], Undefined))
        return Dict{"top": Apply(Data_Bounded.Ꞌbottom(), dictBounded), "bottom": Apply(Data_Bounded.Ꞌtop(), dictBounded), "Ord0": func(_ Any) Any {
                return ordDown1
            },}
    }
}



