// Code generated by psgo. DO NOT EDIT.

package Data_HeytingAlgebra_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Generic.Rep"
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
)

type _ = Any

func ꞋGenericHeytingAlgebra_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋgenericTTꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericTT'"]
    }
}
func ꞋgenericTT() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            return Apply(to, Apply(ꞋgenericTTꞌ(), dictGenericHeytingAlgebra))
        }
    }
}
func ꞋgenericNotꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericNot'"]
    }
}
func ꞋgenericNot() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            var genericNotꞌ1 Any = Apply(ꞋgenericNotꞌ(), dictGenericHeytingAlgebra)
            return func(x Any) Any {
                return Apply(to, Apply(genericNotꞌ1, Apply(from, x)))
            }
        }
    }
}
func ꞋgenericImpliesꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericImplies'"]
    }
}
func ꞋgenericImplies() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            var genericImpliesꞌ1 Any = Apply(ꞋgenericImpliesꞌ(), dictGenericHeytingAlgebra)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericImpliesꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}

var ᛌgenericHeytingAlgebraNoArguments_once Once
var ᛧgenericHeytingAlgebraNoArguments Any

func ꞋgenericHeytingAlgebraNoArguments() Any {
    ᛌgenericHeytingAlgebraNoArguments_once.Do(func() {
        ᛧgenericHeytingAlgebraNoArguments = Dict{"genericFF'": Data_Generic_Rep.ꞋNoArguments(), "genericTT'": Data_Generic_Rep.ꞋNoArguments(), "genericImplies'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        }, "genericConj'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        }, "genericDisj'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Generic_Rep.ꞋNoArguments()
            }
        }, "genericNot'": func(v Any) Any {
            return Data_Generic_Rep.ꞋNoArguments()
        },}
    })
return ᛧgenericHeytingAlgebraNoArguments
}


func ꞋgenericHeytingAlgebraArgument() Any {
    return func(dictHeytingAlgebra Any) Any {
        var implies Any = Apply(Data_HeytingAlgebra.Ꞌimplies(), dictHeytingAlgebra)
        var conj Any = Apply(Data_HeytingAlgebra.Ꞌconj(), dictHeytingAlgebra)
        var disj Any = Apply(Data_HeytingAlgebra.Ꞌdisj(), dictHeytingAlgebra)
        var not Any = Apply(Data_HeytingAlgebra.Ꞌnot(), dictHeytingAlgebra)
        return Dict{"genericFF'": Apply(Data_HeytingAlgebra.Ꞌff(), dictHeytingAlgebra), "genericTT'": Apply(Data_HeytingAlgebra.Ꞌtt(), dictHeytingAlgebra), "genericImplies'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(implies, v, v1)
                }
            }, "genericConj'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(conj, v, v1)
                }
            }, "genericDisj'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(disj, v, v1)
                }
            }, "genericNot'": func(v Any) Any {
                return Apply(not, v)
            },}
    }
}
func ꞋgenericFFꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericFF'"]
    }
}
func ꞋgenericFF() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            return Apply(to, Apply(ꞋgenericFFꞌ(), dictGenericHeytingAlgebra))
        }
    }
}
func ꞋgenericDisjꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericDisj'"]
    }
}
func ꞋgenericDisj() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            var genericDisjꞌ1 Any = Apply(ꞋgenericDisjꞌ(), dictGenericHeytingAlgebra)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericDisjꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}
func ꞋgenericConjꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericConj'"]
    }
}
func ꞋgenericHeytingAlgebraConstructor() Any {
    return func(dictGenericHeytingAlgebra Any) Any {
        var genericImpliesꞌ1 Any = Apply(ꞋgenericImpliesꞌ(), dictGenericHeytingAlgebra)
        var genericConjꞌ1 Any = Apply(ꞋgenericConjꞌ(), dictGenericHeytingAlgebra)
        var genericDisjꞌ1 Any = Apply(ꞋgenericDisjꞌ(), dictGenericHeytingAlgebra)
        var genericNotꞌ1 Any = Apply(ꞋgenericNotꞌ(), dictGenericHeytingAlgebra)
        return Dict{"genericFF'": Apply(ꞋgenericFFꞌ(), dictGenericHeytingAlgebra), "genericTT'": Apply(ꞋgenericTTꞌ(), dictGenericHeytingAlgebra), "genericImplies'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericImpliesꞌ1, v, v1)
                }
            }, "genericConj'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericConjꞌ1, v, v1)
                }
            }, "genericDisj'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericDisjꞌ1, v, v1)
                }
            }, "genericNot'": func(v Any) Any {
                return Apply(genericNotꞌ1, v)
            },}
    }
}
func ꞋgenericHeytingAlgebraProduct() Any {
    return func(dictGenericHeytingAlgebra Any) Any {
        var genericFFꞌ1 Any = Apply(ꞋgenericFFꞌ(), dictGenericHeytingAlgebra)
        var genericTTꞌ1 Any = Apply(ꞋgenericTTꞌ(), dictGenericHeytingAlgebra)
        var genericImpliesꞌ1 Any = Apply(ꞋgenericImpliesꞌ(), dictGenericHeytingAlgebra)
        var genericConjꞌ1 Any = Apply(ꞋgenericConjꞌ(), dictGenericHeytingAlgebra)
        var genericDisjꞌ1 Any = Apply(ꞋgenericDisjꞌ(), dictGenericHeytingAlgebra)
        var genericNotꞌ1 Any = Apply(ꞋgenericNotꞌ(), dictGenericHeytingAlgebra)
        return func(dictGenericHeytingAlgebra1 Any) Any {
            var genericImpliesꞌ2 Any = Apply(ꞋgenericImpliesꞌ(), dictGenericHeytingAlgebra1)
            var genericConjꞌ2 Any = Apply(ꞋgenericConjꞌ(), dictGenericHeytingAlgebra1)
            var genericDisjꞌ2 Any = Apply(ꞋgenericDisjꞌ(), dictGenericHeytingAlgebra1)
            var genericNotꞌ2 Any = Apply(ꞋgenericNotꞌ(), dictGenericHeytingAlgebra1)
            return Dict{"genericFF'": Apply(Data_Generic_Rep.ꞋProduct(), genericFFꞌ1, Apply(ꞋgenericFFꞌ(), dictGenericHeytingAlgebra1)), "genericTT'": Apply(Data_Generic_Rep.ꞋProduct(), genericTTꞌ1, Apply(ꞋgenericTTꞌ(), dictGenericHeytingAlgebra1)), "genericImplies'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericImpliesꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericImpliesꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "genericConj'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericConjꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericConjꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "genericDisj'": func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericDisjꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"]), Apply(genericDisjꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"]))
                    }
                }, "genericNot'": func(v Any) Any {
                    return Apply(Data_Generic_Rep.ꞋProduct(), Apply(genericNotꞌ1, v.(Dict)["value0"]), Apply(genericNotꞌ2, v.(Dict)["value1"]))
                },}
        }
    }
}
func ꞋgenericConj() Any {
    return func(dictGeneric Any) Any {
        var to Any = Apply(Data_Generic_Rep.Ꞌto(), dictGeneric)
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericHeytingAlgebra Any) Any {
            var genericConjꞌ1 Any = Apply(ꞋgenericConjꞌ(), dictGenericHeytingAlgebra)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(to, Apply(genericConjꞌ1, Apply(from, x), Apply(from, y)))
                }
            }
        }
    }
}



