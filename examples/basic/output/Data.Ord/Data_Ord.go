// Code generated by psgo. DO NOT EDIT.

package Data_Ord

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋeqRec() Any {
    return Apply(Data_Eq.ꞋeqRec(), Undefined)
}
func Ꞌnegate() Any {
    return Apply(Data_Ring.Ꞌnegate(), Data_Ring.ꞋringInt())
}
func ꞋnotEq() Any {
    return Apply(Data_Eq.ꞋnotEq(), Data_Ordering.ꞋeqOrdering())
}
func ꞋOrdRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋOrd_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋOrd1_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌordVoid_once Once
var ᛧordVoid Any

func ꞋordVoid() Any {
    ᛌordVoid_once.Do(func() {
        ᛧordVoid = Dict{"compare": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        }, "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqVoid()
        },}
    })
return ᛧordVoid
}



var ᛌordUnit_once Once
var ᛧordUnit Any

func ꞋordUnit() Any {
    ᛌordUnit_once.Do(func() {
        ᛧordUnit = Dict{"compare": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        }, "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqUnit()
        },}
    })
return ᛧordUnit
}



var ᛌordString_once Once
var ᛧordString Any

func ꞋordString() Any {
    ᛌordString_once.Do(func() {
        ᛧordString = Dict{"compare": Apply(ꞋordStringImpl(), Data_Ordering.ꞋLT(), Data_Ordering.ꞋEQ(), Data_Ordering.ꞋGT()), "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqString()
        },}
    })
return ᛧordString
}



var ᛌordRecordNil_once Once
var ᛧordRecordNil Any

func ꞋordRecordNil() Any {
    ᛌordRecordNil_once.Do(func() {
        ᛧordRecordNil = Dict{"compareRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Data_Ordering.ꞋEQ()
                }
            }
        }, "EqRecord0": func(_ Any) Any {
            return Data_Eq.ꞋeqRowNil()
        },}
    })
return ᛧordRecordNil
}



var ᛌordProxy_once Once
var ᛧordProxy Any

func ꞋordProxy() Any {
    ᛌordProxy_once.Do(func() {
        ᛧordProxy = Dict{"compare": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        }, "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqProxy()
        },}
    })
return ᛧordProxy
}



var ᛌordOrdering_once Once
var ᛧordOrdering Any

func ꞋordOrdering() Any {
    ᛌordOrdering_once.Do(func() {
        ᛧordOrdering = Dict{"compare": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v, "LT") && Is(v1, "LT") {
                    return Data_Ordering.ꞋEQ()
                }
                if Is(v, "EQ") && Is(v1, "EQ") {
                    return Data_Ordering.ꞋEQ()
                }
                if Is(v, "GT") && Is(v1, "GT") {
                    return Data_Ordering.ꞋEQ()
                }
                if Is(v, "LT") {
                    return Data_Ordering.ꞋLT()
                }
                if Is(v, "EQ") && Is(v1, "LT") {
                    return Data_Ordering.ꞋGT()
                }
                if Is(v, "EQ") && Is(v1, "GT") {
                    return Data_Ordering.ꞋLT()
                }
                if Is(v, "GT") {
                    return Data_Ordering.ꞋGT()
                }
                panic("Failed pattern match at Data.Ord (line 126, column 1 - line 133, column 20)")
            }
        }, "Eq0": func(_ Any) Any {
            return Data_Ordering.ꞋeqOrdering()
        },}
    })
return ᛧordOrdering
}



var ᛌordNumber_once Once
var ᛧordNumber Any

func ꞋordNumber() Any {
    ᛌordNumber_once.Do(func() {
        ᛧordNumber = Dict{"compare": Apply(ꞋordNumberImpl(), Data_Ordering.ꞋLT(), Data_Ordering.ꞋEQ(), Data_Ordering.ꞋGT()), "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqNumber()
        },}
    })
return ᛧordNumber
}



var ᛌordInt_once Once
var ᛧordInt Any

func ꞋordInt() Any {
    ᛌordInt_once.Do(func() {
        ᛧordInt = Dict{"compare": Apply(ꞋordIntImpl(), Data_Ordering.ꞋLT(), Data_Ordering.ꞋEQ(), Data_Ordering.ꞋGT()), "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqInt()
        },}
    })
return ᛧordInt
}



var ᛌordChar_once Once
var ᛧordChar Any

func ꞋordChar() Any {
    ᛌordChar_once.Do(func() {
        ᛧordChar = Dict{"compare": Apply(ꞋordCharImpl(), Data_Ordering.ꞋLT(), Data_Ordering.ꞋEQ(), Data_Ordering.ꞋGT()), "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqChar()
        },}
    })
return ᛧordChar
}



var ᛌordBoolean_once Once
var ᛧordBoolean Any

func ꞋordBoolean() Any {
    ᛌordBoolean_once.Do(func() {
        ᛧordBoolean = Dict{"compare": Apply(ꞋordBooleanImpl(), Data_Ordering.ꞋLT(), Data_Ordering.ꞋEQ(), Data_Ordering.ꞋGT()), "Eq0": func(_ Any) Any {
            return Data_Eq.ꞋeqBoolean()
        },}
    })
return ᛧordBoolean
}


func ꞋcompareRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["compareRecord"]
    }
}
func ꞋordRecord() Any {
    return func(_ Any) Any {
        return func(dictOrdRecord Any) Any {
            var eqRec1 Any = Apply(ꞋeqRec(), Apply(dictOrdRecord.(Dict)["EqRecord0"], Undefined))
            return Dict{"compare": Apply(ꞋcompareRecord(), dictOrdRecord, Type_Proxy.ꞋProxy()), "Eq0": func(_ Any) Any {
                    return eqRec1
                },}
        }
    }
}
func Ꞌcompare1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["compare1"]
    }
}
func Ꞌcompare() Any {
    return func(dict Any) Any {
        return dict.(Dict)["compare"]
    }
}
func Ꞌcompare2() Any {
    return Apply(Ꞌcompare(), ꞋordInt())
}
func Ꞌcomparing() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(f Any) Any {
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(compare3, Apply(f, x), Apply(f, y))
                }
            }
        }
    }
}
func ꞋgreaterThan() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(a1 Any) Any {
            return func(a2 Any) Any {
                var v Any = Apply(compare3, a1, a2)
                if Is(v, "GT") {
                    return true
                }
                return false
            }
        }
    }
}
func ꞋgreaterThanOrEq() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(a1 Any) Any {
            return func(a2 Any) Any {
                var v Any = Apply(compare3, a1, a2)
                if Is(v, "LT") {
                    return false
                }
                return true
            }
        }
    }
}
func ꞋlessThan() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(a1 Any) Any {
            return func(a2 Any) Any {
                var v Any = Apply(compare3, a1, a2)
                if Is(v, "LT") {
                    return true
                }
                return false
            }
        }
    }
}
func Ꞌsignum() Any {
    return func(dictOrd Any) Any {
        var lessThan1 Any = Apply(ꞋlessThan(), dictOrd)
        var greaterThan1 Any = Apply(ꞋgreaterThan(), dictOrd)
        return func(dictRing Any) Any {
            var Semiring0 Any = Apply(dictRing.(Dict)["Semiring0"], Undefined)
            var zero Any = Apply(Data_Semiring.Ꞌzero(), Semiring0)
            var negate1 Any = Apply(Data_Ring.Ꞌnegate(), dictRing)
            var one Any = Apply(Data_Semiring.Ꞌone(), Semiring0)
            return func(x Any) Any {
                var ṩ13 Any = Apply(lessThan1, x, zero)
                if ṩ13 == true {
                    return Apply(negate1, one)
                }
                var ṩ14 Any = Apply(greaterThan1, x, zero)
                if ṩ14 == true {
                    return one
                }
                return x
            }
        }
    }
}
func ꞋlessThanOrEq() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(a1 Any) Any {
            return func(a2 Any) Any {
                var v Any = Apply(compare3, a1, a2)
                if Is(v, "GT") {
                    return false
                }
                return true
            }
        }
    }
}
func Ꞌmax() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(x Any) Any {
            return func(y Any) Any {
                var v Any = Apply(compare3, x, y)
                if Is(v, "LT") {
                    return y
                }
                if Is(v, "EQ") {
                    return x
                }
                if Is(v, "GT") {
                    return x
                }
                panic("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12)")
            }
        }
    }
}
func Ꞌmin() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        return func(x Any) Any {
            return func(y Any) Any {
                var v Any = Apply(compare3, x, y)
                if Is(v, "LT") {
                    return x
                }
                if Is(v, "EQ") {
                    return x
                }
                if Is(v, "GT") {
                    return y
                }
                panic("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12)")
            }
        }
    }
}
func ꞋordArray() Any {
    return func(dictOrd Any) Any {
        var compare3 Any = Apply(Ꞌcompare(), dictOrd)
        var eqArray Any = Apply(Data_Eq.ꞋeqArray(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare": Run(func() Any {
                var toDelta Any = func(x Any) Any {
                    return func(y Any) Any {
                        var v Any = Apply(compare3, x, y)
                        if Is(v, "EQ") {
                            return 0
                        }
                        if Is(v, "LT") {
                            return 1
                        }
                        if Is(v, "GT") {
                            return Apply(Ꞌnegate(), 1)
                        }
                        panic("Failed pattern match at Data.Ord (line 79, column 7 - line 82, column 17)")
                    }
                }
                return func(xs Any) Any {
                    return func(ys Any) Any {
                        return Apply(Ꞌcompare2(), 0, Apply(ꞋordArrayImpl(), toDelta, xs, ys))
                    }
                }
            }), "Eq0": func(_ Any) Any {
                return eqArray
            },}
    }
}

var ᛌord1Array_once Once
var ᛧord1Array Any

func Ꞌord1Array() Any {
    ᛌord1Array_once.Do(func() {
        ᛧord1Array = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Ꞌcompare(), Apply(ꞋordArray(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Data_Eq.Ꞌeq1Array()
        },}
    })
return ᛧord1Array
}


func ꞋordRecordCons() Any {
    return func(dictOrdRecord Any) Any {
        var compareRecord1 Any = Apply(ꞋcompareRecord(), dictOrdRecord)
        var eqRowCons Any = Apply(Data_Eq.ꞋeqRowCons(), Apply(dictOrdRecord.(Dict)["EqRecord0"], Undefined), Undefined)
        return func(_ Any) Any {
            return func(dictIsSymbol Any) Any {
                var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
                var eqRowCons1 Any = Apply(eqRowCons, dictIsSymbol)
                return func(dictOrd Any) Any {
                    var compare3 Any = Apply(Ꞌcompare(), dictOrd)
                    var eqRowCons2 Any = Apply(eqRowCons1, Apply(dictOrd.(Dict)["Eq0"], Undefined))
                    return Dict{"compareRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var left Any = Apply(compare3, Apply(Record_Unsafe.ꞋunsafeGet(), key, ra), Apply(Record_Unsafe.ꞋunsafeGet(), key, rb))
                                    var ṩ19 Any = Apply(ꞋnotEq(), left, Data_Ordering.ꞋEQ())
                                    if ṩ19 == true {
                                        return left
                                    }
                                    return Apply(compareRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                }
                            }
                        }, "EqRecord0": func(_ Any) Any {
                            return eqRowCons2
                        },}
                }
            }
        }
    }
}
func Ꞌclamp() Any {
    return func(dictOrd Any) Any {
        var min1 Any = Apply(Ꞌmin(), dictOrd)
        var max1 Any = Apply(Ꞌmax(), dictOrd)
        return func(low Any) Any {
            return func(hi Any) Any {
                return func(x Any) Any {
                    return Apply(min1, hi, Apply(max1, low, x))
                }
            }
        }
    }
}
func Ꞌbetween() Any {
    return func(dictOrd Any) Any {
        var lessThan1 Any = Apply(ꞋlessThan(), dictOrd)
        var greaterThan1 Any = Apply(ꞋgreaterThan(), dictOrd)
        return func(low Any) Any {
            return func(hi Any) Any {
                return func(x Any) Any {
                    if Apply(lessThan1, x, low) == true {
                        return false
                    }
                    if Apply(greaterThan1, x, hi) == true {
                        return false
                    }
                    return true
                }
            }
        }
    }
}
func Ꞌabs() Any {
    return func(dictOrd Any) Any {
        var greaterThanOrEq1 Any = Apply(ꞋgreaterThanOrEq(), dictOrd)
        return func(dictRing Any) Any {
            var zero Any = Apply(Data_Semiring.Ꞌzero(), Apply(dictRing.(Dict)["Semiring0"], Undefined))
            var negate1 Any = Apply(Data_Ring.Ꞌnegate(), dictRing)
            return func(x Any) Any {
                var ṩ23 Any = Apply(greaterThanOrEq1, x, zero)
                if ṩ23 == true {
                    return x
                }
                return Apply(negate1, x)
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Ord")

var ᛌordBooleanImpl_once Once
var ᛧordBooleanImpl Any

func ꞋordBooleanImpl() Any { 
    ᛌordBooleanImpl_once.Do(func() {
        ᛧordBooleanImpl = Get(foreign, "ordBooleanImpl")
    })
    return ᛧordBooleanImpl
}

var ᛌordIntImpl_once Once
var ᛧordIntImpl Any

func ꞋordIntImpl() Any { 
    ᛌordIntImpl_once.Do(func() {
        ᛧordIntImpl = Get(foreign, "ordIntImpl")
    })
    return ᛧordIntImpl
}

var ᛌordNumberImpl_once Once
var ᛧordNumberImpl Any

func ꞋordNumberImpl() Any { 
    ᛌordNumberImpl_once.Do(func() {
        ᛧordNumberImpl = Get(foreign, "ordNumberImpl")
    })
    return ᛧordNumberImpl
}

var ᛌordStringImpl_once Once
var ᛧordStringImpl Any

func ꞋordStringImpl() Any { 
    ᛌordStringImpl_once.Do(func() {
        ᛧordStringImpl = Get(foreign, "ordStringImpl")
    })
    return ᛧordStringImpl
}

var ᛌordCharImpl_once Once
var ᛧordCharImpl Any

func ꞋordCharImpl() Any { 
    ᛌordCharImpl_once.Do(func() {
        ᛧordCharImpl = Get(foreign, "ordCharImpl")
    })
    return ᛧordCharImpl
}

var ᛌordArrayImpl_once Once
var ᛧordArrayImpl Any

func ꞋordArrayImpl() Any { 
    ᛌordArrayImpl_once.Do(func() {
        ᛧordArrayImpl = Get(foreign, "ordArrayImpl")
    })
    return ᛧordArrayImpl
}


