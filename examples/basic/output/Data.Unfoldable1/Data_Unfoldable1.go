// Code generated by psgo. DO NOT EDIT.

package Data_Unfoldable1

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Ring"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Partial.Unsafe"
	"project.localhost/purescript-native/output/Data.Semigroup.Traversable"
)

type _ = Any

func ꞋfromJust() Any {
    return Apply(Data_Maybe.ꞋfromJust(), Undefined)
}
func ꞋlessThanOrEq() Any {
    return Apply(Data_Ord.ꞋlessThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌsub() Any {
    return Apply(Data_Ring.Ꞌsub(), Data_Ring.ꞋringInt())
}
func Ꞌadd() Any {
    return Apply(Data_Semiring.Ꞌadd(), Data_Semiring.ꞋsemiringInt())
}
func Ꞌeq() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Eq.ꞋeqInt())
}
func ꞋgreaterThanOrEq() Any {
    return Apply(Data_Ord.ꞋgreaterThanOrEq(), Data_Ord.ꞋordInt())
}
func Ꞌnegate() Any {
    return Apply(Data_Ring.Ꞌnegate(), Data_Ring.ꞋringInt())
}
func ꞋgreaterThan() Any {
    return Apply(Data_Ord.ꞋgreaterThan(), Data_Ord.ꞋordInt())
}
func ꞋUnfoldable1_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌunfoldr1() Any {
    return func(dict Any) Any {
        return dict.(Dict)["unfoldr1"]
    }
}

var ᛌunfoldable1Maybe_once Once
var ᛧunfoldable1Maybe Any

func Ꞌunfoldable1Maybe() Any {
    ᛌunfoldable1Maybe_once.Do(func() {
        ᛧunfoldable1Maybe = Dict{"unfoldr1": func(f Any) Any {
            return func(b Any) Any {
                return Apply(Data_Maybe.ꞋJust(), Apply(Data_Tuple.Ꞌfst(), Apply(f, b)))
            }
        },}
    })
return ᛧunfoldable1Maybe
}



var ᛌunfoldable1Array_once Once
var ᛧunfoldable1Array Any

func Ꞌunfoldable1Array() Any {
    ᛌunfoldable1Array_once.Do(func() {
        ᛧunfoldable1Array = Dict{"unfoldr1": Apply(Ꞌunfoldr1ArrayImpl(), Data_Maybe.ꞋisNothing(), Apply(Partial_Unsafe.ꞋunsafePartial(), func(_ Any) Any {
            return ꞋfromJust()
        }), Data_Tuple.Ꞌfst(), Data_Tuple.Ꞌsnd()),}
    })
return ᛧunfoldable1Array
}


func Ꞌreplicate1() Any {
    return func(dictUnfoldable1 Any) Any {
        var unfoldr11 Any = Apply(Ꞌunfoldr1(), dictUnfoldable1)
        return func(n Any) Any {
            return func(v Any) Any {
                var step Any = func(i Any) Any {
                    if Apply(ꞋlessThanOrEq(), i, 0) == true {
                        return Apply(Data_Tuple.ꞋTuple(), v, Data_Maybe.ꞋNothing())
                    }
                    return Apply(Data_Tuple.ꞋTuple(), v, Apply(Data_Maybe.ꞋJust(), Apply(Ꞌsub(), i, 1)))
                }
                return Apply(unfoldr11, step, Apply(Ꞌsub(), n, 1))
            }
        }
    }
}
func Ꞌreplicate1A() Any {
    return func(dictApply Any) Any {
        return func(dictUnfoldable1 Any) Any {
            var replicate11 Any = Apply(Ꞌreplicate1(), dictUnfoldable1)
            return func(dictTraversable1 Any) Any {
                var sequence1 Any = Apply(Data_Semigroup_Traversable.Ꞌsequence1(), dictTraversable1, dictApply)
                return func(n Any) Any {
                    return func(m Any) Any {
                        return Apply(sequence1, Apply(replicate11, n, m))
                    }
                }
            }
        }
    }
}
func Ꞌsingleton() Any {
    return func(dictUnfoldable1 Any) Any {
        return Apply(Ꞌreplicate1(), dictUnfoldable1, 1)
    }
}
func Ꞌrange() Any {
    return func(dictUnfoldable1 Any) Any {
        var unfoldr11 Any = Apply(Ꞌunfoldr1(), dictUnfoldable1)
        return func(start Any) Any {
            return func(end Any) Any {
                var ˉgo Any = func(delta Any) Any {
                    return func(i Any) Any {
                        var iꞌ Any = Apply(Ꞌadd(), i, delta)
                        return Apply(Data_Tuple.ꞋTuple(), i, Run(func() Any {
                            var ṩ7 Any = Apply(Ꞌeq(), i, end)
                            if ṩ7 == true {
                                return Data_Maybe.ꞋNothing()
                            }
                            return Apply(Data_Maybe.ꞋJust(), iꞌ)
                        }))
                    }
                }
                var delta Any = Run(func() Any {
                    var ṩ8 Any = Apply(ꞋgreaterThanOrEq(), end, start)
                    if ṩ8 == true {
                        return 1
                    }
                    return Apply(Ꞌnegate(), 1)
                })
                return Apply(unfoldr11, Apply(ˉgo, delta), start)
            }
        }
    }
}
func ꞋiterateN() Any {
    return func(dictUnfoldable1 Any) Any {
        var unfoldr11 Any = Apply(Ꞌunfoldr1(), dictUnfoldable1)
        return func(n Any) Any {
            return func(f Any) Any {
                return func(s Any) Any {
                    var ˉgo Any = func(v Any) Any {
                        return Apply(Data_Tuple.ꞋTuple(), v.(Dict)["value0"], Run(func() Any {
                            var ṩ10 Any = Apply(ꞋgreaterThan(), v.(Dict)["value1"], 0)
                            if ṩ10 == true {
                                return Apply(Data_Maybe.ꞋJust(), Apply(Data_Tuple.ꞋTuple(), Apply(f, v.(Dict)["value0"]), Apply(Ꞌsub(), v.(Dict)["value1"], 1)))
                            }
                            return Data_Maybe.ꞋNothing()
                        }))
                    }
                    return Apply(unfoldr11, ˉgo, Apply(Data_Tuple.ꞋTuple(), s, Apply(Ꞌsub(), n, 1)))
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Unfoldable1")

var ᛌunfoldr1ArrayImpl_once Once
var ᛧunfoldr1ArrayImpl Any

func Ꞌunfoldr1ArrayImpl() Any { 
    ᛌunfoldr1ArrayImpl_once.Do(func() {
        ᛧunfoldr1ArrayImpl = Get(foreign, "unfoldr1ArrayImpl")
    })
    return ᛧunfoldr1ArrayImpl
}


