// Code generated by psgo. DO NOT EDIT.

package Data_Equivalence

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.HeytingAlgebra"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌconj() Any {
    return Apply(Data_HeytingAlgebra.Ꞌconj(), Data_HeytingAlgebra.ꞋheytingAlgebraBoolean())
}
func Ꞌeq() Any {
    return Apply(Data_Eq.Ꞌeq(), Data_Ordering.ꞋeqOrdering())
}
func ꞋEquivalence() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌsemigroupEquivalence_once Once
var ᛧsemigroupEquivalence Any

func ꞋsemigroupEquivalence() Any {
    ᛌsemigroupEquivalence_once.Do(func() {
        ᛧsemigroupEquivalence = Dict{"append": func(v Any) Any {
            return func(v1 Any) Any {
                return func(a Any) Any {
                    return func(b Any) Any {
                        return Apply(Ꞌconj(), Apply(v, a, b), Apply(v1, a, b))
                    }
                }
            }
        },}
    })
return ᛧsemigroupEquivalence
}



var ᛌnewtypeEquivalence_once Once
var ᛧnewtypeEquivalence Any

func ꞋnewtypeEquivalence() Any {
    ᛌnewtypeEquivalence_once.Do(func() {
        ᛧnewtypeEquivalence = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeEquivalence
}



var ᛌmonoidEquivalence_once Once
var ᛧmonoidEquivalence Any

func ꞋmonoidEquivalence() Any {
    ᛌmonoidEquivalence_once.Do(func() {
        ᛧmonoidEquivalence = Dict{"mempty": func(v Any) Any {
            return func(v1 Any) Any {
                return true
            }
        }, "Semigroup0": func(_ Any) Any {
            return ꞋsemigroupEquivalence()
        },}
    })
return ᛧmonoidEquivalence
}


func ꞋdefaultEquivalence() Any {
    return func(dictEq Any) Any {
        return Apply(Data_Eq.Ꞌeq(), dictEq)
    }
}

var ᛌcontravariantEquivalence_once Once
var ᛧcontravariantEquivalence Any

func ꞋcontravariantEquivalence() Any {
    ᛌcontravariantEquivalence_once.Do(func() {
        ᛧcontravariantEquivalence = Dict{"cmap": func(f Any) Any {
            return func(v Any) Any {
                return Apply(Data_Function.Ꞌon(), v, f)
            }
        },}
    })
return ᛧcontravariantEquivalence
}


func ꞋcomparisonEquivalence() Any {
    return func(v Any) Any {
        return func(a Any) Any {
            return func(b Any) Any {
                return Apply(Ꞌeq(), Apply(v, a, b), Data_Ordering.ꞋEQ())
            }
        }
    }
}



