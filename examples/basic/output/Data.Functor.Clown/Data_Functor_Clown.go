// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Clown

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Functor.Contravariant"
	"project.localhost/purescript-native/output/Data.Functor"
	"project.localhost/purescript-native/output/Control.Apply"
	"project.localhost/purescript-native/output/Control.Applicative"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋClown() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowClown() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Clown ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋprofunctorClown() Any {
    return func(dictContravariant Any) Any {
        var cmap Any = Apply(Data_Functor_Contravariant.Ꞌcmap(), dictContravariant)
        return Dict{"dimap": func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(cmap, f, v1)
                    }
                }
            },}
    }
}
func ꞋordClown() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeClown_once Once
var ᛧnewtypeClown Any

func ꞋnewtypeClown() Any {
    ᛌnewtypeClown_once.Do(func() {
        ᛧnewtypeClown = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeClown
}


func ꞋhoistClown() Any {
    return func(f Any) Any {
        return func(v Any) Any {
            return Apply(f, v)
        }
    }
}

var ᛌfunctorClown_once Once
var ᛧfunctorClown Any

func ꞋfunctorClown() Any {
    ᛌfunctorClown_once.Do(func() {
        ᛧfunctorClown = Dict{"map": func(v Any) Any {
            return func(v1 Any) Any {
                return v1
            }
        },}
    })
return ᛧfunctorClown
}


func ꞋeqClown() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋbifunctorClown() Any {
    return func(dictFunctor Any) Any {
        var ˉmap Any = Apply(Data_Functor.Ꞌmap(), dictFunctor)
        return Dict{"bimap": func(f Any) Any {
                return func(v Any) Any {
                    return func(v1 Any) Any {
                        return Apply(ˉmap, f, v1)
                    }
                }
            },}
    }
}
func ꞋbiapplyClown() Any {
    return func(dictApply Any) Any {
        var apply Any = Apply(Control_Apply.Ꞌapply(), dictApply)
        var bifunctorClown1 Any = Apply(ꞋbifunctorClown(), Apply(dictApply.(Dict)["Functor0"], Undefined))
        return Dict{"biapply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(apply, v, v1)
                }
            }, "Bifunctor0": func(_ Any) Any {
                return bifunctorClown1
            },}
    }
}
func ꞋbiapplicativeClown() Any {
    return func(dictApplicative Any) Any {
        var pure Any = Apply(Control_Applicative.Ꞌpure(), dictApplicative)
        var biapplyClown1 Any = Apply(ꞋbiapplyClown(), Apply(dictApplicative.(Dict)["Apply0"], Undefined))
        return Dict{"bipure": func(a Any) Any {
                return func(v Any) Any {
                    return Apply(pure, a)
                }
            }, "Biapply0": func(_ Any) Any {
                return biapplyClown1
            },}
    }
}



