// Code generated by psgo. DO NOT EDIT.

package Data_Bifunctor_Join

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Bifunctor"
	"project.localhost/purescript-native/output/Control.Biapply"
	"project.localhost/purescript-native/output/Control.Biapplicative"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋJoin() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowJoin() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Join ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋordJoin() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}

var ᛌnewtypeJoin_once Once
var ᛧnewtypeJoin Any

func ꞋnewtypeJoin() Any {
    ᛌnewtypeJoin_once.Do(func() {
        ᛧnewtypeJoin = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeJoin
}


func ꞋeqJoin() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋbifunctorJoin() Any {
    return func(dictBifunctor Any) Any {
        var bimap Any = Apply(Data_Bifunctor.Ꞌbimap(), dictBifunctor)
        return Dict{"map": func(f Any) Any {
                return func(v Any) Any {
                    return Apply(bimap, f, f, v)
                }
            },}
    }
}
func ꞋbiapplyJoin() Any {
    return func(dictBiapply Any) Any {
        var biapply Any = Apply(Control_Biapply.Ꞌbiapply(), dictBiapply)
        var bifunctorJoin1 Any = Apply(ꞋbifunctorJoin(), Apply(dictBiapply.(Dict)["Bifunctor0"], Undefined))
        return Dict{"apply": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(biapply, v, v1)
                }
            }, "Functor0": func(_ Any) Any {
                return bifunctorJoin1
            },}
    }
}
func ꞋbiapplicativeJoin() Any {
    return func(dictBiapplicative Any) Any {
        var bipure Any = Apply(Control_Biapplicative.Ꞌbipure(), dictBiapplicative)
        var biapplyJoin1 Any = Apply(ꞋbiapplyJoin(), Apply(dictBiapplicative.(Dict)["Biapply0"], Undefined))
        return Dict{"pure": func(a Any) Any {
                return Apply(bipure, a, a)
            }, "Apply0": func(_ Any) Any {
                return biapplyJoin1
            },}
    }
}



