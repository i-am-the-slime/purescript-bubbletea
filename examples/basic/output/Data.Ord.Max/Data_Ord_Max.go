// Code generated by psgo. DO NOT EDIT.

package Data_Ord_Max

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Bounded"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋMax() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowMax() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Max ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupMax() Any {
    return func(dictOrd Any) Any {
        var max Any = Apply(Data_Ord.Ꞌmax(), dictOrd)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(max, v, v1)
                }
            },}
    }
}

var ᛌnewtypeMax_once Once
var ᛧnewtypeMax Any

func ꞋnewtypeMax() Any {
    ᛌnewtypeMax_once.Do(func() {
        ᛧnewtypeMax = Dict{"Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧnewtypeMax
}


func ꞋmonoidMax() Any {
    return func(dictBounded Any) Any {
        var semigroupMax1 Any = Apply(ꞋsemigroupMax(), Apply(dictBounded.(Dict)["Ord0"], Undefined))
        return Dict{"mempty": Apply(Data_Bounded.Ꞌbottom(), dictBounded), "Semigroup0": func(_ Any) Any {
                return semigroupMax1
            },}
    }
}
func ꞋeqMax() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}
func ꞋordMax() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        var eqMax1 Any = Apply(ꞋeqMax(), Apply(dictOrd.(Dict)["Eq0"], Undefined))
        return Dict{"compare": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(compare, v, v1)
                }
            }, "Eq0": func(_ Any) Any {
                return eqMax1
            },}
    }
}



