// Code generated by psgo. DO NOT EDIT.

package Bubbletea

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Function.Uncurried"
	"project.localhost/purescript-native/output/Effect.Uncurried"
)

type _ = Any

func ꞋuserToTeaMessage() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn1(), ꞋuserMessageToTeaMessage())
}
func ꞋsetWindowTitle() Any {
    return Apply(Effect_Uncurried.ꞋrunEffectFn1(), ꞋsetWindowTitleImpl())
}
func ꞋrunProgram() Any {
    return Apply(Effect_Uncurried.ꞋrunEffectFn1(), ꞋrunProgramImpl())
}
func ꞋnewProgram() Any {
    return func(model Any) Any {
        return func(ˉinit Any) Any {
            return func(update Any) Any {
                return func(view Any) Any {
                    return Apply(Effect_Uncurried.ꞋrunEffectFn4(), ꞋnewProgramImpl(), model, ˉinit, update, view)
                }
            }
        }
    }
}
func ꞋenableFileLogging() Any {
    return Apply(Effect_Uncurried.ꞋrunEffectFn1(), ꞋloggingToFileImpl())
}
func Ꞌdebug() Any {
    return func(msg Any) Any {
        return Apply(Data_Function_Uncurried.ꞋrunFn1(), Apply(Ꞌspy(), msg))
    }
}
func ꞋconvertMessageꞌ() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn1(), ꞋconvertMessage())
}
func ꞋbatchCommands() Any {
    return Apply(Data_Function_Uncurried.ꞋrunFn1(), Ꞌbatch())
}


// Foreign values

var foreign = Foreign("Bubbletea")

var ᛌnewProgramImpl_once Once
var ᛧnewProgramImpl Any

func ꞋnewProgramImpl() Any { 
    ᛌnewProgramImpl_once.Do(func() {
        ᛧnewProgramImpl = Get(foreign, "newProgramImpl")
    })
    return ᛧnewProgramImpl
}

var ᛌrunProgramImpl_once Once
var ᛧrunProgramImpl Any

func ꞋrunProgramImpl() Any { 
    ᛌrunProgramImpl_once.Do(func() {
        ᛧrunProgramImpl = Get(foreign, "runProgramImpl")
    })
    return ᛧrunProgramImpl
}

var ᛌsetWindowTitleImpl_once Once
var ᛧsetWindowTitleImpl Any

func ꞋsetWindowTitleImpl() Any { 
    ᛌsetWindowTitleImpl_once.Do(func() {
        ᛧsetWindowTitleImpl = Get(foreign, "setWindowTitleImpl")
    })
    return ᛧsetWindowTitleImpl
}

var ᛌnoCommand_once Once
var ᛧnoCommand Any

func ꞋnoCommand() Any { 
    ᛌnoCommand_once.Do(func() {
        ᛧnoCommand = Get(foreign, "noCommand")
    })
    return ᛧnoCommand
}

var ᛌbatch_once Once
var ᛧbatch Any

func Ꞌbatch() Any { 
    ᛌbatch_once.Do(func() {
        ᛧbatch = Get(foreign, "batch")
    })
    return ᛧbatch
}

var ᛌquit_once Once
var ᛧquit Any

func Ꞌquit() Any { 
    ᛌquit_once.Do(func() {
        ᛧquit = Get(foreign, "quit")
    })
    return ᛧquit
}

var ᛌclearScreen_once Once
var ᛧclearScreen Any

func ꞋclearScreen() Any { 
    ᛌclearScreen_once.Do(func() {
        ᛧclearScreen = Get(foreign, "clearScreen")
    })
    return ᛧclearScreen
}

var ᛌconvertMessage_once Once
var ᛧconvertMessage Any

func ꞋconvertMessage() Any { 
    ᛌconvertMessage_once.Do(func() {
        ᛧconvertMessage = Get(foreign, "convertMessage")
    })
    return ᛧconvertMessage
}

var ᛌconvertMessageV_once Once
var ᛧconvertMessageV Any

func ꞋconvertMessageV() Any { 
    ᛌconvertMessageV_once.Do(func() {
        ᛧconvertMessageV = Get(foreign, "convertMessageV")
    })
    return ᛧconvertMessageV
}

var ᛌuserMessageToTeaMessage_once Once
var ᛧuserMessageToTeaMessage Any

func ꞋuserMessageToTeaMessage() Any { 
    ᛌuserMessageToTeaMessage_once.Do(func() {
        ᛧuserMessageToTeaMessage = Get(foreign, "userMessageToTeaMessage")
    })
    return ᛧuserMessageToTeaMessage
}

var ᛌloggingToFileImpl_once Once
var ᛧloggingToFileImpl Any

func ꞋloggingToFileImpl() Any { 
    ᛌloggingToFileImpl_once.Do(func() {
        ᛧloggingToFileImpl = Get(foreign, "loggingToFileImpl")
    })
    return ᛧloggingToFileImpl
}

var ᛌspy_once Once
var ᛧspy Any

func Ꞌspy() Any { 
    ᛌspy_once.Do(func() {
        ᛧspy = Get(foreign, "spy")
    })
    return ᛧspy
}


