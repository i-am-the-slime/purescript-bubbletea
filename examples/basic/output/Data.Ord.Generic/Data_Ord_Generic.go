// Code generated by psgo. DO NOT EDIT.

package Data_Ord_Generic

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Ordering"
	"project.localhost/purescript-native/output/Data.Ord"
	"project.localhost/purescript-native/output/Data.Generic.Rep"
)

type _ = Any

func ꞋGenericOrd_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌgenericOrdNoConstructors_once Once
var ᛧgenericOrdNoConstructors Any

func ꞋgenericOrdNoConstructors() Any {
    ᛌgenericOrdNoConstructors_once.Do(func() {
        ᛧgenericOrdNoConstructors = Dict{"genericCompare'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        },}
    })
return ᛧgenericOrdNoConstructors
}



var ᛌgenericOrdNoArguments_once Once
var ᛧgenericOrdNoArguments Any

func ꞋgenericOrdNoArguments() Any {
    ᛌgenericOrdNoArguments_once.Do(func() {
        ᛧgenericOrdNoArguments = Dict{"genericCompare'": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        },}
    })
return ᛧgenericOrdNoArguments
}


func ꞋgenericOrdArgument() Any {
    return func(dictOrd Any) Any {
        var compare Any = Apply(Data_Ord.Ꞌcompare(), dictOrd)
        return Dict{"genericCompare'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(compare, v, v1)
                }
            },}
    }
}
func ꞋgenericCompareꞌ() Any {
    return func(dict Any) Any {
        return dict.(Dict)["genericCompare'"]
    }
}
func ꞋgenericOrdConstructor() Any {
    return func(dictGenericOrd Any) Any {
        var genericCompareꞌ1 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd)
        return Dict{"genericCompare'": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(genericCompareꞌ1, v, v1)
                }
            },}
    }
}
func ꞋgenericOrdProduct() Any {
    return func(dictGenericOrd Any) Any {
        var genericCompareꞌ1 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd)
        return func(dictGenericOrd1 Any) Any {
            var genericCompareꞌ2 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd1)
            return Dict{"genericCompare'": func(v Any) Any {
                    return func(v1 Any) Any {
                        var v2 Any = Apply(genericCompareꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"])
                        if Is(v2, "EQ") {
                            return Apply(genericCompareꞌ2, v.(Dict)["value1"], v1.(Dict)["value1"])
                        }
                        return v2
                    }
                },}
        }
    }
}
func ꞋgenericOrdSum() Any {
    return func(dictGenericOrd Any) Any {
        var genericCompareꞌ1 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd)
        return func(dictGenericOrd1 Any) Any {
            var genericCompareꞌ2 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd1)
            return Dict{"genericCompare'": func(v Any) Any {
                    return func(v1 Any) Any {
                        if Is(v, "Inl") && Is(v1, "Inl") {
                            return Apply(genericCompareꞌ1, v.(Dict)["value0"], v1.(Dict)["value0"])
                        }
                        if Is(v, "Inr") && Is(v1, "Inr") {
                            return Apply(genericCompareꞌ2, v.(Dict)["value0"], v1.(Dict)["value0"])
                        }
                        if Is(v, "Inl") && Is(v1, "Inr") {
                            return Data_Ordering.ꞋLT()
                        }
                        if Is(v, "Inr") && Is(v1, "Inl") {
                            return Data_Ordering.ꞋGT()
                        }
                        panic("Failed pattern match at Data.Ord.Generic (line 19, column 1 - line 23, column 39)")
                    }
                },}
        }
    }
}
func ꞋgenericCompare() Any {
    return func(dictGeneric Any) Any {
        var from Any = Apply(Data_Generic_Rep.Ꞌfrom(), dictGeneric)
        return func(dictGenericOrd Any) Any {
            var genericCompareꞌ1 Any = Apply(ꞋgenericCompareꞌ(), dictGenericOrd)
            return func(x Any) Any {
                return func(y Any) Any {
                    return Apply(genericCompareꞌ1, Apply(from, x), Apply(from, y))
                }
            }
        }
    }
}



