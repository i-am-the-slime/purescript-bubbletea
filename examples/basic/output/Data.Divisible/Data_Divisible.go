// Code generated by psgo. DO NOT EDIT.

package Data_Divisible

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Function"
	"project.localhost/purescript-native/output/Data.Divide"
	"project.localhost/purescript-native/output/Data.Monoid"
	"project.localhost/purescript-native/output/Data.Ordering"
)

type _ = Any

func ꞋDivisible_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌdivisiblePredicate_once Once
var ᛧdivisiblePredicate Any

func ꞋdivisiblePredicate() Any {
    ᛌdivisiblePredicate_once.Do(func() {
        ᛧdivisiblePredicate = Dict{"conquer": Apply(Data_Function.Ꞌconst(), true), "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdividePredicate()
        },}
    })
return ᛧdivisiblePredicate
}


func ꞋdivisibleOp() Any {
    return func(dictMonoid Any) Any {
        var divideOp Any = Apply(Data_Divide.ꞋdivideOp(), Apply(dictMonoid.(Dict)["Semigroup0"], Undefined))
        return Dict{"conquer": Apply(Data_Function.Ꞌconst(), Apply(Data_Monoid.Ꞌmempty(), dictMonoid)), "Divide0": func(_ Any) Any {
                return divideOp
            },}
    }
}

var ᛌdivisibleEquivalence_once Once
var ᛧdivisibleEquivalence Any

func ꞋdivisibleEquivalence() Any {
    ᛌdivisibleEquivalence_once.Do(func() {
        ᛧdivisibleEquivalence = Dict{"conquer": func(v Any) Any {
            return func(v1 Any) Any {
                return true
            }
        }, "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdivideEquivalence()
        },}
    })
return ᛧdivisibleEquivalence
}



var ᛌdivisibleComparison_once Once
var ᛧdivisibleComparison Any

func ꞋdivisibleComparison() Any {
    ᛌdivisibleComparison_once.Do(func() {
        ᛧdivisibleComparison = Dict{"conquer": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Ordering.ꞋEQ()
            }
        }, "Divide0": func(_ Any) Any {
            return Data_Divide.ꞋdivideComparison()
        },}
    })
return ᛧdivisibleComparison
}


func Ꞌconquer() Any {
    return func(dict Any) Any {
        return dict.(Dict)["conquer"]
    }
}



