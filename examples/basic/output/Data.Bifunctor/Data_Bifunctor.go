// Code generated by psgo. DO NOT EDIT.

package Data_Bifunctor

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Tuple"
	"project.localhost/purescript-native/output/Data.Either"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋBifunctor_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌbimap() Any {
    return func(dict Any) Any {
        return dict.(Dict)["bimap"]
    }
}
func Ꞌlmap() Any {
    return func(dictBifunctor Any) Any {
        var bimap1 Any = Apply(Ꞌbimap(), dictBifunctor)
        return func(f Any) Any {
            return Apply(bimap1, f, Ꞌidentity())
        }
    }
}
func Ꞌrmap() Any {
    return func(dictBifunctor Any) Any {
        return Apply(Ꞌbimap(), dictBifunctor, Ꞌidentity())
    }
}

var ᛌbifunctorTuple_once Once
var ᛧbifunctorTuple Any

func ꞋbifunctorTuple() Any {
    ᛌbifunctorTuple_once.Do(func() {
        ᛧbifunctorTuple = Dict{"bimap": func(f Any) Any {
            return func(g Any) Any {
                return func(v Any) Any {
                    return Apply(Data_Tuple.ꞋTuple(), Apply(f, v.(Dict)["value0"]), Apply(g, v.(Dict)["value1"]))
                }
            }
        },}
    })
return ᛧbifunctorTuple
}



var ᛌbifunctorEither_once Once
var ᛧbifunctorEither Any

func ꞋbifunctorEither() Any {
    ᛌbifunctorEither_once.Do(func() {
        ᛧbifunctorEither = Dict{"bimap": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    if Is(v2, "Left") {
                        return Apply(Data_Either.ꞋLeft(), Apply(v, v2.(Dict)["value0"]))
                    }
                    if Is(v2, "Right") {
                        return Apply(Data_Either.ꞋRight(), Apply(v1, v2.(Dict)["value0"]))
                    }
                    panic("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36)")
                }
            }
        },}
    })
return ᛧbifunctorEither
}



var ᛌbifunctorConst_once Once
var ᛧbifunctorConst Any

func ꞋbifunctorConst() Any {
    ᛌbifunctorConst_once.Do(func() {
        ᛧbifunctorConst = Dict{"bimap": func(f Any) Any {
            return func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(f, v1)
                }
            }
        },}
    })
return ᛧbifunctorConst
}





