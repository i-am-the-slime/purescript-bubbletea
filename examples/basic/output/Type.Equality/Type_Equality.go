// Code generated by psgo. DO NOT EDIT.

package Type_Equality

import . "github.com/purescript-native/go-runtime"

import (
)

type _ = Any

func ꞋTypeEquals_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋTo() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋFrom() Any {
    return func(x Any) Any {
        return x
    }
}

var ᛌrefl_once Once
var ᛧrefl Any

func Ꞌrefl() Any {
    ᛌrefl_once.Do(func() {
        ᛧrefl = Dict{"proof": func(a Any) Any {
            return a
        }, "Coercible0": func(_ Any) Any {
            return Undefined
        },}
    })
return ᛧrefl
}


func Ꞌproof() Any {
    return func(dict Any) Any {
        return dict.(Dict)["proof"]
    }
}
func Ꞌto() Any {
    return func(dictTypeEquals Any) Any {
        var v Any = Apply(Ꞌproof(), dictTypeEquals, func(a Any) Any {
            return a
        })
        return v
    }
}
func Ꞌfrom() Any {
    return func(dictTypeEquals Any) Any {
        var v Any = Apply(Ꞌproof(), dictTypeEquals, func(a Any) Any {
            return a
        })
        return v
    }
}



