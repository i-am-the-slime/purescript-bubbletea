// Code generated by psgo. DO NOT EDIT.

package Data_Profunctor_Choice

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Data.Profunctor"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Functor"
)

type _ = Any

func Ꞌidentity() Any {
    return Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn())
}
func ꞋChoice_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌright() Any {
    return func(dict Any) Any {
        return dict.(Dict)["right"]
    }
}
func Ꞌleft() Any {
    return func(dict Any) Any {
        return dict.(Dict)["left"]
    }
}
func ꞋsplitChoice() Any {
    return func(dictSemigroupoid Any) Any {
        var composeFlipped Any = Apply(Control_Semigroupoid.ꞋcomposeFlipped(), dictSemigroupoid)
        return func(dictChoice Any) Any {
            var left1 Any = Apply(Ꞌleft(), dictChoice)
            var right1 Any = Apply(Ꞌright(), dictChoice)
            return func(l Any) Any {
                return func(r Any) Any {
                    return Apply(composeFlipped, Apply(left1, l), Apply(right1, r))
                }
            }
        }
    }
}
func Ꞌfanin() Any {
    return func(dictSemigroupoid Any) Any {
        var splitChoice1 Any = Apply(ꞋsplitChoice(), dictSemigroupoid)
        return func(dictChoice Any) Any {
            var rmap Any = Apply(Data_Profunctor.Ꞌrmap(), Apply(dictChoice.(Dict)["Profunctor0"], Undefined))
            var splitChoice2 Any = Apply(splitChoice1, dictChoice)
            return func(l Any) Any {
                return func(r Any) Any {
                    return Apply(rmap, Apply(Data_Either.Ꞌeither(), Ꞌidentity(), Ꞌidentity()), Apply(splitChoice2, l, r))
                }
            }
        }
    }
}

var ᛌchoiceFn_once Once
var ᛧchoiceFn Any

func ꞋchoiceFn() Any {
    ᛌchoiceFn_once.Do(func() {
        ᛧchoiceFn = Dict{"left": func(v Any) Any {
            return func(v1 Any) Any {
                if Is(v1, "Left") {
                    return Apply(Data_Either.ꞋLeft(), Apply(v, v1.(Dict)["value0"]))
                }
                if Is(v1, "Right") {
                    return Apply(Data_Either.ꞋRight(), v1.(Dict)["value0"])
                }
                panic("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16)")
            }
        }, "right": Apply(Data_Functor.Ꞌmap(), Data_Either.ꞋfunctorEither()), "Profunctor0": func(_ Any) Any {
            return Data_Profunctor.ꞋprofunctorFn()
        },}
    })
return ᛧchoiceFn
}





