// Code generated by psgo. DO NOT EDIT.

package Data_Functor_Coproduct_Inject

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Control.Semigroupoid"
	"project.localhost/purescript-native/output/Control.Category"
	"project.localhost/purescript-native/output/Data.Maybe"
	"project.localhost/purescript-native/output/Data.Functor.Coproduct"
	"project.localhost/purescript-native/output/Data.Either"
	"project.localhost/purescript-native/output/Data.Function"
)

type _ = Any

func Ꞌcompose() Any {
    return Apply(Control_Semigroupoid.Ꞌcompose(), Control_Semigroupoid.ꞋsemigroupoidFn())
}
func ꞋInject_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func Ꞌprj() Any {
    return func(dict Any) Any {
        return dict.(Dict)["prj"]
    }
}

var ᛌinjectReflexive_once Once
var ᛧinjectReflexive Any

func ꞋinjectReflexive() Any {
    ᛌinjectReflexive_once.Do(func() {
        ᛧinjectReflexive = Dict{"inj": Apply(Control_Category.Ꞌidentity(), Control_Category.ꞋcategoryFn()), "prj": Data_Maybe.ꞋJust(),}
    })
return ᛧinjectReflexive
}



var ᛌinjectLeft_once Once
var ᛧinjectLeft Any

func ꞋinjectLeft() Any {
    ᛌinjectLeft_once.Do(func() {
        ᛧinjectLeft = Dict{"inj": Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Data_Either.ꞋLeft()), "prj": Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Data_Maybe.ꞋJust(), Apply(Data_Function.Ꞌconst(), Data_Maybe.ꞋNothing())),}
    })
return ᛧinjectLeft
}


func Ꞌinj() Any {
    return func(dict Any) Any {
        return dict.(Dict)["inj"]
    }
}
func ꞋinjectRight() Any {
    return func(dictInject Any) Any {
        return Dict{"inj": Apply(Ꞌcompose(), Data_Functor_Coproduct.ꞋCoproduct(), Apply(Ꞌcompose(), Data_Either.ꞋRight(), Apply(Ꞌinj(), dictInject))), "prj": Apply(Data_Functor_Coproduct.Ꞌcoproduct(), Apply(Data_Function.Ꞌconst(), Data_Maybe.ꞋNothing()), Apply(Ꞌprj(), dictInject)),}
    }
}



