// Code generated by psgo. DO NOT EDIT.

package Data_Monoid_Additive

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Semigroup"
	"project.localhost/purescript-native/output/Data.Show"
	"project.localhost/purescript-native/output/Data.Semiring"
	"project.localhost/purescript-native/output/Data.Eq"
	"project.localhost/purescript-native/output/Data.Ord"
)

type _ = Any

func Ꞌappend() Any {
    return Apply(Data_Semigroup.Ꞌappend(), Data_Semigroup.ꞋsemigroupString())
}
func ꞋAdditive() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋshowAdditive() Any {
    return func(dictShow Any) Any {
        var show Any = Apply(Data_Show.Ꞌshow(), dictShow)
        return Dict{"show": func(v Any) Any {
                return Apply(Ꞌappend(), "(Additive ", Apply(Ꞌappend(), Apply(show, v), ")"))
            },}
    }
}
func ꞋsemigroupAdditive() Any {
    return func(dictSemiring Any) Any {
        var add Any = Apply(Data_Semiring.Ꞌadd(), dictSemiring)
        return Dict{"append": func(v Any) Any {
                return func(v1 Any) Any {
                    return Apply(add, v, v1)
                }
            },}
    }
}
func ꞋordAdditive() Any {
    return func(dictOrd Any) Any {
        return dictOrd
    }
}
func ꞋmonoidAdditive() Any {
    return func(dictSemiring Any) Any {
        var semigroupAdditive1 Any = Apply(ꞋsemigroupAdditive(), dictSemiring)
        return Dict{"mempty": Apply(Data_Semiring.Ꞌzero(), dictSemiring), "Semigroup0": func(_ Any) Any {
                return semigroupAdditive1
            },}
    }
}

var ᛌfunctorAdditive_once Once
var ᛧfunctorAdditive Any

func ꞋfunctorAdditive() Any {
    ᛌfunctorAdditive_once.Do(func() {
        ᛧfunctorAdditive = Dict{"map": func(f Any) Any {
            return func(m Any) Any {
                return Apply(f, m)
            }
        },}
    })
return ᛧfunctorAdditive
}


func ꞋeqAdditive() Any {
    return func(dictEq Any) Any {
        return dictEq
    }
}

var ᛌeq1Additive_once Once
var ᛧeq1Additive Any

func Ꞌeq1Additive() Any {
    ᛌeq1Additive_once.Do(func() {
        ᛧeq1Additive = Dict{"eq1": func(dictEq Any) Any {
            return Apply(Data_Eq.Ꞌeq(), Apply(ꞋeqAdditive(), dictEq))
        },}
    })
return ᛧeq1Additive
}



var ᛌord1Additive_once Once
var ᛧord1Additive Any

func Ꞌord1Additive() Any {
    ᛌord1Additive_once.Do(func() {
        ᛧord1Additive = Dict{"compare1": func(dictOrd Any) Any {
            return Apply(Data_Ord.Ꞌcompare(), Apply(ꞋordAdditive(), dictOrd))
        }, "Eq10": func(_ Any) Any {
            return Ꞌeq1Additive()
        },}
    })
return ᛧord1Additive
}


func ꞋboundedAdditive() Any {
    return func(dictBounded Any) Any {
        return dictBounded
    }
}

var ᛌapplyAdditive_once Once
var ᛧapplyAdditive Any

func ꞋapplyAdditive() Any {
    ᛌapplyAdditive_once.Do(func() {
        ᛧapplyAdditive = Dict{"apply": func(v Any) Any {
            return func(v1 Any) Any {
                return Apply(v, v1)
            }
        }, "Functor0": func(_ Any) Any {
            return ꞋfunctorAdditive()
        },}
    })
return ᛧapplyAdditive
}



var ᛌbindAdditive_once Once
var ᛧbindAdditive Any

func ꞋbindAdditive() Any {
    ᛌbindAdditive_once.Do(func() {
        ᛧbindAdditive = Dict{"bind": func(v Any) Any {
            return func(f Any) Any {
                return Apply(f, v)
            }
        }, "Apply0": func(_ Any) Any {
            return ꞋapplyAdditive()
        },}
    })
return ᛧbindAdditive
}



var ᛌapplicativeAdditive_once Once
var ᛧapplicativeAdditive Any

func ꞋapplicativeAdditive() Any {
    ᛌapplicativeAdditive_once.Do(func() {
        ᛧapplicativeAdditive = Dict{"pure": ꞋAdditive(), "Apply0": func(_ Any) Any {
            return ꞋapplyAdditive()
        },}
    })
return ᛧapplicativeAdditive
}



var ᛌmonadAdditive_once Once
var ᛧmonadAdditive Any

func ꞋmonadAdditive() Any {
    ᛌmonadAdditive_once.Do(func() {
        ᛧmonadAdditive = Dict{"Applicative0": func(_ Any) Any {
            return ꞋapplicativeAdditive()
        }, "Bind1": func(_ Any) Any {
            return ꞋbindAdditive()
        },}
    })
return ᛧmonadAdditive
}





