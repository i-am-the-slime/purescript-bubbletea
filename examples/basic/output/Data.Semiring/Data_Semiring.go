// Code generated by psgo. DO NOT EDIT.

package Data_Semiring

import . "github.com/purescript-native/go-runtime"

import (
	"project.localhost/purescript-native/output/Data.Unit"
	"project.localhost/purescript-native/output/Type.Proxy"
	"project.localhost/purescript-native/output/Data.Symbol"
	"project.localhost/purescript-native/output/Record.Unsafe"
)

type _ = Any

func ꞋSemiringRecord_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋSemiring_ṩDict() Any {
    return func(x Any) Any {
        return x
    }
}
func ꞋzeroRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["zeroRecord"]
    }
}
func Ꞌzero() Any {
    return func(dict Any) Any {
        return dict.(Dict)["zero"]
    }
}

var ᛌsemiringUnit_once Once
var ᛧsemiringUnit Any

func ꞋsemiringUnit() Any {
    ᛌsemiringUnit_once.Do(func() {
        ᛧsemiringUnit = Dict{"add": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "zero": Data_Unit.Ꞌunit(), "mul": func(v Any) Any {
            return func(v1 Any) Any {
                return Data_Unit.Ꞌunit()
            }
        }, "one": Data_Unit.Ꞌunit(),}
    })
return ᛧsemiringUnit
}



var ᛌsemiringRecordNil_once Once
var ᛧsemiringRecordNil Any

func ꞋsemiringRecordNil() Any {
    ᛌsemiringRecordNil_once.Do(func() {
        ᛧsemiringRecordNil = Dict{"addRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "mulRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return func(v2 Any) Any {
                    return Dict{}
                }
            }
        }, "oneRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        }, "zeroRecord": func(v Any) Any {
            return func(v1 Any) Any {
                return Dict{}
            }
        },}
    })
return ᛧsemiringRecordNil
}



var ᛌsemiringProxy_once Once
var ᛧsemiringProxy Any

func ꞋsemiringProxy() Any {
    ᛌsemiringProxy_once.Do(func() {
        ᛧsemiringProxy = Dict{"add": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "mul": func(v Any) Any {
            return func(v1 Any) Any {
                return Type_Proxy.ꞋProxy()
            }
        }, "one": Type_Proxy.ꞋProxy(), "zero": Type_Proxy.ꞋProxy(),}
    })
return ᛧsemiringProxy
}



var ᛌsemiringNumber_once Once
var ᛧsemiringNumber Any

func ꞋsemiringNumber() Any {
    ᛌsemiringNumber_once.Do(func() {
        ᛧsemiringNumber = Dict{"add": ꞋnumAdd(), "zero": 0.0, "mul": ꞋnumMul(), "one": 1.0,}
    })
return ᛧsemiringNumber
}



var ᛌsemiringInt_once Once
var ᛧsemiringInt Any

func ꞋsemiringInt() Any {
    ᛌsemiringInt_once.Do(func() {
        ᛧsemiringInt = Dict{"add": ꞋintAdd(), "zero": 0, "mul": ꞋintMul(), "one": 1,}
    })
return ᛧsemiringInt
}


func ꞋoneRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["oneRecord"]
    }
}
func Ꞌone() Any {
    return func(dict Any) Any {
        return dict.(Dict)["one"]
    }
}
func ꞋmulRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["mulRecord"]
    }
}
func Ꞌmul() Any {
    return func(dict Any) Any {
        return dict.(Dict)["mul"]
    }
}
func ꞋaddRecord() Any {
    return func(dict Any) Any {
        return dict.(Dict)["addRecord"]
    }
}
func ꞋsemiringRecord() Any {
    return func(_ Any) Any {
        return func(dictSemiringRecord Any) Any {
            return Dict{"add": Apply(ꞋaddRecord(), dictSemiringRecord, Type_Proxy.ꞋProxy()), "mul": Apply(ꞋmulRecord(), dictSemiringRecord, Type_Proxy.ꞋProxy()), "one": Apply(ꞋoneRecord(), dictSemiringRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()), "zero": Apply(ꞋzeroRecord(), dictSemiringRecord, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy()),}
        }
    }
}
func Ꞌadd() Any {
    return func(dict Any) Any {
        return dict.(Dict)["add"]
    }
}
func ꞋsemiringFn() Any {
    return func(dictSemiring Any) Any {
        var add1 Any = Apply(Ꞌadd(), dictSemiring)
        var zero1 Any = Apply(Ꞌzero(), dictSemiring)
        var mul1 Any = Apply(Ꞌmul(), dictSemiring)
        var one1 Any = Apply(Ꞌone(), dictSemiring)
        return Dict{"add": func(f Any) Any {
                return func(g Any) Any {
                    return func(x Any) Any {
                        return Apply(add1, Apply(f, x), Apply(g, x))
                    }
                }
            }, "zero": func(v Any) Any {
                return zero1
            }, "mul": func(f Any) Any {
                return func(g Any) Any {
                    return func(x Any) Any {
                        return Apply(mul1, Apply(f, x), Apply(g, x))
                    }
                }
            }, "one": func(v Any) Any {
                return one1
            },}
    }
}
func ꞋsemiringRecordCons() Any {
    return func(dictIsSymbol Any) Any {
        var reflectSymbol Any = Apply(Data_Symbol.ꞋreflectSymbol(), dictIsSymbol)
        return func(_ Any) Any {
            return func(dictSemiringRecord Any) Any {
                var addRecord1 Any = Apply(ꞋaddRecord(), dictSemiringRecord)
                var mulRecord1 Any = Apply(ꞋmulRecord(), dictSemiringRecord)
                var oneRecord1 Any = Apply(ꞋoneRecord(), dictSemiringRecord)
                var zeroRecord1 Any = Apply(ꞋzeroRecord(), dictSemiringRecord)
                return func(dictSemiring Any) Any {
                    var add1 Any = Apply(Ꞌadd(), dictSemiring)
                    var mul1 Any = Apply(Ꞌmul(), dictSemiring)
                    var one1 Any = Apply(Ꞌone(), dictSemiring)
                    var zero1 Any = Apply(Ꞌzero(), dictSemiring)
                    return Dict{"addRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(addRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(add1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "mulRecord": func(v Any) Any {
                            return func(ra Any) Any {
                                return func(rb Any) Any {
                                    var tail Any = Apply(mulRecord1, Type_Proxy.ꞋProxy(), ra, rb)
                                    var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                    var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                    var get Any = Apply(Record_Unsafe.ꞋunsafeGet(), key)
                                    return Apply(insert, Apply(mul1, Apply(get, ra), Apply(get, rb)), tail)
                                }
                            }
                        }, "oneRecord": func(v Any) Any {
                            return func(v1 Any) Any {
                                var tail Any = Apply(oneRecord1, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy())
                                var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                return Apply(insert, one1, tail)
                            }
                        }, "zeroRecord": func(v Any) Any {
                            return func(v1 Any) Any {
                                var tail Any = Apply(zeroRecord1, Type_Proxy.ꞋProxy(), Type_Proxy.ꞋProxy())
                                var key Any = Apply(reflectSymbol, Type_Proxy.ꞋProxy())
                                var insert Any = Apply(Record_Unsafe.ꞋunsafeSet(), key)
                                return Apply(insert, zero1, tail)
                            }
                        },}
                }
            }
        }
    }
}


// Foreign values

var foreign = Foreign("Data.Semiring")

var ᛌintAdd_once Once
var ᛧintAdd Any

func ꞋintAdd() Any { 
    ᛌintAdd_once.Do(func() {
        ᛧintAdd = Get(foreign, "intAdd")
    })
    return ᛧintAdd
}

var ᛌintMul_once Once
var ᛧintMul Any

func ꞋintMul() Any { 
    ᛌintMul_once.Do(func() {
        ᛧintMul = Get(foreign, "intMul")
    })
    return ᛧintMul
}

var ᛌnumAdd_once Once
var ᛧnumAdd Any

func ꞋnumAdd() Any { 
    ᛌnumAdd_once.Do(func() {
        ᛧnumAdd = Get(foreign, "numAdd")
    })
    return ᛧnumAdd
}

var ᛌnumMul_once Once
var ᛧnumMul Any

func ꞋnumMul() Any { 
    ᛌnumMul_once.Do(func() {
        ᛧnumMul = Get(foreign, "numMul")
    })
    return ᛧnumMul
}


